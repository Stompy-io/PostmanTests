{
	"info": {
		"_postman_id": "b8546c78-742e-47a0-90ba-f1eadb84f2e1",
		"name": "AWS_API_Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Has Access\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property(\"access\");",
									"});",
									"pm.test(\"Has Refresh\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property(\"refresh\");",
									"});",
									"",
									"pm.environment.set('token', \"JWT \" + pm.response.json().access);",
									"pm.environment.set(\"accessed_time\", pm.variables.replaceIn(\"{{$timestamp}}\"));",
									"pm.environment.set('refresh', pm.response.json().refresh);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{testUser}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Secret123!",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host_user}}/auth/jwt/create/",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"auth",
								"jwt",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"Has Access\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property(\"access\");",
									"});",
									"pm.test(\"Has Refresh\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property(\"refresh\");",
									"});",
									"pm.environment.set('token', \"JWT \"+ pm.response.json().access);",
									"pm.environment.set(\"accessed_time\", pm.variables.replaceIn(\"{{$timestamp}}\"));",
									"pm.environment.set('refresh', pm.response.json().refresh)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "{{testUser}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Secret123!",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host_user}}/auth/jwt/create/",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"auth",
								"jwt",
								"create",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "With Auth",
			"item": [
				{
					"name": "Services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"service_types_dict\", pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "AWS Accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"results has Id, name, isRoot\",()=>{",
									"    let results = pm.response.json().results;",
									"    if (results != undefined && results.length){",
									"        //check the last element in the array so that we don't only check first element",
									"        pm.expect(results[results.length-1]).to.have.property('Id');",
									"        pm.expect(results[0]).to.have.property('Name');",
									"        pm.expect(results[results.length-1]).to.have.property('isRoot');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host_aws}}/organizations/list-accounts/?caid={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"organizations",
								"list-accounts",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AWS Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host_aws}}/services/?caid={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Coverage Chart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"})",
									"",
									"let results = pm.response.json().results;",
									"pm.test(\"Has 5 services\", function () {",
									"    pm.expect(results.length).to.equal(5);",
									"});",
									"",
									"pm.test(\"Each service has Coverage\", function () {",
									"    for(let i = 0; i<results.length; i++){",
									"        pm.expect(results[i]).to.have.property('Coverage');",
									"    }",
									"});",
									"",
									"pm.test('default is 7 days',()=>{",
									"   for(let i = 0; i<results.length; i++){",
									"       let this_service_coverage = results[i].Coverage;",
									"       if(this_service_coverage.length !== 0){",
									"            pm.expect(this_service_coverage.length).to.equal(7);",
									"       } ",
									"    }  ",
									"});",
									"",
									"pm.test(\"Not identical values\", function () {",
									"    pm.expect(pm.response.json().results).to.satisfy( (results)=>{",
									"        let coverage_rds, coverage_ec2;",
									"        for(let i = 0; i<results.length;i++ ){",
									"            if (results[i].Service == \"Amazon Relational Database Service\"){",
									"                coverage_rds = results[i].Coverage;",
									"            }",
									"            if (results[i].Service == 'Amazon Elastic Compute Cloud - Compute'){",
									"                coverage_ec2 = results[i].Coverage;",
									"            }",
									"        }",
									"        return (coverage_rds!=coverage_ec2);",
									"    });",
									"});",
									"",
									"const EC2_ORDER = 0;",
									"const RDS_ORDER = 1;",
									"//ELASTICACHE",
									"const EC_ORDER = 2;",
									"//REDSHIFT ",
									"const RSH_ORDER = 3;",
									"//ELASTISEARCH",
									"const ES_ORDER = 4;",
									"pm.test(\"In Order\",()=>{",
									"    for(let i = 0; i<results.length;i++){",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon Elastic Compute Cloud - Compute\");",
									"                break;",
									"",
									"            case RDS_ORDER:",
									"              pm.expect(results[i].Service).to.equal(\"Amazon Relational Database Service\");",
									"                break;",
									"            case EC_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon ElastiCache\");",
									"                break;",
									"            case RSH_ORDER:",
									"               pm.expect(results[i].Service).to.equal(\"Amazon Redshift\");",
									"                break;",
									"            case ES_ORDER:",
									"              pm.expect(results[i].Service).to.equal(\"Amazon Elasticsearch Service\");",
									"                break;",
									"        }",
									"    }",
									"",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-coverage/?caid={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-coverage",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Coverage Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"})",
									"",
									"let results = pm.response.json().results;",
									"pm.test(\"Has instanceType\", function () {",
									"    pm.expect(results[0].Instances[0].instanceType).to.exist;",
									"",
									"});",
									"",
									"pm.test(\"Has region\", function () {",
									"    pm.expect(results[0].Instances[0].region).to.exist;",
									"",
									"});",
									"",
									"pm.test(\"Has ReservedHours\", function () {",
									"    pm.expect(results[0].Instances[0].ReservedHours).to.exist;",
									"});",
									"",
									"pm.test(\"Has OnDemandHours\", function () {",
									"    pm.expect(results[0].Instances[0].OnDemandHours).to.exist;",
									"",
									"});",
									"",
									"pm.test(\"Has CoveragePercentage\", function () {",
									"    pm.expect(results[0].Instances[0].CoveragePercentage).to.exist;",
									"",
									"});",
									"",
									"pm.test(\"Has OnDemandCost\", function () {",
									"    pm.expect(results[0].Instances[0].OnDemandCost).to.exist;",
									"});",
									"",
									"pm.test(\"Coverage == ReservedHours/(ReservedHours + OnDemandHours) *100)\", ()=>{",
									"    let coverage = parseFloat(results[0].Instances[0].CoveragePercentage);",
									"    let reserved_hours = parseFloat(results[0].Instances[0].ReservedHours);",
									"    let on_demand = parseFloat(results[0].Instances[0].OnDemandHours);",
									"    let myCoverage = reserved_hours/(reserved_hours+on_demand)*100;",
									"    pm.expect(coverage).to.be.closeTo(myCoverage, 0.01);",
									"});",
									"const EC2_ORDER = 0;",
									"const RDS_ORDER = 1;",
									"//ELASTICACHE",
									"const EC_ORDER = 2;",
									"//REDSHIFT ",
									"const RSH_ORDER = 3;",
									"//ELASTISEARCH",
									"const ES_ORDER = 4;",
									"pm.test(\"In Order\",()=>{",
									"    for(let i = 0; i<results.length;i++){",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon Elastic Compute Cloud - Compute\");",
									"                break;",
									"",
									"            case RDS_ORDER:",
									"              pm.expect(results[i].Service).to.equal(\"Amazon Relational Database Service\");",
									"                break;",
									"            case EC_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon ElastiCache\");",
									"                break;",
									"            case RSH_ORDER:",
									"               pm.expect(results[i].Service).to.equal(\"Amazon Redshift\");",
									"                break;",
									"            case ES_ORDER:",
									"              pm.expect(results[i].Service).to.equal(\"Amazon Elasticsearch Service\");",
									"                break;",
									"        }",
									"    }",
									"",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-coverage/?cloud_account_id={{cloud_account_id}}&groupby=instance",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-coverage",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								},
								{
									"key": "groupby",
									"value": "instance"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Utilization Chart - with Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"let results = pm.response.json().results;",
									"",
									"pm.test(\"Has 5 services\", function () {",
									"    pm.expect(results.length).to.equal(5);",
									"});",
									"",
									"pm.test(\"Has Utilization Percentage\", function () {",
									"    for(let i = 0; i<results.length;i++){",
									"            if (results[i].Summary !== undefined){",
									"                pm.expect(results[i].Summary).to.have.property('UtilizationPercentage');",
									"            }",
									"    }",
									"});",
									"",
									"pm.test(\"Has TotalAmortizedFee\", function () {",
									"    for(let i = 0; i<results.length;i++){",
									"            if (results[i].Summary !== undefined){",
									"                pm.expect(results[i].Summary).to.have.property('TotalAmortizedFee');",
									"            }",
									"    }",
									"});",
									"",
									"pm.test(\"Has UnrealizedSavings\", function () {",
									"    for(let i = 0; i<results.length;i++){",
									"            if (results[i].Summary !== undefined){",
									"                pm.expect(results[i].Summary).to.have",
									"                .property('UnrealizedSavings');",
									"            }",
									"    }",
									"});",
									"",
									"pm.test(\"Not identical values\", function () {",
									"    pm.expect(pm.response.json().results).to.satisfy( (results)=>{",
									"        let fee1, fee2;",
									"        let savings1, savings2;",
									"        for(let i = 0; i<results.length;i++){",
									"            //if there are data with summary",
									"            if (results[i].Summary !== undefined){",
									"                if(fee1 === undefined){",
									"                    fee1 = results[i].Summary.TotalAmortizedFee;",
									"                    savings1 = results[i].Summary.UnrealizedSavings;",
									"                }else if(fee2 === undefined){",
									"                    fee2 = results[i].Summary.TotalAmortizedFee;",
									"                    savings2 = results[i].Summary.UnrealizedSavings;",
									"                    //if both data are the same, fail",
									"                    return (fee1 != fee2) || (savings1 != savings2);",
									"                }",
									"            }",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"UtilizationByTime has 6 data\",()=>{",
									"     for(let i = 0; i<results.length;i++){",
									"            if (results[i].UtilizationsByTime !== undefined){",
									"                pm.expect(results[i].UtilizationsByTime.length).to.equal(6);",
									"            }",
									"    }",
									"});",
									"",
									"const EC2_ORDER = 0;",
									"const RDS_ORDER = 1;",
									"//ELASTICACHE",
									"const EC_ORDER = 2;",
									"//REDSHIFT ",
									"const RSH_ORDER = 3;",
									"//ELASTISEARCH",
									"const ES_ORDER = 4;",
									"pm.test(\"In Order\",()=>{",
									"    for(let i = 0; i<results.length;i++){",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon Elastic Compute Cloud - Compute\");",
									"                break;",
									"",
									"            case RDS_ORDER:",
									"              pm.expect(results[i].Service).to.equal(\"Amazon Relational Database Service\");",
									"                break;",
									"            case EC_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon ElastiCache\");",
									"                break;",
									"            case RSH_ORDER:",
									"               pm.expect(results[i].Service).to.equal(\"Amazon Redshift\");",
									"                break;",
									"            case ES_ORDER:",
									"              pm.expect(results[i].Service).to.equal(\"Amazon Elasticsearch Service\");",
									"                break;",
									"        }",
									"    }",
									"",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/utilizations/reservation/?cloud_account_id={{cloud_account_id}}&granularity=daily",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"utilizations",
								"reservation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								},
								{
									"key": "granularity",
									"value": "daily"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Utilization Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"})",
									"",
									"let results = pm.response.json().results;",
									"pm.test(\"Has 5 services\", function () {",
									"    pm.expect(pm.response.json().results.length).to.equal(5);",
									"});",
									"",
									"pm.test(\"Each service has TotalAmortizedFee\", function () {",
									"    for(let i = 0; i<results.length; i++){",
									"        pm.expect(results[i]).to.have.property('TotalAmortizedFee');",
									"    }",
									"});",
									"",
									"pm.test(\"Each service has Subscriptions\", function () {",
									"    for(let i = 0; i<results.length; i++){",
									"        pm.expect(results[i]).to.have.property('Subscriptions');",
									"    }",
									"});",
									"",
									"//obtain the first non-empty subscription",
									"let sample_subscriptions;",
									"for(let i = 0; i<results.length; i++){",
									"    if(results[i].Subscriptions.length>0){",
									"        sample_subscriptions = results[i].Subscriptions;",
									"        break;",
									"    }   ",
									"}",
									"",
									"pm.test('Subscriptions has account name',()=>{",
									"   pm.expect(sample_subscriptions[0]).to.have.property('accountName');",
									"});",
									"pm.test('Subscriptions has subscription id',()=>{",
									"   pm.expect(sample_subscriptions[0]).to.have.property('subscriptionId');",
									"});",
									"pm.test('Subscriptions has instance type',()=>{",
									"   pm.expect(sample_subscriptions[0]).to.have.property('instanceType');",
									"});",
									"",
									"pm.test('Subscriptions has Reserved Used Hours',()=>{",
									"   pm.expect(sample_subscriptions[0]).to.have.property('ReservedUsedHours');",
									"});",
									"pm.test('Subscriptions has Reserved Unused Hours',()=>{",
									"   pm.expect(sample_subscriptions[0]).to.have.property('ReservedUnusedHours');",
									"});",
									"pm.test('Subscriptions has Utilization Percentage',()=>{",
									"   pm.expect(sample_subscriptions[0]).to.have.property('UtilizationPercentage');",
									"});",
									"pm.test('Subscriptions has Net RI Savings',()=>{",
									"   pm.expect(sample_subscriptions[0]).to.have.property('NetRISavings');",
									"});",
									"",
									"",
									"pm.test(\"Not identical values\", function () {",
									"    pm.expect(pm.response.json().results).to.satisfy( (results)=>{",
									"        let fee1, fee2;",
									"        let sub1, sub2;",
									"        for(let i = 0; i<results.length;i++){",
									"            //if there are data in subscription",
									"            if (results[i].Subscriptions.length>0){",
									"                if(fee1 === undefined){",
									"                    fee1 = results[i].TotalAmortizedFee;",
									"                    sub1 = results[i].Subscriptions;",
									"                }else if(fee2 === undefined){",
									"                    fee2 = results[i].TotalAmortizedFee;",
									"                    sub2 = results[i].Subscriptions;",
									"                    //if both data are the same, fail",
									"                    return (fee1 != fee2) || (sub1 != sub2);",
									"                }",
									"            }",
									"        }",
									"    });",
									"});",
									"pm.test(\"UtilizationPercentage =  reservation hours used/(reservation hours used+reservation hours unused)* 100% \",()=>{",
									"    pm.expect(sample_subscriptions).to.satisfy( (sample_subscriptions)=>{",
									"        for(let i = 0; i<sample_subscriptions.length;i++){",
									"            //utilization percentage",
									"            let util_percent = parseFloat(sample_subscriptions[i].UtilizationPercentage);",
									"            //reserved unused",
									"            let reserve_un =  parseFloat(sample_subscriptions[i].ReservedUnusedHours);",
									"            //reserved used",
									"            let reserve_used = parseFloat(sample_subscriptions[i].ReservedUsedHours);",
									"            let my_perc = (reserve_used/(reserve_un +reserve_used)*100).toFixed(2);",
									"            // console.log(\"used:{\"+ reserve_used+\"}, unused:{\" + reserve_un +\"}, myperc: {\"+my_perc+\"}\");",
									"            if (my_perc != util_percent){",
									"                return false;",
									"            }",
									"        }",
									"        return true;",
									"    });",
									"});",
									"const EC2_ORDER = 0;",
									"const RDS_ORDER = 1;",
									"//ELASTICACHE",
									"const EC_ORDER = 2;",
									"//REDSHIFT ",
									"const RSH_ORDER = 3;",
									"//ELASTISEARCH",
									"const ES_ORDER = 4;",
									"pm.test(\"In Order\",()=>{",
									"    for(let i = 0; i<results.length;i++){",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon Elastic Compute Cloud - Compute\");",
									"                break;",
									"",
									"            case RDS_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon Relational Database Service\");",
									"                break;",
									"            case EC_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon ElastiCache\");",
									"                break;",
									"            case RSH_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon Redshift\");",
									"                break;",
									"            case ES_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon Elasticsearch Service\");",
									"                break;",
									"        }",
									"    }",
									"",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/utilizations/reservation/?cloud_account_id={{cloud_account_id}}&groupby=subscription",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"utilizations",
								"reservation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								},
								{
									"key": "groupby",
									"value": "subscription"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Trends Diagram",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"Has 3 accounts\", ()=>{",
									"    pm.expect(pm.response.json().Diagram.length).to.equal(3);",
									"});",
									"",
									"pm.test(\"Has as many data points as given date\", ()=>{",
									"    pm.expect(pm.response.json().Diagram[0].data.length).to.equal(8);",
									"});",
									"",
									"pm.test(\"Table lists top 10\", ()=>{",
									"    pm.expect(pm.response.json()['Table'].length).to.be.at.most(10);",
									"});",
									"",
									"pm.test(\"AllTable has changes > 10%\",()=>{",
									"    let all_table = pm.response.json().AllTable;",
									"    for(let i = 0; i<all_table.length; i++){",
									"        let change = parseFloat(all_table[i].Change);",
									"        pm.expect(change).to.be.above(10);",
									"    }",
									"    ",
									"})",
									"",
									"let table = pm.response.json()['Table'];",
									"",
									"pm.test(\"Table from high diff to low\", ()=>{",
									"    ",
									"    let prev = parseInt(table[0]['Diff']);",
									"    for(let i = 1; i<table.length; i++){",
									"        let curr = parseInt(table[i]['Diff']);",
									"        pm.expect(prev).to.be.at.least(curr);",
									"        prev = curr;",
									"    }",
									"});",
									"",
									"",
									"",
									"pm.test(\"Table Change Rate is Correct\", ()=>{",
									"     for(let i = 0; i<table.length; i++){",
									"        let diff = parseFloat(table[i]['Diff']);",
									"        let change = parseFloat(table[i].Change);",
									"        let precost = parseFloat(table[i]['PreCost']);",
									"        let myChange = diff/precost*100;",
									"        pm.expect(change).to.be.closeTo(myChange,0.01);",
									"    }",
									"});",
									"",
									"pm.test(\"Table Diff is Correct\", ()=>{",
									"     for(let i = 0; i<table.length; i++){",
									"        let diff = parseFloat(table[i]['Diff']);",
									"        let cost = parseFloat(table[i]['Cost']);",
									"        let precost = parseFloat(table[i]['PreCost']);",
									"        let my_diff = cost - precost;",
									"        pm.expect(diff).be.closeTo(my_diff,0.01);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let moment = require('moment');",
									"let two_days_ago = moment().subtract(2,'days').format('YYYY-MM-DD');",
									"pm.environment.set('two_days_ago', two_days_ago);",
									"let weekAgo = moment().subtract(9,'days').format('YYYY-MM-DD');",
									"pm.environment.set('a_week_ago', weekAgo);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/get-trend-diagram/?cloud_account_id={{cloud_account_id}}&start_date={{a_week_ago}}&end_date={{two_days_ago}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-trend-diagram",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								},
								{
									"key": "start_date",
									"value": "{{a_week_ago}}"
								},
								{
									"key": "end_date",
									"value": "{{two_days_ago}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const EC2_ORDER = 0;",
									"const RDS_ORDER = 1;",
									"//ELASTICACHE",
									"const EC_ORDER = 2;",
									"//REDSHIFT ",
									"const RSH_ORDER = 3;",
									"//ELASTISEARCH",
									"const ES_ORDER = 4;",
									"",
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"In Order\",()=>{",
									"    let results = pm.response.json().results.grand_result;",
									"    //no data for es now",
									"   for(let i = 0; i<results.length-1;i++){",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon Elastic Compute Cloud - Compute\");",
									"                break;",
									"",
									"            case RDS_ORDER:",
									"              pm.expect(results[i].Service).to.equal(\"Amazon Relational Database Service\");",
									"                break;",
									"            case EC_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon ElastiCache\");",
									"                break;",
									"            case RSH_ORDER:",
									"               pm.expect(results[i].Service).to.equal(\"Amazon Redshift\");",
									"                break;",
									"                //when the mismatch is fixed, currently no Service key",
									"            // case ES_ORDER:",
									"            //   pm.expect(results[i].Service).to.equal(\"Amazon Elasticsearch Service\");",
									"            //     break;",
									"        }",
									"    }",
									"",
									"});",
									"",
									"let result_list = pm.response.json().results.grand_result;",
									"//EstimatedAnnualSavings = TotalEstimatedMonthlySavingsAmount*12",
									"pm.test(\"Annual Savings = monthly*12\",()=>{",
									"    let monthly, annual;",
									"    for (let i = 0; i<result_list.length; i++){",
									"        if( result_list[i].Summary == undefined){",
									"        continue;",
									"    }",
									"        monthly = parseFloat(result_list[i].Summary.TotalEstimatedMonthlySavingsAmount);",
									"        annual = parseFloat(result_list[i].Summary.EstimatedAnnualSavings);",
									"        pm.expect(monthly*12).to.be.closeTo(annual, 0.5);",
									"    }",
									"});",
									"",
									"",
									"//record savings",
									"let savings_per_instance = [];",
									"//Set up input for preview",
									"let instance_list = [];",
									"",
									"let r_id, raw_service, service, instances;",
									"for (let i = 0; i<result_list.length; i++){",
									"    //RecommendationId",
									"    r_id = result_list[i].RecommendationId;",
									"    raw_service = result_list[i].Service;",
									"    service = pm.environment.get(\"service_dict\")[raw_service];",
									"    if( r_id == undefined){",
									"        continue;",
									"    }",
									"    instances = result_list[i].RecommendationDetails;",
									"    let curr_instance, region, instance_type, count;",
									"    for(let j = 0; j<instances.length; j++){",
									"        curr_instance = instances[j];",
									"        //record each monthly savings",
									"        savings_per_instance.push(curr_instance.EstimatedMonthlySavings);",
									"        region = curr_instance.Region;",
									"        instance_type = curr_instance.RecommendedInstanceType;",
									"        count = curr_instance.RecommendedNumberOfInstances;",
									"        let info, dict;",
									"       ",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                info = curr_instance.Platform;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3, \"InstanceType\":instance_type, ",
									"                \"OfferingClass\": \"standard\", \"OfferingType\": \"All Upfront\",\"ProductDescription\":info , ",
									"                \"Region\":region,\"RecommendationId\":r_id};",
									"                instance_list.push(dict);",
									"                break;",
									"            case RDS_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                multiAZ = curr_instance.MultiAZ;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3,\"DBInstanceClass\": instance_type,",
									"                \"OfferingType\": \"All Upfront\",\"ProductDescription\":info,",
									"                 \"MultiAZ\": multiAZ, \"Region\": region,\"RecommendationId\": r_id};",
									"                instance_list.push(dict);",
									"                break;",
									"            case EC_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                dict = {\"Service\":service, \"Count\": count,\"CacheNodeType\": instance_type, \"Duration\": \"1\", \"ProductDescription\":info.toLowerCase(),",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                instance_list.push(dict);",
									"                break;",
									"            case RSH_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"NodeType\": instance_type, \"Duration\": 3, ",
									"                \"OfferingType\": \"Partial Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                instance_list.push(dict);",
									"                break;",
									"            case ES_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"RecommendedInstanceType\": instance_type, \"Duration\": 2, ",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                instance_list.push(dict);",
									"                break;",
									"        }",
									"    }  ",
									"}",
									"let instance_i = Math.floor(Math.random(instance_list)*instance_list.length);",
									"pm.environment.set(\"bought_index\",instance_i);",
									"let one_instance = instance_list[instance_i];",
									"pm.environment.set(\"one_instance\", JSON.stringify(one_instance));",
									"console.log(pm.environment.get(\"one_instance\"));",
									"let est_monthly_saving = savings_per_instance[instance_i];",
									"pm.environment.set(\"est_monthly_saving\", parseFloat(est_monthly_saving));",
									"console.log(pm.environment.get(\"est_monthly_saving\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-recommendation/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Status code is 200 or 204\", function () {",
									"//     pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-recommendation/?cloud_account_id=42080286085",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "42080286085"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Purchase Preview One of Instance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"pm.test(\"Has results\", () => {",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let pre_instance = JSON.parse(pm.environment.get(\"one_instance\"));",
									"",
									"let results = pm.response.json().results;",
									"",
									"pm.test(\"Has Service\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Service\");",
									"});",
									"",
									"let service = results[0].Service;",
									"pm.test(\"Service match request\", () => {",
									"    pm.expect(results[0].Service).to.equal(pre_instance.Service);",
									"});",
									"",
									"pm.test(\"Has Region\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Region\");",
									"});",
									"",
									"pm.test(\"Region match request\", () => {",
									"    if(service == \"ES\"){",
									"        let response_region = pm.collectionVariables.get('region_dict')[results[0].Region];",
									"        pm.expect(response_region).to.equal(pm.environment.get(\"_Region\"));",
									"    }else{",
									"        pm.expect(results[0].Region).to.equal(pre_instance.Region);",
									"    }",
									"});",
									"",
									"pm.test(\"Has Count\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Count\");",
									"});",
									"",
									"pm.test(\"Count match request\", () => {",
									"    pm.expect(results[0].Count).to.equal(parseInt(pre_instance.Count));",
									"});",
									"",
									"pm.test(\"Has Duration\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Duration\");",
									"});",
									"",
									"pm.test(\"Duration match request\", () => {",
									"    //60s * 60 min * 24 hr * 365 days",
									"    let request_duration_in_seconds = pre_instance.Duration * 60 * 60 * 24 * 365;",
									"    pm.expect(results[0].Duration).to.equal(request_duration_in_seconds);",
									"});",
									"",
									"pm.test(\"Check InstanceType\", () => {",
									"    pm.expect(results[0]).to.satisfy((instance) => {",
									"        if (service == \"EC2\") {",
									"            if (instance.InstanceType == undefined) {",
									"                console.log(\"InstanceType undefined\");",
									"                return false;",
									"            }",
									"            if (instance.OfferingClass != pre_instance.OfferingClass) {",
									"                console.log(\"Offering Class Mismatch\");",
									"                return false;",
									"            }",
									"            return (instance.InstanceType == pre_instance.InstanceType);",
									"        } else if (service == \"RDS\") {",
									"            if (instance.DBInstanceClass == undefined || instance.MultiAZ == undefined) {",
									"                console.log(\"DBInstanceClass or MultiAZ undefined\");",
									"                return false;",
									"            }",
									"            if (instance.DBInstanceClass != pre_instance.DBInstanceClass) {",
									"                console.log(\"InstanceType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        } else if (service == \"ElastiCache\") {",
									"            if (instance.CacheNodeType != pre_instance.CacheNodeType) {",
									"                console.log(\"CacheNodeType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        }else if( service == \"Redshift\"){",
									"            if (instance.NodeType != pre_instance.NodeType) {",
									"                console.log(\"NodeType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        }else {",
									"            if(service != \"ES\"){",
									"                console.log(\"Wrong Service Name\");",
									"                return false;",
									"            }",
									"            if (instance.ElasticsearchInstanceType != pre_instance.RecommendedInstanceType) {",
									"                console.log(\"ElasticsearchInstanceType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"InstanceType match request\", () => {",
									"    pm.expect(results[0].InstanceType).to.equal(pre_instance.InstanceType);",
									"});",
									"",
									"pm.test(\"Has OfferingType\", () => {",
									"    pm.expect(results[0]).to.have.property(\"OfferingType\");",
									"});",
									"",
									"pm.test(\"OfferingType match request\", () => {",
									"    pm.expect(results[0].OfferingType).to.equal(pre_instance.OfferingType);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\": \n   [\n    {{one_instance}}\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Billings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_user}}/bills/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"bills",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "View Purchases Made",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/?caid={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Release Version",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/release/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"release",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Forecast Cost",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/cost_forecast/cost_forecast/?caid={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"cost_forecast",
								"cost_forecast",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Current Cost",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/cost_usage/get_current/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"cost_usage",
								"get_current",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Account cost",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/cost_usage/account_cost/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"cost_usage",
								"account_cost",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Waste history",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/utilizations/wasted_history/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"utilizations",
								"wasted_history",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Savings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"})",
									"",
									"let results = pm.response.json().results;",
									"",
									"",
									"pm.test(\"Each service has TotalAmortizedFee\", function () {",
									"    for(let i = 0; i<results.length; i++){",
									"        pm.expect(results[i]).to.have.property('TotalAmortizedFee');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/savings/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"savings",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Efficiency",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/utilizations/efficiency/?cloud_account_id={{cloud_account_id}}&sub_accounts=[{\"Account\": \"385105545457\",\"Amount\": \"1290.75\",\"AccountName\": \"Stompy.io\"},{\"AccountID\": \"263078123597\",\"Amount\": \"1040.91\",\"AccountName\": \"MR332\"},{\"AccountID\": \"254378262586\",\"Amount\": \"4.22\",\"AccountName\": \"Stompy_test\"}]",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"utilizations",
								"efficiency",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								},
								{
									"key": "sub_accounts",
									"value": "[{\"Account\": \"385105545457\",\"Amount\": \"1290.75\",\"AccountName\": \"Stompy.io\"},{\"AccountID\": \"263078123597\",\"Amount\": \"1040.91\",\"AccountName\": \"MR332\"},{\"AccountID\": \"254378262586\",\"Amount\": \"4.22\",\"AccountName\": \"Stompy_test\"}]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Spend History",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/cost_usage/spend_history/?cloud_account_id={{cloud_account_id}}&params={\"TimePeriod\": {\"Start\": \"2021-06-01\",\"End\": \"2021-06-21\"},\"Granularity\": \"DAILY\",\"Metrics\": [\"UNBLENDED_COST\",\"AMORTIZED_COST\"],\"GroupBy\": [{\"Type\": \"DIMENSION\",\"Key\": \"LINKED_ACCOUNT\"}]}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"cost_usage",
								"spend_history",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								},
								{
									"key": "params",
									"value": "{\"TimePeriod\": {\"Start\": \"2021-06-01\",\"End\": \"2021-06-21\"},\"Granularity\": \"DAILY\",\"Metrics\": [\"UNBLENDED_COST\",\"AMORTIZED_COST\"],\"GroupBy\": [{\"Type\": \"DIMENSION\",\"Key\": \"LINKED_ACCOUNT\"}]}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"let accessed_time = pm.environment.get(\"accessed_time\");",
							"let current_time = pm.variables.replaceIn(\"{{$timestamp}}\");",
							"let time_passed = current_time - accessed_time;",
							"console.log(\"token accessed \"+ time_passed +\"s ago\")",
							"if(time_passed>240){",
							"    console.log(\"refreshed\");",
							"    pm.sendRequest({url: pm.environment.get('host_user') +'/auth/jwt/refresh/',",
							"    method: 'POST', body: { mode: 'formdata',",
							"        formdata: [{key: \"refresh\", value: pm.environment.get('refresh')}]",
							"        }},(err, res)=>{",
							"        pm.environment.set('accessed_time',  pm.variables.replaceIn(\"{{$timestamp}}\"));",
							"        pm.environment.set('token', \"JWT \"+ JSON.parse(res).access);",
							"        pm.environment.set('refresh', res.json().refresh);",
							"        console.log(res);",
							"    });",
							"}",
							"pm.request.headers.add({key: 'Authorization', value: pm.environment.get(\"token\") });"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const serviceDict = {",
					"    \"Amazon Elastic Compute Cloud - Compute\":\"EC2\",",
					"    \"Amazon Relational Database Service\":\"RDS\",",
					"    \"Amazon ElastiCache\": \"ElastiCache\" ,",
					"    \"Amazon Redshift\": \"Redshift\" ,",
					"    \"Amazon ElastiSearch\": \"ES\"",
					"};",
					"",
					"pm.environment.set(\"service_dict\", serviceDict);",
					"",
					"let region_dict ={ // Only needed by ES preview comparison",
					"    'us-east-1': 'US East (N. Virginia)',",
					"    'us-east-2': 'US East (Ohio)',",
					"    'us-west-1': 'US West (N. California)',",
					"    'us-west-2': 'US West (Oregon)',",
					"    'af-south-1': 'Africa (Cape Town)',",
					"    'ap-east-1': 'Asia Pacific (Hong Kong)',",
					"    'ap-south-1': 'Asia Pacific (Mumbai)',",
					"    'ap-northeast-3': 'Asia Pacific (Osaka)',",
					"    'ap-northeast-2': 'Asia Pacific (Seoul)',",
					"    'ap-southeast-1': 'Asia Pacific (Singapore)',",
					"    'ap-southeast-2': 'Asia Pacific (Sydney)',",
					"    'ap-northeast-1': 'Asia Pacific (Tokyo)',",
					"    'ca-central-1': 'Canada (Central)',",
					"    'eu-central-1': 'Europe (Frankfurt)',",
					"    'eu-west-1': 'Europe (Ireland)',",
					"    'eu-west-2': 'Europe (London)',",
					"    'eu-south-1': 'Europe (Milan)',",
					"    'eu-west-3': 'Europe (Paris)',",
					"    'eu-north-1': 'Europe (Stockholm)',",
					"    'me-south-1': 'Middle East (Bahrain)',",
					"    'sa-east-1': 'South America (São Paulo)'",
					"}",
					"pm.collectionVariables.set(\"region_dict\", region_dict);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "region_dict",
			"value": ""
		},
		{
			"key": "service_types_dict",
			"value": ""
		},
		{
			"key": "aYearAgo",
			"value": ""
		},
		{
			"key": "host_aws",
			"value": ""
		},
		{
			"key": "cloud_account_id",
			"value": ""
		},
		{
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		}
	]
}