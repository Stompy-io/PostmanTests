{
	"info": {
		"_postman_id": "b8546c78-742e-47a0-90ba-f1eadb84f2e1",
		"name": "AWS_API_Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AWS Accounts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"",
							"pm.test(\"results has Id, name, isRoot\",()=>{",
							"    let results = pm.response.json().results;",
							"    if (results != undefined && results.length){",
							"        //check the last element in the array so that we don't only check first element",
							"        pm.expect(results[results.length-1]).to.have.property('Id');",
							"        pm.expect(results[0]).to.have.property('Name');",
							"        pm.expect(results[results.length-1]).to.have.property('isRoot');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_aws}}/organizations/list-accounts/?cloud_account_id={{cloud_account_id}}",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"organizations",
						"list-accounts",
						""
					],
					"query": [
						{
							"key": "cloud_account_id",
							"value": "{{cloud_account_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "AWS Services",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_aws}}/services/?cloud_account_id={{cloud_account_id}}",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						""
					],
					"query": [
						{
							"key": "cloud_account_id",
							"value": "{{cloud_account_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Purchase Recommendation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_aws}}/ce/get-reservation-purchase-recommendation/?cloud_account_id={{cloud_account_id}}&period=SEVEN_DAYS",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"ce",
						"get-reservation-purchase-recommendation",
						""
					],
					"query": [
						{
							"key": "cloud_account_id",
							"value": "{{cloud_account_id}}"
						},
						{
							"key": "period",
							"value": "SEVEN_DAYS"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Purchase Recommendation - missing param",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_aws}}/ce/get-reservation-purchase-recommendation/?cloud_account_id={{cloud_account_id}}",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"ce",
						"get-reservation-purchase-recommendation",
						""
					],
					"query": [
						{
							"key": "cloud_account_id",
							"value": "{{cloud_account_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Coverage Chart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"})",
							"",
							"let results = pm.response.json().results;",
							"pm.test(\"Has 5 services\", function () {",
							"    pm.expect(results.length).to.equal(5);",
							"});",
							"",
							"pm.test(\"Each service has Coverage\", function () {",
							"    for(let i = 0; i<results.length; i++){",
							"        pm.expect(results[i]).to.have.property('Coverage');",
							"    }",
							"});",
							"",
							"pm.test('default is 7 days',()=>{",
							"   for(let i = 0; i<results.length; i++){",
							"       let this_service_coverage = results[i].Coverage;",
							"       if(this_service_coverage.length !== 0){",
							"            pm.expect(this_service_coverage.length).to.equal(7);",
							"       } ",
							"    }  ",
							"});",
							"",
							"pm.test(\"Not identical values\", function () {",
							"    pm.expect(pm.response.json().results).to.satisfy( (results)=>{",
							"        let coverage_rds, coverage_ec2;",
							"        for(let i = 0; i<results.length;i++ ){",
							"            if (results[i].Service == \"Amazon Relational Database Service\"){",
							"                coverage_rds = results[i].Coverage;",
							"            }",
							"            if (results[i].Service == 'Amazon Elastic Compute Cloud - Compute'){",
							"                coverage_ec2 = results[i].Coverage;",
							"            }",
							"        }",
							"        return (coverage_rds!=coverage_ec2);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_aws}}/ce/get-reservation-coverage/?cloud_account_id={{cloud_account_id}}",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"ce",
						"get-reservation-coverage",
						""
					],
					"query": [
						{
							"key": "cloud_account_id",
							"value": "{{cloud_account_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Coverage Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"})",
							"",
							"let results = pm.response.json().results;",
							"pm.test(\"Has instanceType\", function () {",
							"    pm.expect(results[0].Instances[0].instanceType).to.exist;",
							"",
							"});",
							"",
							"pm.test(\"Has region\", function () {",
							"    pm.expect(results[0].Instances[0].region).to.exist;",
							"",
							"});",
							"",
							"pm.test(\"Has ReservedHours\", function () {",
							"    pm.expect(results[0].Instances[0].ReservedHours).to.exist;",
							"});",
							"",
							"pm.test(\"Has OnDemandHours\", function () {",
							"    pm.expect(results[0].Instances[0].OnDemandHours).to.exist;",
							"",
							"});",
							"",
							"pm.test(\"Has CoveragePercentage\", function () {",
							"    pm.expect(results[0].Instances[0].CoveragePercentage).to.exist;",
							"",
							"});",
							"",
							"pm.test(\"Has OnDemandCost\", function () {",
							"    pm.expect(results[0].Instances[0].OnDemandCost).to.exist;",
							"});",
							"",
							"pm.test(\"Coverage == ReservedHours/(ReservedHours + OnDemandHours) *100)\", ()=>{",
							"    let coverage = parseFloat(results[0].Instances[0].CoveragePercentage);",
							"    let reserved_hours = parseFloat(results[0].Instances[0].ReservedHours);",
							"    let on_demand = parseFloat(results[0].Instances[0].OnDemandHours);",
							"    let myCoverage = reserved_hours/(reserved_hours+on_demand)*100;",
							"    console.log(\"myCoverage\"+typeof(myCoverage)+\"coverage\"+typeof(coverage));",
							"    pm.expect(coverage).to.be.closeTo(myCoverage, 0.01);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_aws}}/ce/get-reservation-coverage/?cloud_account_id={{cloud_account_id}}&groupby=instance",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"ce",
						"get-reservation-coverage",
						""
					],
					"query": [
						{
							"key": "cloud_account_id",
							"value": "{{cloud_account_id}}"
						},
						{
							"key": "groupby",
							"value": "instance"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Recommendation Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_aws}}/ce/get-reservation-recommendation/?cloud_account_id={{cloud_account_id}}&groupby=subscription",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"ce",
						"get-reservation-recommendation",
						""
					],
					"query": [
						{
							"key": "cloud_account_id",
							"value": "{{cloud_account_id}}"
						},
						{
							"key": "groupby",
							"value": "subscription"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Trends Diagram",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"",
							"pm.test(\"Has 3 accounts\", ()=>{",
							"    pm.expect(pm.response.json().Diagram.length).to.equal(3);",
							"});",
							"",
							"pm.test(\"Has as many data points as given date\", ()=>{",
							"    pm.expect(pm.response.json().Diagram[0].data.length).to.equal(7);",
							"});",
							"",
							"pm.test(\"Table lists top 10\", ()=>{",
							"    pm.expect(pm.response.json()['Table'].length).to.be.at.most(10);",
							"});",
							"",
							"pm.test(\"AllTable has changes > 10%\",()=>{",
							"    let all_table = pm.response.json().AllTable;",
							"    for(let i = 0; i<all_table.length; i++){",
							"        let change = parseFloat(all_table[i].Change);",
							"        pm.expect(change).to.be.above(10);",
							"    }",
							"    ",
							"})",
							"",
							"let table = pm.response.json()['Table'];",
							"",
							"pm.test(\"Table from high diff to low\", ()=>{",
							"    ",
							"    let prev = parseInt(table[0]['Diff']);",
							"    for(let i = 1; i<table.length; i++){",
							"        let curr = parseInt(table[i]['Diff']);",
							"        pm.expect(prev).to.be.at.least(curr);",
							"        prev = curr;",
							"    }",
							"});",
							"",
							"",
							"",
							"pm.test(\"Table Change Rate is Correct\", ()=>{",
							"     for(let i = 0; i<table.length; i++){",
							"        let diff = parseFloat(table[i]['Diff']);",
							"        let change = parseFloat(table[i].Change);",
							"        let precost = parseFloat(table[i]['PreCost']);",
							"        let myChange = diff/precost*100;",
							"        pm.expect(change).to.be.closeTo(myChange,0.01);",
							"    }",
							"});",
							"",
							"pm.test(\"Table Diff is Correct\", ()=>{",
							"     for(let i = 0; i<table.length; i++){",
							"        let diff = parseFloat(table[i]['Diff']);",
							"        let cost = parseFloat(table[i]['Cost']);",
							"        let precost = parseFloat(table[i]['PreCost']);",
							"        let my_diff = cost - precost;",
							"        pm.expect(diff).be.closeTo(my_diff,0.01);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let moment = require('moment');",
							"let yesterday = moment().subtract(1,'days').format('YYYY-MM-DD');",
							"pm.environment.set('yesterday', yesterday);",
							"let weekAgo = moment().subtract(8,'days').format('YYYY-MM-DD');",
							"pm.environment.set('a_week_ago', weekAgo);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_aws}}/ce/get-trend-diagram/?cloud_account_id={{cloud_account_id}}&start_date={{a_week_ago}}&end_date={{yesterday}}",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"ce",
						"get-trend-diagram",
						""
					],
					"query": [
						{
							"key": "cloud_account_id",
							"value": "{{cloud_account_id}}"
						},
						{
							"key": "start_date",
							"value": "{{a_week_ago}}"
						},
						{
							"key": "end_date",
							"value": "{{yesterday}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Utilization Chart - with Summary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"let results = pm.response.json().results;",
							"",
							"pm.test(\"Has 5 services\", function () {",
							"    pm.expect(results.length).to.equal(5);",
							"});",
							"",
							"pm.test(\"Has Utilization Percentage\", function () {",
							"    for(let i = 0; i<results.length;i++){",
							"            if (results[i].Summary !== undefined){",
							"                pm.expect(results[i].Summary).to.have.property('UtilizationPercentage');",
							"            }",
							"    }",
							"});",
							"",
							"pm.test(\"Has TotalAmortizedFee\", function () {",
							"    for(let i = 0; i<results.length;i++){",
							"            if (results[i].Summary !== undefined){",
							"                pm.expect(results[i].Summary).to.have.property('TotalAmortizedFee');",
							"            }",
							"    }",
							"});",
							"",
							"pm.test(\"Has UnrealizedSavings\", function () {",
							"    for(let i = 0; i<results.length;i++){",
							"            if (results[i].Summary !== undefined){",
							"                pm.expect(results[i].Summary).to.have",
							"                .property('UnrealizedSavings');",
							"            }",
							"    }",
							"});",
							"",
							"pm.test(\"Not identical values\", function () {",
							"    pm.expect(pm.response.json().results).to.satisfy( (results)=>{",
							"        let fee1, fee2;",
							"        let savings1, savings2;",
							"        for(let i = 0; i<results.length;i++){",
							"            //if there are data with summary",
							"            if (results[i].Summary !== undefined){",
							"                if(fee1 === undefined){",
							"                    fee1 = results[i].Summary.TotalAmortizedFee;",
							"                    savings1 = results[i].Summary.UnrealizedSavings;",
							"                }else if(fee2 === undefined){",
							"                    fee2 = results[i].Summary.TotalAmortizedFee;",
							"                    savings2 = results[i].Summary.UnrealizedSavings;",
							"                    //if both data are the same, fail",
							"                    return (fee1 != fee2) || (savings1 != savings2);",
							"                }",
							"            }",
							"        }",
							"    });",
							"});",
							"",
							"pm.test(\"Has UtilizationByTime\",()=>{",
							"    pm.expect(results).to.satisfy( (result)=>{",
							"        for(let i = 0; i<results.length;i++){",
							"            if ('UtilizationsByTime' in results[i]){",
							"                return true;",
							"            }",
							"        }",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_aws}}/ce/get-reservation-utilization/?cloud_account_id={{cloud_account_id}}&granularity=daily",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"ce",
						"get-reservation-utilization",
						""
					],
					"query": [
						{
							"key": "cloud_account_id",
							"value": "{{cloud_account_id}}"
						},
						{
							"key": "granularity",
							"value": "daily"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Utilization Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"})",
							"",
							"let results = pm.response.json().results;",
							"pm.test(\"Has 5 services\", function () {",
							"    pm.expect(pm.response.json().results.length).to.equal(5);",
							"});",
							"",
							"pm.test(\"Each service has TotalAmortizedFee\", function () {",
							"    for(let i = 0; i<results.length; i++){",
							"        pm.expect(results[i]).to.have.property('TotalAmortizedFee');",
							"    }",
							"});",
							"",
							"pm.test(\"Each service has Subscriptions\", function () {",
							"    for(let i = 0; i<results.length; i++){",
							"        pm.expect(results[i]).to.have.property('Subscriptions');",
							"    }",
							"});",
							"",
							"//obtain the first non-empty subscription",
							"let sample_subscriptions;",
							"for(let i = 0; i<results.length; i++){",
							"    if(results[i].Subscriptions.length>0){",
							"        sample_subscriptions = results[i].Subscriptions;",
							"        break;",
							"    }   ",
							"}",
							"",
							"pm.test('Subscriptions has account name',()=>{",
							"   pm.expect(sample_subscriptions[0]).to.have.property('accountName');",
							"});",
							"pm.test('Subscriptions has subscription id',()=>{",
							"   pm.expect(sample_subscriptions[0]).to.have.property('subscriptionId');",
							"});",
							"pm.test('Subscriptions has instance type',()=>{",
							"   pm.expect(sample_subscriptions[0]).to.have.property('instanceType');",
							"});",
							"",
							"pm.test('Subscriptions has Reserved Used Hours',()=>{",
							"   pm.expect(sample_subscriptions[0]).to.have.property('ReservedUsedHours');",
							"});",
							"pm.test('Subscriptions has Reserved Unused Hours',()=>{",
							"   pm.expect(sample_subscriptions[0]).to.have.property('ReservedUnusedHours');",
							"});",
							"pm.test('Subscriptions has Utilization Percentage',()=>{",
							"   pm.expect(sample_subscriptions[0]).to.have.property('UtilizationPercentage');",
							"});",
							"pm.test('Subscriptions has Net RI Savings',()=>{",
							"   pm.expect(sample_subscriptions[0]).to.have.property('NetRISavings');",
							"});",
							"",
							"",
							"pm.test(\"Not identical values\", function () {",
							"    pm.expect(pm.response.json().results).to.satisfy( (results)=>{",
							"        let fee1, fee2;",
							"        let sub1, sub2;",
							"        for(let i = 0; i<results.length;i++){",
							"            //if there are data in subscription",
							"            if (results[i].Subscriptions.length>0){",
							"                if(fee1 === undefined){",
							"                    fee1 = results[i].TotalAmortizedFee;",
							"                    sub1 = results[i].Subscriptions;",
							"                }else if(fee2 === undefined){",
							"                    fee2 = results[i].TotalAmortizedFee;",
							"                    sub2 = results[i].Subscriptions;",
							"                    //if both data are the same, fail",
							"                    return (fee1 != fee2) || (sub1 != sub2);",
							"                }",
							"            }",
							"        }",
							"    });",
							"});",
							"pm.test(\"UtilizationPercentage =  reservation hours used/(reservation hours used+reservation hours unused)* 100% \",()=>{",
							"    pm.expect(sample_subscriptions).to.satisfy( (sample_subscriptions)=>{",
							"        for(let i = 0; i<sample_subscriptions.length;i++){",
							"            //utilization percentage",
							"            let util_percent = parseFloat(sample_subscriptions[i].UtilizationPercentage);",
							"            //reserved unused",
							"            let reserve_un =  parseFloat(sample_subscriptions[i].ReservedUnusedHours);",
							"            //reserved used",
							"            let reserve_used = parseFloat(sample_subscriptions[i].ReservedUsedHours);",
							"            let my_perc = (reserve_used/(reserve_un +reserve_used)*100).toFixed(2);",
							"            // console.log(\"used:{\"+ reserve_used+\"}, unused:{\" + reserve_un +\"}, myperc: {\"+my_perc+\"}\");",
							"            if (my_perc != util_percent){",
							"                return false;",
							"            }",
							"        }",
							"        return true;",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_aws}}/ce/get-reservation-utilization/?cloud_account_id={{cloud_account_id}}&groupby=subscription",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"ce",
						"get-reservation-utilization",
						""
					],
					"query": [
						{
							"key": "cloud_account_id",
							"value": "{{cloud_account_id}}"
						},
						{
							"key": "groupby",
							"value": "subscription"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "aYearAgo",
			"value": ""
		},
		{
			"key": "host_aws",
			"value": "https://v1.aws.api.stompy.io"
		},
		{
			"key": "cloud_account_id",
			"value": "4208028608559802998"
		},
		{
			"value": ""
		}
	]
}