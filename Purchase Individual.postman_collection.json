{
	"info": {
		"_postman_id": "9b77d071-ddbe-4ade-b975-61e3ce610ab6",
		"name": "Purchase Individual",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "One EC2",
			"item": [
				{
					"name": "Services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"service_types_dict\", pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const EC2_ORDER = 0;",
									"const RDS_ORDER = 1;",
									"//ELASTICACHE",
									"const EC_ORDER = 2;",
									"//REDSHIFT ",
									"const RSH_ORDER = 3;",
									"//ELASTISEARCH",
									"const ES_ORDER = 4;",
									"",
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"In Order\",()=>{",
									"    let results = pm.response.json().results.grand_result;",
									"    //no d",
									"    for(let i = 0; i<results.length-1;i++){",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon Elastic Compute Cloud - Compute\");",
									"                break;",
									"",
									"            case RDS_ORDER:",
									"              pm.expect(results[i].Service).to.equal(\"Amazon Relational Database Service\");",
									"                break;",
									"            case EC_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon ElastiCache\");",
									"                break;",
									"            case RSH_ORDER:",
									"               pm.expect(results[i].Service).to.equal(\"Amazon Redshift\");",
									"                break;",
									"                //when the mismatch is fixed, currently no Service key",
									"            // case ES_ORDER:",
									"            //   pm.expect(results[i].Service).to.equal(\"Amazon Elasticsearch Service\");",
									"            //     break;",
									"        }",
									"    }",
									"",
									"})",
									"",
									"//Set up input for preview",
									"",
									"let ec2_list = [];",
									"let rds_list = [];",
									"let ec_list = [];",
									"let rsh_list = [];",
									"let es_list = [];",
									"let result_list = pm.response.json().results.grand_result;",
									"let r_id, raw_service, service, instances;",
									"for (let i = 0; i<result_list.length; i++){",
									"    //RecommendationId",
									"    r_id = result_list[i].RecommendationId;",
									"    raw_service = result_list[i].Service;",
									"    service = pm.environment.get(\"service_dict\")[raw_service];",
									"    if( r_id == undefined){",
									"        continue;",
									"    }",
									"    instances = result_list[i].RecommendationDetails;",
									"    let curr_instance, region, instance_type, count;",
									"    for(let j = 0; j<instances.length; j++){",
									"        curr_instance = instances[j];",
									"        region = curr_instance.Region;",
									"        instance_type = curr_instance.RecommendedInstanceType;",
									"        count = curr_instance.RecommendedNumberOfInstances;",
									"        let info, dict;",
									"       ",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                info = curr_instance.Platform;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3, \"InstanceType\":instance_type, ",
									"                \"OfferingClass\": \"standard\", \"OfferingType\": \"All Upfront\",\"ProductDescription\":info , ",
									"                \"Region\":region,\"RecommendationId\":r_id};",
									"                ec2_list.push(dict);",
									"                break;",
									"            case RDS_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                multiAZ = curr_instance.MultiAZ;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3,\"DBInstanceClass\": instance_type,",
									"                \"OfferingType\": \"All Upfront\",\"ProductDescription\":info,",
									"                 \"MultiAZ\": multiAZ, \"Region\": region,\"RecommendationId\": r_id};",
									"                rds_list.push(dict);",
									"                break;",
									"            case EC_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                dict = {\"Service\":service, \"Count\": count,\"CacheNodeType\": instance_type, \"Duration\": \"1\", \"ProductDescription\":info.toLowerCase(),",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                ec_list.push(dict);",
									"                break;",
									"            case RSH_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"NodeType\": instance_type, \"Duration\": 3, ",
									"                \"OfferingType\": \"Partial Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                rsh_list.push(dict);",
									"                break;",
									"            case ES_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"RecommendedInstanceType\": instance_type, \"Duration\": 2, ",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                es_list.push(dict);",
									"                break;",
									"        }",
									"    }  ",
									"}",
									"",
									"pm.environment.set(\"ec2_instances\",ec2_list);",
									"pm.environment.set(\"rds_instances\",rds_list);",
									"pm.environment.set(\"elc_instances\",ec_list);",
									"pm.environment.set(\"red_instances\",rsh_list);",
									"pm.environment.set(\"es_instances\",es_list);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-recommendation/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
								"ce",
								"get-reservation-recommendation",
								""
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Purchase One EC2 Preview",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let instances = pm.environment.get(\"ec2_instances\");",
									"let index = Math.floor(Math.random()*instances.length);",
									"pm.environment.set(\"one_instance\", JSON.stringify(instances[index]));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"pm.test(\"Has results\", () => {",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let pre_instance = JSON.parse(pm.environment.get(\"one_instance\"));",
									"",
									"let results = pm.response.json().results;",
									"",
									"pm.test(\"Has Service\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Service\");",
									"});",
									"",
									"let service = results[0].Service;",
									"pm.test(\"Service match request\", () => {",
									"    pm.expect(results[0].Service).to.equal(pre_instance.Service);",
									"});",
									"",
									"pm.test(\"Has Region\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Region\");",
									"});",
									"",
									"pm.test(\"Region match request\", () => {",
									"    if(service == \"ES\"){",
									"        let response_region = pm.collectionVariables.get('region_dict')[results[0].Region];",
									"        pm.expect(response_region).to.equal(pm.environment.get(\"_Region\"));",
									"    }else{",
									"        pm.expect(results[0].Region).to.equal(pre_instance.Region);",
									"    }",
									"});",
									"",
									"pm.test(\"Has Count\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Count\");",
									"});",
									"",
									"pm.test(\"Count match request\", () => {",
									"    pm.expect(results[0].Count).to.equal(parseInt(pre_instance.Count));",
									"});",
									"",
									"pm.test(\"Has Duration\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Duration\");",
									"});",
									"",
									"pm.test(\"Duration match request\", () => {",
									"    //60s * 60 min * 24 hr * 365 days",
									"    let request_duration_in_seconds = pre_instance.Duration * 60 * 60 * 24 * 365;",
									"    pm.expect(results[0].Duration).to.equal(request_duration_in_seconds);",
									"});",
									"",
									"pm.test(\"Check InstanceType\", () => {",
									"    pm.expect(results[0]).to.satisfy((instance) => {",
									"        if (service == \"EC2\") {",
									"            if (instance.InstanceType == undefined) {",
									"                console.log(\"InstanceType undefined\");",
									"                return false;",
									"            }",
									"            if (instance.OfferingClass != pre_instance.OfferingClass) {",
									"                console.log(\"Offering Class Mismatch\");",
									"                return false;",
									"            }",
									"            return (instance.InstanceType == pre_instance.InstanceType);",
									"        } else if (service == \"RDS\") {",
									"            if (instance.DBInstanceClass == undefined || instance.MultiAZ == undefined) {",
									"                console.log(\"DBInstanceClass or MultiAZ undefined\");",
									"                return false;",
									"            }",
									"            if (instance.DBInstanceClass != pre_instance.DBInstanceClass) {",
									"                console.log(\"InstanceType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        } else if (service == \"ElastiCache\") {",
									"            if (instance.CacheNodeType != pre_instance.CacheNodeType) {",
									"                console.log(\"CacheNodeType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        }else if( service == \"Redshift\"){",
									"            if (instance.NodeType != pre_instance.NodeType) {",
									"                console.log(\"NodeType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        }else {",
									"            if(service != \"ES\"){",
									"                console.log(\"Wrong Service Name\");",
									"                return false;",
									"            }",
									"            if (instance.ElasticsearchInstanceType != pre_instance.RecommendedInstanceType) {",
									"                console.log(\"ElasticsearchInstanceType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Has OfferingType\", () => {",
									"    pm.expect(results[0]).to.have.property(\"OfferingType\");",
									"});",
									"",
									"pm.test(\"OfferingType match request\", () => {",
									"    pm.expect(results[0].OfferingType).to.equal(pre_instance.OfferingType);",
									"});",
									"",
									"pm.test(\"Has ProductDescription\", () => {",
									"    pm.expect(results[0]).to.have.property(\"ProductDescription\");",
									"});",
									"",
									"pm.test(\"ProductDescription match request\", () => {",
									"    pm.expect(results[0].ProductDescription).to.equal(pre_instance.ProductDescription);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\": \n   [{{one_instance}}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!!Purchase One",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let pre_instance = JSON.parse(pm.environment.get(\"one_instance\"));",
									"",
									"let results = pm.response.json().results;",
									"",
									"pm.test(\"Has Service\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Service\");",
									"});",
									"",
									"pm.test(\"Service match request\", () => {",
									"    pm.expect(results[0].Service).to.equal(pre_instance.Service);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": false,\n  \"Instances\":\n  [{{one_instance}}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation Cleared",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"// pm.test(\"Bought service goes away\",()=>{",
									"//     let result = pm.response.json().results.grand_result;",
									"//     let bought_index = pm.environment.get(\"bought_index\");",
									"//     pm.expect(result[bought_index].RecommendationDetails.length).to.equal(0);",
									"    ",
									"// });",
									"pm.test(\"Bought service goes away\",()=>{",
									"    pm.expect( pm.response.json().results.grand_result).to.satisfy((result)=>{",
									"        for(let i =0; i< result.length;i++){",
									"            if(result[i].RecommendationDetails === undefined){",
									"                continue;",
									"            }",
									"            let total = parseInt(result[i].Summary.TotalRecommendations);",
									"            if (result[i].RecommendationDetails.length == total-1){",
									"                return true;",
									"            }",
									"        }",
									"        return false;",
									"    })",
									"});",
									"//     let result = pm.response.json().results.grand_result;",
									"//     let bought_index = pm.environment.get(\"bought_index\");",
									"//     pm.expect(result[bought_index].RecommendationDetails.length).to.equal(0);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-purchase-recommendation/?cloud_account_id={{cloud_account_id}}&period=SEVEN_DAYS",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-purchase-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								},
								{
									"key": "period",
									"value": "SEVEN_DAYS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "View Purchases Made",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.environment.set(\"purchase_id\", pm.response.json()[0].id) ;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/?caid={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear Purchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/{{purchase_id}}/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								"{{purchase_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "One RDS",
			"item": [
				{
					"name": "Services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"service_types_dict\", pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const EC2_ORDER = 0;",
									"const RDS_ORDER = 1;",
									"//ELASTICACHE",
									"const EC_ORDER = 2;",
									"//REDSHIFT ",
									"const RSH_ORDER = 3;",
									"//ELASTISEARCH",
									"const ES_ORDER = 4;",
									"",
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"In Order\",()=>{",
									"    let results = pm.response.json().results.grand_result;",
									"    //no d",
									"    for(let i = 0; i<results.length-1;i++){",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon Elastic Compute Cloud - Compute\");",
									"                break;",
									"",
									"            case RDS_ORDER:",
									"              pm.expect(results[i].Service).to.equal(\"Amazon Relational Database Service\");",
									"                break;",
									"            case EC_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon ElastiCache\");",
									"                break;",
									"            case RSH_ORDER:",
									"               pm.expect(results[i].Service).to.equal(\"Amazon Redshift\");",
									"                break;",
									"                //when the mismatch is fixed, currently no Service key",
									"            // case ES_ORDER:",
									"            //   pm.expect(results[i].Service).to.equal(\"Amazon Elasticsearch Service\");",
									"            //     break;",
									"        }",
									"    }",
									"",
									"})",
									"",
									"//Set up input for preview",
									"",
									"let ec2_list = [];",
									"let rds_list = [];",
									"let ec_list = [];",
									"let rsh_list = [];",
									"let es_list = [];",
									"let result_list = pm.response.json().results.grand_result;",
									"let r_id, raw_service, service, instances;",
									"for (let i = 0; i<result_list.length; i++){",
									"    //RecommendationId",
									"    r_id = result_list[i].RecommendationId;",
									"    raw_service = result_list[i].Service;",
									"    service = pm.environment.get(\"service_dict\")[raw_service];",
									"    if( r_id == undefined){",
									"        continue;",
									"    }",
									"    instances = result_list[i].RecommendationDetails;",
									"    let curr_instance, region, instance_type, count;",
									"    for(let j = 0; j<instances.length; j++){",
									"        curr_instance = instances[j];",
									"        region = curr_instance.Region;",
									"        instance_type = curr_instance.RecommendedInstanceType;",
									"        count = curr_instance.RecommendedNumberOfInstances;",
									"        let info, dict;",
									"       ",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                info = curr_instance.Platform;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3, \"InstanceType\":instance_type, ",
									"                \"OfferingClass\": \"standard\", \"OfferingType\": \"All Upfront\",\"ProductDescription\":info , ",
									"                \"Region\":region,\"RecommendationId\":r_id};",
									"                ec2_list.push(dict);",
									"                break;",
									"            case RDS_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                multiAZ = curr_instance.MultiAZ;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3,\"DBInstanceClass\": instance_type,",
									"                \"OfferingType\": \"All Upfront\",\"ProductDescription\":info,",
									"                 \"MultiAZ\": multiAZ, \"Region\": region,\"RecommendationId\": r_id};",
									"                rds_list.push(dict);",
									"                break;",
									"            case EC_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                dict = {\"Service\":service, \"Count\": count,\"CacheNodeType\": instance_type, \"Duration\": \"1\", \"ProductDescription\":info.toLowerCase(),",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                ec_list.push(dict);",
									"                break;",
									"            case RSH_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"NodeType\": instance_type, \"Duration\": 3, ",
									"                \"OfferingType\": \"Partial Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                rsh_list.push(dict);",
									"                break;",
									"            case ES_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"RecommendedInstanceType\": instance_type, \"Duration\": 2, ",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                es_list.push(dict);",
									"                break;",
									"        }",
									"    }  ",
									"}",
									"",
									"pm.environment.set(\"ec2_instances\",ec2_list);",
									"pm.environment.set(\"rds_instances\",rds_list);",
									"pm.environment.set(\"elc_instances\",ec_list);",
									"pm.environment.set(\"red_instances\",rsh_list);",
									"pm.environment.set(\"es_instances\",es_list);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-recommendation/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Purchase One RDS Preview",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let instances = pm.environment.get(\"red_instances\");",
									"let index = Math.floor(Math.random()*instances.length);",
									"pm.environment.set(\"one_instance\", JSON.stringify(instances[index]));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"pm.test(\"Has results\", () => {",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let pre_instance = JSON.parse(pm.environment.get(\"one_instance\"));",
									"",
									"let results = pm.response.json().results;",
									"",
									"pm.test(\"Has Service\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Service\");",
									"});",
									"",
									"let service = results[0].Service;",
									"pm.test(\"Service match request\", () => {",
									"    pm.expect(results[0].Service).to.equal(pre_instance.Service);",
									"});",
									"",
									"pm.test(\"Has Region\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Region\");",
									"});",
									"",
									"pm.test(\"Region match request\", () => {",
									"    if(service == \"ES\"){",
									"        let response_region = pm.collectionVariables.get('region_dict')[results[0].Region];",
									"        pm.expect(response_region).to.equal(pm.environment.get(\"_Region\"));",
									"    }else{",
									"        pm.expect(results[0].Region).to.equal(pre_instance.Region);",
									"    }",
									"});",
									"",
									"pm.test(\"Has Count\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Count\");",
									"});",
									"",
									"pm.test(\"Count match request\", () => {",
									"    pm.expect(results[0].Count).to.equal(parseInt(pre_instance.Count));",
									"});",
									"",
									"pm.test(\"Has Duration\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Duration\");",
									"});",
									"",
									"pm.test(\"Duration match request\", () => {",
									"    //60s * 60 min * 24 hr * 365 days",
									"    let request_duration_in_seconds = pre_instance.Duration * 60 * 60 * 24 * 365;",
									"    pm.expect(results[0].Duration).to.equal(request_duration_in_seconds);",
									"});",
									"",
									"pm.test(\"Check InstanceType\", () => {",
									"    pm.expect(results[0]).to.satisfy((instance) => {",
									"        if (service == \"EC2\") {",
									"            if (instance.InstanceType == undefined) {",
									"                console.log(\"InstanceType undefined\");",
									"                return false;",
									"            }",
									"            if (instance.OfferingClass != pre_instance.OfferingClass) {",
									"                console.log(\"Offering Class Mismatch\");",
									"                return false;",
									"            }",
									"            return (instance.InstanceType == pre_instance.InstanceType);",
									"        } else if (service == \"RDS\") {",
									"            if (instance.DBInstanceClass == undefined || instance.MultiAZ == undefined) {",
									"                console.log(\"DBInstanceClass or MultiAZ undefined\");",
									"                return false;",
									"            }",
									"            if (instance.DBInstanceClass != pre_instance.DBInstanceClass) {",
									"                console.log(\"InstanceType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        } else if (service == \"ElastiCache\") {",
									"            if (instance.CacheNodeType != pre_instance.CacheNodeType) {",
									"                console.log(\"CacheNodeType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        }else if( service == \"Redshift\"){",
									"            if (instance.NodeType != pre_instance.NodeType) {",
									"                console.log(\"NodeType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        }else {",
									"            if(service != \"ES\"){",
									"                console.log(\"Wrong Service Name\");",
									"                return false;",
									"            }",
									"            if (instance.ElasticsearchInstanceType != pre_instance.RecommendedInstanceType) {",
									"                console.log(\"ElasticsearchInstanceType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        }",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Has OfferingType\", () => {",
									"    pm.expect(results[0]).to.have.property(\"OfferingType\");",
									"});",
									"",
									"pm.test(\"OfferingType match request\", () => {",
									"    pm.expect(results[0].OfferingType).to.equal(pre_instance.OfferingType);",
									"});",
									"",
									"pm.test(\"ProductDescription match request\", () => {",
									"    pm.expect(results[0].ProductDescription).to.equal(pre_instance.ProductDescription);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\": \n   [{{one_instance}}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!!Purchase One",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let pre_instance = JSON.parse(pm.environment.get(\"one_instance\"));",
									"",
									"let results = pm.response.json().results;",
									"",
									"pm.test(\"Has Service\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Service\");",
									"});",
									"",
									"pm.test(\"Service match request\", () => {",
									"    pm.expect(results[0].Service).to.equal(pre_instance.Service);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": false,\n  \"Instances\":\n  [{{one_instance}}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation Cleared",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"// pm.test(\"Bought service goes away\",()=>{",
									"//     let result = pm.response.json().results.grand_result;",
									"//     let bought_index = pm.environment.get(\"bought_index\");",
									"//     pm.expect(result[bought_index].RecommendationDetails.length).to.equal(0);",
									"    ",
									"// });",
									"pm.test(\"Bought service goes away\",()=>{",
									"    pm.expect( pm.response.json().results.grand_result).to.satisfy((result)=>{",
									"        for(let i =0; i< result.length;i++){",
									"            if(result[i].RecommendationDetails === undefined){",
									"                continue;",
									"            }",
									"            let total = parseInt(result[i].Summary.TotalRecommendations);",
									"            if (result[i].RecommendationDetails.length == total-1){",
									"                return true;",
									"            }",
									"        }",
									"        return false;",
									"    })",
									"});",
									"//     let result = pm.response.json().results.grand_result;",
									"//     let bought_index = pm.environment.get(\"bought_index\");",
									"//     pm.expect(result[bought_index].RecommendationDetails.length).to.equal(0);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-purchase-recommendation/?cloud_account_id={{cloud_account_id}}&period=SEVEN_DAYS",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-purchase-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								},
								{
									"key": "period",
									"value": "SEVEN_DAYS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "View Purchases Made",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.environment.set(\"purchase_id\", pm.response.json()[0].id) ;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/?caid={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear Purchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/{{purchase_id}}/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								"{{purchase_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "One ElastiCache",
			"item": [
				{
					"name": "Recommendation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const EC2_ORDER = 0;",
									"const RDS_ORDER = 1;",
									"//ELASTICACHE",
									"const EC_ORDER = 2;",
									"//REDSHIFT ",
									"const RSH_ORDER = 3;",
									"//ELASTISEARCH",
									"const ES_ORDER = 4;",
									"",
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"In Order\",()=>{",
									"    let results = pm.response.json().results.grand_result;",
									"    //no d",
									"    for(let i = 0; i<results.length-1;i++){",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon Elastic Compute Cloud - Compute\");",
									"                break;",
									"",
									"            case RDS_ORDER:",
									"              pm.expect(results[i].Service).to.equal(\"Amazon Relational Database Service\");",
									"                break;",
									"            case EC_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon ElastiCache\");",
									"                break;",
									"            case RSH_ORDER:",
									"               pm.expect(results[i].Service).to.equal(\"Amazon Redshift\");",
									"                break;",
									"                //when the mismatch is fixed, currently no Service key",
									"            // case ES_ORDER:",
									"            //   pm.expect(results[i].Service).to.equal(\"Amazon Elasticsearch Service\");",
									"            //     break;",
									"        }",
									"    }",
									"",
									"})",
									"",
									"//Set up input for preview",
									"",
									"let ec2_list = [];",
									"let rds_list = [];",
									"let ec_list = [];",
									"let rsh_list = [];",
									"let es_list = [];",
									"let result_list = pm.response.json().results.grand_result;",
									"let r_id, raw_service, service, instances;",
									"for (let i = 0; i<result_list.length; i++){",
									"    //RecommendationId",
									"    r_id = result_list[i].RecommendationId;",
									"    raw_service = result_list[i].Service;",
									"    service = pm.environment.get(\"service_dict\")[raw_service];",
									"    if( r_id == undefined){",
									"        continue;",
									"    }",
									"    instances = result_list[i].RecommendationDetails;",
									"    let curr_instance, region, instance_type, count;",
									"    for(let j = 0; j<instances.length; j++){",
									"        curr_instance = instances[j];",
									"        region = curr_instance.Region;",
									"        instance_type = curr_instance.RecommendedInstanceType;",
									"        count = curr_instance.RecommendedNumberOfInstances;",
									"        let info, dict;",
									"       ",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                info = curr_instance.Platform;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3, \"InstanceType\":instance_type, ",
									"                \"OfferingClass\": \"standard\", \"OfferingType\": \"All Upfront\",\"ProductDescription\":info , ",
									"                \"Region\":region,\"RecommendationId\":r_id};",
									"                ec2_list.push(dict);",
									"                break;",
									"            case RDS_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                multiAZ = curr_instance.MultiAZ;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3,\"DBInstanceClass\": instance_type,",
									"                \"OfferingType\": \"All Upfront\",\"ProductDescription\":info,",
									"                 \"MultiAZ\": multiAZ, \"Region\": region,\"RecommendationId\": r_id};",
									"                rds_list.push(dict);",
									"                break;",
									"            case EC_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                dict = {\"Service\":service, \"Count\": count,\"CacheNodeType\": instance_type, \"Duration\": \"1\", \"ProductDescription\":info.toLowerCase(),",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                ec_list.push(dict);",
									"                break;",
									"            case RSH_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"NodeType\": instance_type, \"Duration\": 3, ",
									"                \"OfferingType\": \"Partial Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                rsh_list.push(dict);",
									"                break;",
									"            case ES_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"RecommendedInstanceType\": instance_type, \"Duration\": 2, ",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                es_list.push(dict);",
									"                break;",
									"        }",
									"    }  ",
									"}",
									"",
									"pm.environment.set(\"ec2_instances\",ec2_list);",
									"pm.environment.set(\"rds_instances\",rds_list);",
									"pm.environment.set(\"elc_instances\",ec_list);",
									"pm.environment.set(\"red_instances\",rsh_list);",
									"pm.environment.set(\"es_instances\",es_list);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-recommendation/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Purchase One ElastiCache Preview",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let instances = pm.environment.get(\"elc_instances\");",
									"let index = Math.floor(Math.random()*instances.length);",
									"pm.environment.set(\"one_instance\", JSON.stringify(instances[index]));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"pm.test(\"Has results\", () => {",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let pre_instance = JSON.parse(pm.environment.get(\"one_instance\"));",
									"",
									"let results = pm.response.json().results;",
									"",
									"pm.test(\"Has Service\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Service\");",
									"});",
									"",
									"let service = results[0].Service;",
									"pm.test(\"Service match request\", () => {",
									"    pm.expect(results[0].Service).to.equal(pre_instance.Service);",
									"});",
									"",
									"pm.test(\"Has Region\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Region\");",
									"});",
									"",
									"pm.test(\"Region match request\", () => {",
									"    if(service == \"ES\"){",
									"        let response_region = pm.collectionVariables.get('region_dict')[results[0].Region];",
									"        pm.expect(response_region).to.equal(pm.environment.get(\"_Region\"));",
									"    }else{",
									"        pm.expect(results[0].Region).to.equal(pre_instance.Region);",
									"    }",
									"});",
									"",
									"pm.test(\"Has Count\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Count\");",
									"});",
									"",
									"pm.test(\"Count match request\", () => {",
									"    pm.expect(results[0].Count).to.equal(parseInt(pre_instance.Count));",
									"});",
									"",
									"pm.test(\"Has Duration\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Duration\");",
									"});",
									"",
									"pm.test(\"Duration match request\", () => {",
									"    //60s * 60 min * 24 hr * 365 days",
									"    let request_duration_in_seconds = pre_instance.Duration * 60 * 60 * 24 * 365;",
									"    pm.expect(results[0].Duration).to.equal(request_duration_in_seconds);",
									"});",
									"",
									"pm.test(\"Check InstanceType\", () => {",
									"    pm.expect(results[0]).to.satisfy((instance) => {",
									"        if (service == \"EC2\") {",
									"            if (instance.InstanceType == undefined) {",
									"                console.log(\"InstanceType undefined\");",
									"                return false;",
									"            }",
									"            if (instance.OfferingClass != pre_instance.OfferingClass) {",
									"                console.log(\"Offering Class Mismatch\");",
									"                return false;",
									"            }",
									"            return (instance.InstanceType == pre_instance.InstanceType);",
									"        } else if (service == \"RDS\") {",
									"            if (instance.DBInstanceClass == undefined || instance.MultiAZ == undefined) {",
									"                console.log(\"DBInstanceClass or MultiAZ undefined\");",
									"                return false;",
									"            }",
									"            if (instance.DBInstanceClass != pre_instance.DBInstanceClass) {",
									"                console.log(\"InstanceType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        } else if (service == \"ElastiCache\") {",
									"            if (instance.CacheNodeType != pre_instance.CacheNodeType) {",
									"                console.log(\"CacheNodeType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        }else if( service == \"Redshift\"){",
									"            if (instance.NodeType != pre_instance.NodeType) {",
									"                console.log(\"NodeType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        }else {",
									"            if(service != \"ES\"){",
									"                console.log(\"Wrong Service Name\");",
									"                return false;",
									"            }",
									"            if (instance.ElasticsearchInstanceType != pre_instance.RecommendedInstanceType) {",
									"                console.log(\"ElasticsearchInstanceType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Has OfferingType\", () => {",
									"    pm.expect(results[0]).to.have.property(\"OfferingType\");",
									"});",
									"",
									"pm.test(\"OfferingType match request\", () => {",
									"    pm.expect(results[0].OfferingType).to.equal(pre_instance.OfferingType);",
									"});",
									"",
									"pm.test(\"Has ProductDescription\", () => {",
									"    pm.expect(results[0]).to.have.property(\"ProductDescription\");",
									"});",
									"",
									"pm.test(\"ProductDescription match request\", () => {",
									"    pm.expect(results[0].ProductDescription).to.equal(pre_instance.ProductDescription);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\": \n   [{{one_instance}}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!!Purchase One",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let pre_instance = JSON.parse(pm.environment.get(\"one_instance\"));",
									"",
									"let results = pm.response.json().results;",
									"",
									"pm.test(\"Has Service\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Service\");",
									"});",
									"",
									"let service = results[0].Service;",
									"pm.test(\"Service match request\", () => {",
									"    pm.expect(results[0].Service).to.equal(pre_instance.Service);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": false,\n  \"Instances\":\n  [{{one_instance}}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation Cleared",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"// pm.test(\"Bought service goes away\",()=>{",
									"//     let result = pm.response.json().results.grand_result;",
									"//     let bought_index = pm.environment.get(\"bought_index\");",
									"//     pm.expect(result[bought_index].RecommendationDetails.length).to.equal(0);",
									"    ",
									"// });",
									"pm.test(\"Bought service goes away\",()=>{",
									"    pm.expect( pm.response.json().results.grand_result).to.satisfy((result)=>{",
									"        for(let i =0; i< result.length;i++){",
									"            if(result[i].RecommendationDetails === undefined){",
									"                continue;",
									"            }",
									"            let total = parseInt(result[i].Summary.TotalRecommendations);",
									"            if (result[i].RecommendationDetails.length == total-1){",
									"                return true;",
									"            }",
									"        }",
									"        return false;",
									"    })",
									"});",
									"//     let result = pm.response.json().results.grand_result;",
									"//     let bought_index = pm.environment.get(\"bought_index\");",
									"//     pm.expect(result[bought_index].RecommendationDetails.length).to.equal(0);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-purchase-recommendation/?cloud_account_id={{cloud_account_id}}&period=SEVEN_DAYS",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-purchase-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								},
								{
									"key": "period",
									"value": "SEVEN_DAYS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "View Purchases Made",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.environment.set(\"purchase_id\", pm.response.json()[0].id) ;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/?caid={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear Purchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/{{purchase_id}}/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								"{{purchase_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "One Redshift",
			"item": [
				{
					"name": "Services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"service_types_dict\", pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const EC2_ORDER = 0;",
									"const RDS_ORDER = 1;",
									"//ELASTICACHE",
									"const EC_ORDER = 2;",
									"//REDSHIFT ",
									"const RSH_ORDER = 3;",
									"//ELASTISEARCH",
									"const ES_ORDER = 4;",
									"",
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"In Order\",()=>{",
									"    let results = pm.response.json().results.grand_result;",
									"    //no d",
									"    for(let i = 0; i<results.length-1;i++){",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon Elastic Compute Cloud - Compute\");",
									"                break;",
									"",
									"            case RDS_ORDER:",
									"              pm.expect(results[i].Service).to.equal(\"Amazon Relational Database Service\");",
									"                break;",
									"            case EC_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon ElastiCache\");",
									"                break;",
									"            case RSH_ORDER:",
									"               pm.expect(results[i].Service).to.equal(\"Amazon Redshift\");",
									"                break;",
									"                //when the mismatch is fixed, currently no Service key",
									"            // case ES_ORDER:",
									"            //   pm.expect(results[i].Service).to.equal(\"Amazon Elasticsearch Service\");",
									"            //     break;",
									"        }",
									"    }",
									"",
									"})",
									"",
									"//Set up input for preview",
									"",
									"let ec2_list = [];",
									"let rds_list = [];",
									"let ec_list = [];",
									"let rsh_list = [];",
									"let es_list = [];",
									"let result_list = pm.response.json().results.grand_result;",
									"let r_id, raw_service, service, instances;",
									"for (let i = 0; i<result_list.length; i++){",
									"    //RecommendationId",
									"    r_id = result_list[i].RecommendationId;",
									"    raw_service = result_list[i].Service;",
									"    service = pm.environment.get(\"service_dict\")[raw_service];",
									"    if( r_id == undefined){",
									"        continue;",
									"    }",
									"    instances = result_list[i].RecommendationDetails;",
									"    let curr_instance, region, instance_type, count;",
									"    for(let j = 0; j<instances.length; j++){",
									"        curr_instance = instances[j];",
									"        region = curr_instance.Region;",
									"        instance_type = curr_instance.RecommendedInstanceType;",
									"        count = curr_instance.RecommendedNumberOfInstances;",
									"        let info, dict;",
									"       ",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                info = curr_instance.Platform;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3, \"InstanceType\":instance_type, ",
									"                \"OfferingClass\": \"standard\", \"OfferingType\": \"All Upfront\",\"ProductDescription\":info , ",
									"                \"Region\":region,\"RecommendationId\":r_id};",
									"                ec2_list.push(dict);",
									"                break;",
									"            case RDS_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                multiAZ = curr_instance.MultiAZ;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3,\"DBInstanceClass\": instance_type,",
									"                \"OfferingType\": \"All Upfront\",\"ProductDescription\":info,",
									"                 \"MultiAZ\": multiAZ, \"Region\": region,\"RecommendationId\": r_id};",
									"                rds_list.push(dict);",
									"                break;",
									"            case EC_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                dict = {\"Service\":service, \"Count\": count,\"CacheNodeType\": instance_type, \"Duration\": \"1\", \"ProductDescription\":info.toLowerCase(),",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                ec_list.push(dict);",
									"                break;",
									"            case RSH_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"NodeType\": instance_type, \"Duration\": 3, ",
									"                \"OfferingType\": \"Partial Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                rsh_list.push(dict);",
									"                break;",
									"            case ES_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"RecommendedInstanceType\": instance_type, \"Duration\": 2, ",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                es_list.push(dict);",
									"                break;",
									"        }",
									"    }  ",
									"}",
									"",
									"pm.environment.set(\"ec2_instances\",ec2_list);",
									"pm.environment.set(\"rds_instances\",rds_list);",
									"pm.environment.set(\"elc_instances\",ec_list);",
									"pm.environment.set(\"red_instances\",rsh_list);",
									"pm.environment.set(\"es_instances\",es_list);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-recommendation/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Purchase One Redshift Preview",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let instances = pm.environment.get(\"red_instances\");",
									"let index = Math.floor(Math.random()*instances.length);",
									"pm.environment.set(\"one_instance\", JSON.stringify(instances[index]));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"pm.test(\"Has results\", () => {",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let pre_instance = JSON.parse(pm.environment.get(\"one_instance\"));",
									"",
									"let results = pm.response.json().results;",
									"",
									"pm.test(\"Has Service\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Service\");",
									"});",
									"",
									"let service = results[0].Service;",
									"pm.test(\"Service match request\", () => {",
									"    pm.expect(results[0].Service).to.equal(pre_instance.Service);",
									"});",
									"",
									"pm.test(\"Has Region\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Region\");",
									"});",
									"",
									"pm.test(\"Region match request\", () => {",
									"    if(service == \"ES\"){",
									"        let response_region = pm.collectionVariables.get('region_dict')[results[0].Region];",
									"        pm.expect(response_region).to.equal(pm.environment.get(\"_Region\"));",
									"    }else{",
									"        pm.expect(results[0].Region).to.equal(pre_instance.Region);",
									"    }",
									"});",
									"",
									"pm.test(\"Has Count\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Count\");",
									"});",
									"",
									"pm.test(\"Count match request\", () => {",
									"    pm.expect(results[0].Count).to.equal(parseInt(pre_instance.Count));",
									"});",
									"",
									"pm.test(\"Has Duration\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Duration\");",
									"});",
									"",
									"pm.test(\"Duration match request\", () => {",
									"    //60s * 60 min * 24 hr * 365 days",
									"    let request_duration_in_seconds = pre_instance.Duration * 60 * 60 * 24 * 365;",
									"    pm.expect(results[0].Duration).to.equal(request_duration_in_seconds);",
									"});",
									"",
									"pm.test(\"Check InstanceType\", () => {",
									"    pm.expect(results[0]).to.satisfy((instance) => {",
									"        if (service == \"EC2\") {",
									"            if (instance.InstanceType == undefined) {",
									"                console.log(\"InstanceType undefined\");",
									"                return false;",
									"            }",
									"            if (instance.OfferingClass != pre_instance.OfferingClass) {",
									"                console.log(\"Offering Class Mismatch\");",
									"                return false;",
									"            }",
									"            return (instance.InstanceType == pre_instance.InstanceType);",
									"        } else if (service == \"RDS\") {",
									"            if (instance.DBInstanceClass == undefined || instance.MultiAZ == undefined) {",
									"                console.log(\"DBInstanceClass or MultiAZ undefined\");",
									"                return false;",
									"            }",
									"            if (instance.DBInstanceClass != pre_instance.DBInstanceClass) {",
									"                console.log(\"InstanceType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        } else if (service == \"ElastiCache\") {",
									"            if (instance.CacheNodeType != pre_instance.CacheNodeType) {",
									"                console.log(\"CacheNodeType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        }else if( service == \"Redshift\"){",
									"            if (instance.NodeType != pre_instance.NodeType) {",
									"                console.log(\"NodeType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        }else {",
									"            if(service != \"ES\"){",
									"                console.log(\"Wrong Service Name\");",
									"                return false;",
									"            }",
									"            if (instance.ElasticsearchInstanceType != pre_instance.RecommendedInstanceType) {",
									"                console.log(\"ElasticsearchInstanceType Mismatch\");",
									"                return false;",
									"            }",
									"            return true; ",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Has OfferingType\", () => {",
									"    pm.expect(results[0]).to.have.property(\"OfferingType\");",
									"});",
									"",
									"pm.test(\"OfferingType match request\", () => {",
									"    pm.expect(results[0].OfferingType).to.equal(pre_instance.OfferingType);",
									"});",
									"",
									"pm.test(\"ProductDescription match request\", () => {",
									"    pm.expect(results[0].ProductDescription).to.equal(pre_instance.ProductDescription);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\": \n   [{{one_instance}}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!!Purchase One",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let pre_instance = JSON.parse(pm.environment.get(\"one_instance\"));",
									"",
									"let results = pm.response.json().results;",
									"",
									"pm.test(\"Has Service\", () => {",
									"    pm.expect(results[0]).to.have.property(\"Service\");",
									"});",
									"",
									"pm.test(\"Service match request\", () => {",
									"    pm.expect(results[0].Service).to.equal(pre_instance.Service);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": false,\n  \"Instances\":\n  [{{one_instance}}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation Cleared",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"// pm.test(\"Bought service goes away\",()=>{",
									"//     let result = pm.response.json().results.grand_result;",
									"//     let bought_index = pm.environment.get(\"bought_index\");",
									"//     pm.expect(result[bought_index].RecommendationDetails.length).to.equal(0);",
									"    ",
									"// });",
									"pm.test(\"Bought service goes away\",()=>{",
									"    pm.expect( pm.response.json().results.grand_result).to.satisfy((result)=>{",
									"        for(let i =0; i< result.length;i++){",
									"            if(result[i].RecommendationDetails === undefined){",
									"                continue;",
									"            }",
									"            let total = parseInt(result[i].Summary.TotalRecommendations);",
									"            if (result[i].RecommendationDetails.length == total-1){",
									"                return true;",
									"            }",
									"        }",
									"        return false;",
									"    })",
									"});",
									"//     let result = pm.response.json().results.grand_result;",
									"//     let bought_index = pm.environment.get(\"bought_index\");",
									"//     pm.expect(result[bought_index].RecommendationDetails.length).to.equal(0);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-purchase-recommendation/?cloud_account_id={{cloud_account_id}}&period=SEVEN_DAYS",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-purchase-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								},
								{
									"key": "period",
									"value": "SEVEN_DAYS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "View Purchases Made",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.environment.set(\"purchase_id\", pm.response.json()[0].id) ;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/?caid={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear Purchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/{{purchase_id}}/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								"{{purchase_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "All EC2",
			"item": [
				{
					"name": "Services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"service_types_dict\", pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const EC2_ORDER = 0;",
									"const RDS_ORDER = 1;",
									"//ELASTICACHE",
									"const EC_ORDER = 2;",
									"//REDSHIFT ",
									"const RSH_ORDER = 3;",
									"//ELASTISEARCH",
									"const ES_ORDER = 4;",
									"",
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"In Order\",()=>{",
									"    let results = pm.response.json().results.grand_result;",
									"    //no d",
									"    for(let i = 0; i<results.length-1;i++){",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon Elastic Compute Cloud - Compute\");",
									"                break;",
									"",
									"            case RDS_ORDER:",
									"              pm.expect(results[i].Service).to.equal(\"Amazon Relational Database Service\");",
									"                break;",
									"            case EC_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon ElastiCache\");",
									"                break;",
									"            case RSH_ORDER:",
									"               pm.expect(results[i].Service).to.equal(\"Amazon Redshift\");",
									"                break;",
									"                //when the mismatch is fixed, currently no Service key",
									"            // case ES_ORDER:",
									"            //   pm.expect(results[i].Service).to.equal(\"Amazon Elasticsearch Service\");",
									"            //     break;",
									"        }",
									"    }",
									"",
									"})",
									"",
									"//Set up input for preview",
									"",
									"let ec2_list = [];",
									"let rds_list = [];",
									"let ec_list = [];",
									"let rsh_list = [];",
									"let es_list = [];",
									"let result_list = pm.response.json().results.grand_result;",
									"let r_id, raw_service, service, instances;",
									"for (let i = 0; i<result_list.length; i++){",
									"    //RecommendationId",
									"    r_id = result_list[i].RecommendationId;",
									"    raw_service = result_list[i].Service;",
									"    service = pm.environment.get(\"service_dict\")[raw_service];",
									"    if( r_id == undefined){",
									"        continue;",
									"    }",
									"    instances = result_list[i].RecommendationDetails;",
									"    let curr_instance, region, instance_type, count;",
									"    for(let j = 0; j<instances.length; j++){",
									"        curr_instance = instances[j];",
									"        region = curr_instance.Region;",
									"        instance_type = curr_instance.RecommendedInstanceType;",
									"        count = curr_instance.RecommendedNumberOfInstances;",
									"        let info, dict;",
									"       ",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                info = curr_instance.Platform;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3, \"InstanceType\":instance_type, ",
									"                \"OfferingClass\": \"standard\", \"OfferingType\": \"All Upfront\",\"ProductDescription\":info , ",
									"                \"Region\":region,\"RecommendationId\":r_id};",
									"                ec2_list.push(dict);",
									"                break;",
									"            case RDS_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                multiAZ = curr_instance.MultiAZ;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3,\"DBInstanceClass\": instance_type,",
									"                \"OfferingType\": \"All Upfront\",\"ProductDescription\":info,",
									"                 \"MultiAZ\": multiAZ, \"Region\": region,\"RecommendationId\": r_id};",
									"                rds_list.push(dict);",
									"                break;",
									"            case EC_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                dict = {\"Service\":service, \"Count\": count,\"CacheNodeType\": instance_type, \"Duration\": \"1\", \"ProductDescription\":info.toLowerCase(),",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                ec_list.push(dict);",
									"                break;",
									"            case RSH_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"NodeType\": instance_type, \"Duration\": 3, ",
									"                \"OfferingType\": \"Partial Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                rsh_list.push(dict);",
									"                break;",
									"            case ES_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"RecommendedInstanceType\": instance_type, \"Duration\": 2, ",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                es_list.push(dict);",
									"                break;",
									"        }",
									"    }  ",
									"}",
									"pm.environment.set(\"bought_index\", EC2_ORDER);",
									"pm.environment.set(\"est_annual_total\", result_list[EC2_ORDER].Summary.EstimatedAnnualSavings);",
									"pm.environment.set(\"ec2_instances\",ec2_list);",
									"pm.environment.set(\"rds_instances\",rds_list);",
									"pm.environment.set(\"elc_instances\",ec_list);",
									"pm.environment.set(\"red_instances\",rsh_list);",
									"pm.environment.set(\"es_instances\",es_list);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-recommendation/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Purchase EC2 All Preview",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let instances = pm.environment.get(\"ec2_instances\");",
									"pm.environment.set(\"instance_list\", JSON.stringify(instances));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let results = pm.response.json().results;",
									"let request_list = JSON.parse(pm.environment.get(\"instance_list\"));",
									"pm.test(\"Same Amount of instances\",()=>{",
									"    pm.expect(results.length).to.equal(request_list.length);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\": \n   {{instance_list}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!!Purchase All",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let results = pm.response.json().results;",
									"let request_list = pm.environment.get(\"instance_list\");",
									"pm.test(\"Same Amount of instances\",()=>{",
									"    let request_list = JSON.parse(pm.environment.get(\"instance_list\"));",
									"    pm.expect(results.length).to.equal(request_list.length);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": false,\n  \"Instances\":\n  {{instance_list}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Billings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"//buying as recommended so must be 3 years",
									"pm.test(\"Savings equal recommended est annual * 3 years\",()=>{",
									"    let est_yearly = pm.environment.get(\"est_annual_total\");",
									"    let savings = parseFloat(pm.response.json().results[0].Savings);",
									"    pm.expect(savings).to.be.closeTo(est_yearly *3, 1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_user}}/bills/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"bills",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation Cleared",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"Bought service goes away\",()=>{",
									"    let result = pm.response.json().results.grand_result;",
									"    let bought_index = pm.environment.get(\"bought_index\");",
									"    pm.expect(result[bought_index].RecommendationDetails.length).to.equal(0);",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-purchase-recommendation/?cloud_account_id={{cloud_account_id}}&period=SEVEN_DAYS",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-purchase-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								},
								{
									"key": "period",
									"value": "SEVEN_DAYS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "View Purchases Made",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"let id_list = [];",
									"for (let i = 0; i< pm.response.json().length;i++){",
									"    id_list.push(pm.response.json()[i].id);",
									"}",
									"pm.environment.set(\"purchase_id_list\", id_list) ;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/?caid={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear Purchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let curr_list = pm.environment.get(\"purchase_id_list\");",
									"let curr_id = curr_list.shift();",
									"pm.environment.set(\"purchase_id\", curr_id)",
									"pm.environment.set(\"purchase_id_list\", curr_list);",
									"",
									"if(curr_list.length != 0){",
									"    postman.setNextRequest(\"Clear Purchase\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/{{purchase_id}}/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								"{{purchase_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "All RDS",
			"item": [
				{
					"name": "Services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"service_types_dict\", pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const EC2_ORDER = 0;",
									"const RDS_ORDER = 1;",
									"//ELASTICACHE",
									"const EC_ORDER = 2;",
									"//REDSHIFT ",
									"const RSH_ORDER = 3;",
									"//ELASTISEARCH",
									"const ES_ORDER = 4;",
									"",
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"In Order\",()=>{",
									"    let results = pm.response.json().results.grand_result;",
									"    //no d",
									"    for(let i = 0; i<results.length-1;i++){",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon Elastic Compute Cloud - Compute\");",
									"                break;",
									"",
									"            case RDS_ORDER:",
									"              pm.expect(results[i].Service).to.equal(\"Amazon Relational Database Service\");",
									"                break;",
									"            case EC_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon ElastiCache\");",
									"                break;",
									"            case RSH_ORDER:",
									"               pm.expect(results[i].Service).to.equal(\"Amazon Redshift\");",
									"                break;",
									"                //when the mismatch is fixed, currently no Service key",
									"            // case ES_ORDER:",
									"            //   pm.expect(results[i].Service).to.equal(\"Amazon Elasticsearch Service\");",
									"            //     break;",
									"        }",
									"    }",
									"",
									"})",
									"",
									"//Set up input for preview",
									"",
									"let ec2_list = [];",
									"let rds_list = [];",
									"let ec_list = [];",
									"let rsh_list = [];",
									"let es_list = [];",
									"let result_list = pm.response.json().results.grand_result;",
									"let r_id, raw_service, service, instances;",
									"for (let i = 0; i<result_list.length; i++){",
									"    //RecommendationId",
									"    r_id = result_list[i].RecommendationId;",
									"    raw_service = result_list[i].Service;",
									"    service = pm.environment.get(\"service_dict\")[raw_service];",
									"    if( r_id == undefined){",
									"        continue;",
									"    }",
									"    instances = result_list[i].RecommendationDetails;",
									"    let curr_instance, region, instance_type, count;",
									"    for(let j = 0; j<instances.length; j++){",
									"        curr_instance = instances[j];",
									"        region = curr_instance.Region;",
									"        instance_type = curr_instance.RecommendedInstanceType;",
									"        count = curr_instance.RecommendedNumberOfInstances;",
									"        let info, dict;",
									"       ",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                info = curr_instance.Platform;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3, \"InstanceType\":instance_type, ",
									"                \"OfferingClass\": \"standard\", \"OfferingType\": \"All Upfront\",\"ProductDescription\":info , ",
									"                \"Region\":region,\"RecommendationId\":r_id};",
									"                ec2_list.push(dict);",
									"                break;",
									"            case RDS_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                multiAZ = curr_instance.MultiAZ;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3,\"DBInstanceClass\": instance_type,",
									"                \"OfferingType\": \"All Upfront\",\"ProductDescription\":info,",
									"                 \"MultiAZ\": multiAZ, \"Region\": region,\"RecommendationId\": r_id};",
									"                rds_list.push(dict);",
									"                break;",
									"            case EC_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                dict = {\"Service\":service, \"Count\": count,\"CacheNodeType\": instance_type, \"Duration\": \"1\", \"ProductDescription\":info.toLowerCase(),",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                ec_list.push(dict);",
									"                break;",
									"            case RSH_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"NodeType\": instance_type, \"Duration\": 3, ",
									"                \"OfferingType\": \"Partial Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                rsh_list.push(dict);",
									"                break;",
									"            case ES_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"RecommendedInstanceType\": instance_type, \"Duration\": 2, ",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                es_list.push(dict);",
									"                break;",
									"        }",
									"    }  ",
									"}",
									"",
									"pm.environment.set(\"ec2_instances\",ec2_list);",
									"pm.environment.set(\"rds_instances\",rds_list);",
									"pm.environment.set(\"bought_index\", RDS_ORDER);",
									"pm.environment.set(\"est_annual_total\", result_list[RDS_ORDER].Summary.EstimatedAnnualSavings);",
									"pm.environment.set(\"elc_instances\",ec_list);",
									"pm.environment.set(\"red_instances\",rsh_list);",
									"pm.environment.set(\"es_instances\",es_list);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-recommendation/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Purchase RDS All Preview",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let instances = pm.environment.get(\"rds_instances\");",
									"pm.environment.set(\"instance_list\", JSON.stringify(instances));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let results = pm.response.json().results;",
									"let request_list = JSON.parse(pm.environment.get(\"instance_list\"));",
									"pm.test(\"Same Amount of instances\",()=>{",
									"    pm.expect(results.length).to.equal(request_list.length);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\": \n   {{instance_list}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!!Purchase All",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let results = pm.response.json().results;",
									"let request_list = pm.environment.get(\"instance_list\");",
									"pm.test(\"Same Amount of instances\",()=>{",
									"    let request_list = JSON.parse(pm.environment.get(\"instance_list\"));",
									"    pm.expect(results.length).to.equal(request_list.length);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": false,\n  \"Instances\":\n  {{instance_list}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Billings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"//buying as recommended so must be 3 years",
									"pm.test(\"Savings equal recommended est annual * 3 years\",()=>{",
									"    let est_yearly = pm.environment.get(\"est_annual_total\");",
									"    let savings = parseFloat(pm.response.json().results[0].Savings);",
									"    pm.expect(savings).to.be.closeTo(est_yearly *3, 1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_user}}/bills/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"bills",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation Cleared",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"Bought service goes away\",()=>{",
									"    let result = pm.response.json().results.grand_result;",
									"    let bought_index = pm.environment.get(\"bought_index\");",
									"    pm.expect(result[bought_index].RecommendationDetails.length).to.equal(0);",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-purchase-recommendation/?cloud_account_id={{cloud_account_id}}&period=SEVEN_DAYS",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-purchase-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								},
								{
									"key": "period",
									"value": "SEVEN_DAYS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "View Purchases Made",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"let id_list = [];",
									"for (let i = 0; i< pm.response.json().length;i++){",
									"    id_list.push(pm.response.json()[i].id);",
									"}",
									"pm.environment.set(\"purchase_id_list\", id_list) ;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/?caid={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear Purchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let curr_list = pm.environment.get(\"purchase_id_list\");",
									"let curr_id = curr_list.shift();",
									"pm.environment.set(\"purchase_id\", curr_id)",
									"pm.environment.set(\"purchase_id_list\", curr_list);",
									"",
									"if(curr_list.length != 0){",
									"    postman.setNextRequest(\"Clear Purchase\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/{{purchase_id}}/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								"{{purchase_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "All ElastiCache",
			"item": [
				{
					"name": "Services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"service_types_dict\", pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const EC2_ORDER = 0;",
									"const RDS_ORDER = 1;",
									"//ELASTICACHE",
									"const EC_ORDER = 2;",
									"//REDSHIFT ",
									"const RSH_ORDER = 3;",
									"//ELASTISEARCH",
									"const ES_ORDER = 4;",
									"",
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"In Order\",()=>{",
									"    let results = pm.response.json().results.grand_result;",
									"    //no d",
									"    for(let i = 0; i<results.length-1;i++){",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon Elastic Compute Cloud - Compute\");",
									"                break;",
									"",
									"            case RDS_ORDER:",
									"              pm.expect(results[i].Service).to.equal(\"Amazon Relational Database Service\");",
									"                break;",
									"            case EC_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon ElastiCache\");",
									"                break;",
									"            case RSH_ORDER:",
									"               pm.expect(results[i].Service).to.equal(\"Amazon Redshift\");",
									"                break;",
									"                //when the mismatch is fixed, currently no Service key",
									"            // case ES_ORDER:",
									"            //   pm.expect(results[i].Service).to.equal(\"Amazon Elasticsearch Service\");",
									"            //     break;",
									"        }",
									"    }",
									"",
									"})",
									"",
									"//Set up input for preview",
									"",
									"let ec2_list = [];",
									"let rds_list = [];",
									"let ec_list = [];",
									"let rsh_list = [];",
									"let es_list = [];",
									"let result_list = pm.response.json().results.grand_result;",
									"let r_id, raw_service, service, instances;",
									"for (let i = 0; i<result_list.length; i++){",
									"    //RecommendationId",
									"    r_id = result_list[i].RecommendationId;",
									"    raw_service = result_list[i].Service;",
									"    service = pm.environment.get(\"service_dict\")[raw_service];",
									"    if( r_id == undefined){",
									"        continue;",
									"    }",
									"    instances = result_list[i].RecommendationDetails;",
									"    let curr_instance, region, instance_type, count;",
									"    for(let j = 0; j<instances.length; j++){",
									"        curr_instance = instances[j];",
									"        region = curr_instance.Region;",
									"        instance_type = curr_instance.RecommendedInstanceType;",
									"        count = curr_instance.RecommendedNumberOfInstances;",
									"        let info, dict;",
									"       ",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                info = curr_instance.Platform;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3, \"InstanceType\":instance_type, ",
									"                \"OfferingClass\": \"standard\", \"OfferingType\": \"All Upfront\",\"ProductDescription\":info , ",
									"                \"Region\":region,\"RecommendationId\":r_id};",
									"                ec2_list.push(dict);",
									"                break;",
									"            case RDS_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                multiAZ = curr_instance.MultiAZ;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3,\"DBInstanceClass\": instance_type,",
									"                \"OfferingType\": \"All Upfront\",\"ProductDescription\":info,",
									"                 \"MultiAZ\": multiAZ, \"Region\": region,\"RecommendationId\": r_id};",
									"                rds_list.push(dict);",
									"                break;",
									"            case EC_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                dict = {\"Service\":service, \"Count\": count,\"CacheNodeType\": instance_type, \"Duration\": \"1\", \"ProductDescription\":info.toLowerCase(),",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                ec_list.push(dict);",
									"                break;",
									"            case RSH_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"NodeType\": instance_type, \"Duration\": 3, ",
									"                \"OfferingType\": \"Partial Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                rsh_list.push(dict);",
									"                break;",
									"            case ES_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"RecommendedInstanceType\": instance_type, \"Duration\": 2, ",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                es_list.push(dict);",
									"                break;",
									"        }",
									"    }  ",
									"}",
									"",
									"pm.environment.set(\"ec2_instances\",ec2_list);",
									"pm.environment.set(\"rds_instances\",rds_list);",
									"pm.environment.set(\"elc_instances\",ec_list);",
									"pm.environment.set(\"bought_index\", EC_ORDER);",
									"pm.environment.set(\"est_annual_total\", result_list[EC_ORDER].Summary.EstimatedAnnualSavings);",
									"pm.environment.set(\"red_instances\",rsh_list);",
									"pm.environment.set(\"es_instances\",es_list);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-recommendation/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Purchase ElastiCache All Preview Copy 3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let instances = pm.environment.get(\"ec_instances\");",
									"pm.environment.set(\"instance_list\", JSON.stringify(instances));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let results = pm.response.json().results;",
									"let request_list = JSON.parse(pm.environment.get(\"instance_list\"));",
									"pm.test(\"Same Amount of instances\",()=>{",
									"    pm.expect(results.length).to.equal(request_list.length);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\": \n   {{instance_list}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!!Purchase All",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let results = pm.response.json().results;",
									"let request_list = pm.environment.get(\"instance_list\");",
									"pm.test(\"Same Amount of instances\",()=>{",
									"    let request_list = JSON.parse(pm.environment.get(\"instance_list\"));",
									"    pm.expect(results.length).to.equal(request_list.length);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": false,\n  \"Instances\":\n  {{instance_list}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Billings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"//buying as recommended so must be 3 years",
									"pm.test(\"Savings equal recommended est annual * 3 years\",()=>{",
									"    let est_yearly = pm.environment.get(\"est_annual_total\");",
									"    let savings = parseFloat(pm.response.json().results[0].Savings);",
									"    pm.expect(savings).to.be.closeTo(est_yearly *3, 1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_user}}/bills/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"bills",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation Cleared",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"Bought service goes away\",()=>{",
									"    let result = pm.response.json().results.grand_result;",
									"    let bought_index = pm.environment.get(\"bought_index\");",
									"    pm.expect(result[bought_index].RecommendationDetails.length).to.equal(0);",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-purchase-recommendation/?cloud_account_id={{cloud_account_id}}&period=SEVEN_DAYS",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-purchase-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								},
								{
									"key": "period",
									"value": "SEVEN_DAYS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "View Purchases Made",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"let id_list = [];",
									"for (let i = 0; i< pm.response.json().length;i++){",
									"    id_list.push(pm.response.json()[i].id);",
									"}",
									"pm.environment.set(\"purchase_id_list\", id_list) ;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/?caid={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear Purchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let curr_list = pm.environment.get(\"purchase_id_list\");",
									"let curr_id = curr_list.shift();",
									"pm.environment.set(\"purchase_id\", curr_id)",
									"pm.environment.set(\"purchase_id_list\", curr_list);",
									"",
									"if(curr_list.length != 0){",
									"    postman.setNextRequest(\"Clear Purchase\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/{{purchase_id}}/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								"{{purchase_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "All Redshift",
			"item": [
				{
					"name": "Services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"service_types_dict\", pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const EC2_ORDER = 0;",
									"const RDS_ORDER = 1;",
									"//ELASTICACHE",
									"const EC_ORDER = 2;",
									"//REDSHIFT ",
									"const RSH_ORDER = 3;",
									"//ELASTISEARCH",
									"const ES_ORDER = 4;",
									"",
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"In Order\",()=>{",
									"    let results = pm.response.json().results.grand_result;",
									"    //no d",
									"    for(let i = 0; i<results.length-1;i++){",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon Elastic Compute Cloud - Compute\");",
									"                break;",
									"",
									"            case RDS_ORDER:",
									"              pm.expect(results[i].Service).to.equal(\"Amazon Relational Database Service\");",
									"                break;",
									"            case EC_ORDER:",
									"                pm.expect(results[i].Service).to.equal(\"Amazon ElastiCache\");",
									"                break;",
									"            case RSH_ORDER:",
									"               pm.expect(results[i].Service).to.equal(\"Amazon Redshift\");",
									"                break;",
									"                //when the mismatch is fixed, currently no Service key",
									"            // case ES_ORDER:",
									"            //   pm.expect(results[i].Service).to.equal(\"Amazon Elasticsearch Service\");",
									"            //     break;",
									"        }",
									"    }",
									"",
									"})",
									"",
									"//Set up input for preview",
									"",
									"let ec2_list = [];",
									"let rds_list = [];",
									"let ec_list = [];",
									"let rsh_list = [];",
									"let es_list = [];",
									"let result_list = pm.response.json().results.grand_result;",
									"let r_id, raw_service, service, instances;",
									"for (let i = 0; i<result_list.length; i++){",
									"    //RecommendationId",
									"    r_id = result_list[i].RecommendationId;",
									"    raw_service = result_list[i].Service;",
									"    service = pm.environment.get(\"service_dict\")[raw_service];",
									"    if( r_id == undefined){",
									"        continue;",
									"    }",
									"    instances = result_list[i].RecommendationDetails;",
									"    let curr_instance, region, instance_type, count;",
									"    for(let j = 0; j<instances.length; j++){",
									"        curr_instance = instances[j];",
									"        region = curr_instance.Region;",
									"        instance_type = curr_instance.RecommendedInstanceType;",
									"        count = curr_instance.RecommendedNumberOfInstances;",
									"        let info, dict;",
									"       ",
									"        switch(i){",
									"            case EC2_ORDER:",
									"                info = curr_instance.Platform;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3, \"InstanceType\":instance_type, ",
									"                \"OfferingClass\": \"standard\", \"OfferingType\": \"All Upfront\",\"ProductDescription\":info , ",
									"                \"Region\":region,\"RecommendationId\":r_id};",
									"                ec2_list.push(dict);",
									"                break;",
									"            case RDS_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                multiAZ = curr_instance.MultiAZ;",
									"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3,\"DBInstanceClass\": instance_type,",
									"                \"OfferingType\": \"All Upfront\",\"ProductDescription\":info,",
									"                 \"MultiAZ\": multiAZ, \"Region\": region,\"RecommendationId\": r_id};",
									"                rds_list.push(dict);",
									"                break;",
									"            case EC_ORDER:",
									"                info = curr_instance.ProductDescription;",
									"                dict = {\"Service\":service, \"Count\": count,\"CacheNodeType\": instance_type, \"Duration\": \"1\", \"ProductDescription\":info.toLowerCase(),",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                ec_list.push(dict);",
									"                break;",
									"            case RSH_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"NodeType\": instance_type, \"Duration\": 3, ",
									"                \"OfferingType\": \"Partial Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                rsh_list.push(dict);",
									"                break;",
									"            case ES_ORDER:",
									"                dict = {\"Service\":service, \"Count\": count,\"RecommendedInstanceType\": instance_type, \"Duration\": 2, ",
									"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
									"                es_list.push(dict);",
									"                break;",
									"        }",
									"    }  ",
									"}",
									"",
									"pm.environment.set(\"ec2_instances\",ec2_list);",
									"pm.environment.set(\"rds_instances\",rds_list);",
									"pm.environment.set(\"elc_instances\",ec_list);",
									"pm.environment.set(\"red_instances\",rsh_list);",
									"pm.environment.set(\"bought_index\", RSH_ORDER);",
									"pm.environment.set(\"est_annual_total\", result_list[RSH_ORDER].Summary.EstimatedAnnualSavings);",
									"pm.environment.set(\"es_instances\",es_list);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-recommendation/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Purchase Redshift All Preview",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let instances = pm.environment.get(\"rsh_instances\");",
									"pm.environment.set(\"instance_list\", JSON.stringify(instances));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let results = pm.response.json().results;",
									"let request_list = JSON.parse(pm.environment.get(\"instance_list\"));",
									"pm.test(\"Same Amount of instances\",()=>{",
									"    pm.expect(results.length).to.equal(request_list.length);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\": \n   {{instance_list}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "!!Purchase All",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"let results = pm.response.json().results;",
									"let request_list = pm.environment.get(\"instance_list\");",
									"pm.test(\"Same Amount of instances\",()=>{",
									"    let request_list = JSON.parse(pm.environment.get(\"instance_list\"));",
									"    pm.expect(results.length).to.equal(request_list.length);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": false,\n  \"Instances\":\n  {{instance_list}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_aws}}/services/ri-offerings/purchase/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"ri-offerings",
								"purchase",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Billings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"pm.test(\"Has results\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"//buying as recommended so must be 3 years",
									"pm.test(\"Savings equal recommended est annual * 3 years\",()=>{",
									"    let est_yearly = pm.environment.get(\"est_annual_total\");",
									"    let savings = parseFloat(pm.response.json().results[0].Savings);",
									"    pm.expect(savings).to.be.closeTo(est_yearly *3, 1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_user}}/bills/?cloud_account_id={{cloud_account_id}}",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"bills",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Recommendation Cleared",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"Bought service goes away\",()=>{",
									"    let result = pm.response.json().results.grand_result;",
									"    let bought_index = pm.environment.get(\"bought_index\");",
									"    pm.expect(result[bought_index].RecommendationDetails.length).to.equal(0);",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/ce/get-reservation-purchase-recommendation/?cloud_account_id={{cloud_account_id}}&period=SEVEN_DAYS",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"get-reservation-purchase-recommendation",
								""
							],
							"query": [
								{
									"key": "cloud_account_id",
									"value": "{{cloud_account_id}}"
								},
								{
									"key": "period",
									"value": "SEVEN_DAYS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear Purchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let curr_list = pm.environment.get(\"purchase_id_list\");",
									"let curr_id = curr_list.shift();",
									"pm.environment.set(\"purchase_id\", curr_id)",
									"pm.environment.set(\"purchase_id_list\", curr_list);",
									"",
									"if(curr_list.length != 0){",
									"    postman.setNextRequest(\"Clear Purchase\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/{{purchase_id}}/",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								"{{purchase_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "View Purchases Made",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"let id_list = [];",
									"for (let i = 0; i< pm.response.json().length;i++){",
									"    id_list.push(pm.response.json()[i].id);",
									"}",
									"pm.environment.set(\"purchase_id_list\", id_list) ;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_aws}}/services/purchases/?caid={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"services",
								"purchases",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const serviceDict = {",
					"    \"Amazon Elastic Compute Cloud - Compute\":\"EC2\",",
					"    \"Amazon Relational Database Service\":\"RDS\",",
					"    \"Amazon ElastiCache\": \"ElastiCache\" ,",
					"    \"Amazon Redshift\": \"Redshift\" ,",
					"    \"Amazon ElastiSearch\": \"ES\"",
					"};",
					"",
					"pm.environment.set(\"service_dict\", serviceDict);",
					"",
					"",
					"let region_dict ={ // Only needed by ES preview comparison",
					"    'us-east-1': 'US East (N. Virginia)',",
					"    'us-east-2': 'US East (Ohio)',",
					"    'us-west-1': 'US West (N. California)',",
					"    'us-west-2': 'US West (Oregon)',",
					"    'af-south-1': 'Africa (Cape Town)',",
					"    'ap-east-1': 'Asia Pacific (Hong Kong)',",
					"    'ap-south-1': 'Asia Pacific (Mumbai)',",
					"    'ap-northeast-3': 'Asia Pacific (Osaka)',",
					"    'ap-northeast-2': 'Asia Pacific (Seoul)',",
					"    'ap-southeast-1': 'Asia Pacific (Singapore)',",
					"    'ap-southeast-2': 'Asia Pacific (Sydney)',",
					"    'ap-northeast-1': 'Asia Pacific (Tokyo)',",
					"    'ca-central-1': 'Canada (Central)',",
					"    'eu-central-1': 'Europe (Frankfurt)',",
					"    'eu-west-1': 'Europe (Ireland)',",
					"    'eu-west-2': 'Europe (London)',",
					"    'eu-south-1': 'Europe (Milan)',",
					"    'eu-west-3': 'Europe (Paris)',",
					"    'eu-north-1': 'Europe (Stockholm)',",
					"    'me-south-1': 'Middle East (Bahrain)',",
					"    'sa-east-1': 'South America (São Paulo)'",
					"}",
					"pm.collectionVariables.set(\"region_dict\", region_dict);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "region_dict",
			"value": ""
		},
		{
			"key": "service_types_dict",
			"value": ""
		}
	]
}