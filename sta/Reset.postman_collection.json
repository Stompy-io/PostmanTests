{
	"info": {
		"_postman_id": "01583f90-cdf1-4f2e-a6fb-48afc3e0bad0",
		"name": "Reset",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Sent Code Reset Email Does Not Exist",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"invalid_email\", pm.variables.replaceIn('{{$randomEmail}}'));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"pm.test(\"response is error\", () => {",
							"    pm.expect(pm.response.json()).to.have.property('error');",
							"    pm.expect(pm.response.json().error).to.eql('Email: ' + pm.environment.get('invalid_email') + \" does not exist!\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_user}}/auth/users/send_code/?email_to={{invalid_email}}&operation=resetPwd",
					"host": [
						"{{host_user}}"
					],
					"path": [
						"auth",
						"users",
						"send_code",
						""
					],
					"query": [
						{
							"key": "email_to",
							"value": "{{invalid_email}}"
						},
						{
							"key": "operation",
							"value": "resetPwd"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sent Code Reset",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"timeStamp\", pm.variables.replaceIn('{{$timestamp}}').concat('000'));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"result is success\", ()=>{",
							"    pm.expect(pm.response.json().results).to.eql('The Email has been sent successfully！');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_user}}/auth/users/send_code/?email_to={{reset_test_email}}&operation=resetPwd",
					"host": [
						"{{host_user}}"
					],
					"path": [
						"auth",
						"users",
						"send_code",
						""
					],
					"query": [
						{
							"key": "email_to",
							"value": "{{reset_test_email}}"
						},
						{
							"key": "operation",
							"value": "resetPwd"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get VRFCode From Email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const html_str = pm.response.json()['emails'][0]['html'];",
							"html_str.replace(/\\/n/, '');",
							"const $ = cheerio.load(html_str);",
							"const v_code = $('#vrf_code').text();",
							"pm.test(\"Verification Code is 6-digit\", ()=>{",
							"    pm.expect(v_code).to.match(/^\\d{6}$/);",
							"});",
							"pm.environment.set(\"vrf_code\", v_code)",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{test_email_api}}?apikey=853bbc59-1190-4c3d-b19b-fd9b42ec6099&namespace=eguzv&timestamp_from={{timeStamp}}&livequery=true",
					"protocol": "https",
					"host": [
						"{{test_email_api}}"
					],
					"query": [
						{
							"key": "apikey",
							"value": "853bbc59-1190-4c3d-b19b-fd9b42ec6099"
						},
						{
							"key": "namespace",
							"value": "eguzv"
						},
						{
							"key": "timestamp_from",
							"value": "{{timeStamp}}"
						},
						{
							"key": "livequery",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Reset Password Wrong Vrf Code",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set('currentPassword', pm.variables.replaceIn('{{$randomPassword}}'));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"pm.test(\"non_field_errors is Verify Code Does Not Match!\", () => {",
							"    pm.expect(pm.response.json().non_field_errors).to.eql(['Verify Code Does Not Match!']);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "organization",
							"value": "Stompy",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{reset_test_email}}",
							"type": "text"
						},
						{
							"key": "vrf_code",
							"value": "1+{{vrf_code}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{currentPassword}}",
							"type": "text"
						},
						{
							"key": "re_password",
							"value": "{{currentPassword}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host_user}}/auth/users/reset_password/",
					"host": [
						"{{host_user}}"
					],
					"path": [
						"auth",
						"users",
						"reset_password",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Reset Password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set('currentPassword', pm.variables.replaceIn('{{$randomPassword}}'));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"result is email sent success\", ()=>{",
							"    pm.expect(pm.response.json().results).to.equal('Successful Reset Password.');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "organization",
							"value": "Stompy",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{reset_test_email}}",
							"type": "text"
						},
						{
							"key": "vrf_code",
							"value": "{{vrf_code}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{currentPassword}}",
							"type": "text"
						},
						{
							"key": "re_password",
							"value": "{{currentPassword}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host_user}}/auth/users/reset_password/",
					"host": [
						"{{host_user}}"
					],
					"path": [
						"auth",
						"users",
						"reset_password",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Reset Password Duplicate Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set('randomPassword', pm.variables.replaceIn('{{$randomPassword}}'));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"pm.test(\"non_field_errors is Verify Code Does Not Match!\", () => {",
							"    pm.expect(pm.response.json().non_field_errors).to.eql(['Verify Code Does Not Match!']);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "organization",
							"value": "Stompy",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{reset_test_email}}",
							"type": "text"
						},
						{
							"key": "vrf_code",
							"value": "{{vrf_code}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{randomPassword}}",
							"type": "text"
						},
						{
							"key": "re_password",
							"value": "{{randomPassword}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host_user}}/auth/users/reset_password/",
					"host": [
						"{{host_user}}"
					],
					"path": [
						"auth",
						"users",
						"reset_password",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Again After Reset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
							"});",
							"",
							"pm.test(\"Has Access\", () => {",
							"    pm.expect(pm.response.json()).to.have.property(\"access\");",
							"});",
							"pm.test(\"Has Refresh\", () => {",
							"    pm.expect(pm.response.json()).to.have.property(\"refresh\");",
							"});",
							"",
							"function parseJwt(token) {",
							"    var base64Payload = token.split('.')[1];",
							"    var payload = Buffer.from(base64Payload, 'base64');",
							"    return JSON.parse(payload.toString());",
							"}",
							"let payload = parseJwt(pm.response.json().access);",
							"pm.environment.set('test_user_id', payload.user_id);",
							"pm.environment.set('test_access', 'JWT ' + pm.response.json().access);",
							"pm.environment.set('test_refresh', pm.response.json().refresh);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "{{reset_test_email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{currentPassword}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host_user}}/auth/jwt/create/",
					"host": [
						"{{host_user}}"
					],
					"path": [
						"auth",
						"jwt",
						"create",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Access Check - AWS Accounts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"",
							"pm.test(\"results has Id, name, isRoot\",()=>{",
							"    let results = pm.response.json().results;",
							"    if (results != undefined && results.length){",
							"        //check the last element in the array so that we don't only check first element",
							"        pm.expect(results[results.length-1]).to.have.property('Id');",
							"        pm.expect(results[0]).to.have.property('Name');",
							"        pm.expect(results[results.length-1]).to.have.property('isRoot');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{test_access}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host_aws}}/organizations/list-accounts/?caid={{reset_test_caid}}",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"organizations",
						"list-accounts",
						""
					],
					"query": [
						{
							"key": "caid",
							"value": "{{reset_test_caid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get VPCs Success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// const REGION_MAP = {",
							"//     'US East (N. Virginia)': 'us-east-1',",
							"//     'Canada (Central)': 'ca-central-1',",
							"//     'Asia Pacific (Mumbai)': 'ap-south-1',",
							"//     'US West (Oregon)': 'us-west-2',",
							"//     'Asia Pacific (Seoul)': 'ap-northeast-2',",
							"//     'US West (N. California)': 'us-west-1',",
							"//     'US East (Ohio)': 'us-east-2',",
							"//     'EU (Ireland)': 'eu-west-1',",
							"//     'South America (Sao Paulo)': 'sa-east-1',",
							"//     'Asia Pacific (Tokyo)': 'ap-northeast-1',",
							"//     'EU (London)': 'eu-west-2',",
							"//     'Asia Pacific (Sydney)': 'ap-southeast-2',",
							"//     'EU (Milan)': 'eu-south-1',",
							"//     'EU (Paris)': 'eu-west-3',",
							"//     'EU (Stockholm)': 'eu-north-1',",
							"//     'Middle East (Bahrain)': 'me-south-1',",
							"//     'EU (Frankfurt)': 'eu-central-1',",
							"//     'Asia Pacific (Singapore)': 'ap-southeast-1',",
							"//     'Africa (Cape Town)': 'af-south-1',",
							"//     'Asia Pacific (Hong Kong)': 'ap-east-1',",
							"//     'Asia Pacific (Osaka)': 'ap-northeast-3',",
							"//     // 'AWS GovCloud (US)': None",
							"// }",
							"",
							"// function randomValue(obj) {",
							"//     let keys = Object.keys(obj);",
							"//     return obj[keys[ Math.floor( keys.length * Math.random())]];",
							"// };",
							"",
							"// let region_code = randomValue(REGION_MAP);",
							"// console.log(region_code);",
							"// pm.environment.set('region_code',region_code);",
							"pm.environment.set('region_code','ap-southeast-1');",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const default_no_access = ['me-south-1', 'af-south-1', 'ap-east-1', ' eu-south-1']",
							"if (default_no_access.includes(pm.request.url.query.toObject().region_code)) {",
							"    pm.test('Status is 400', () => {",
							"        pm.expect(pm.response).to.have.status(400);",
							"    });",
							"    pm.test('results is parameter error', () => {",
							"        pm.expect(pm.response.json().error).to.eql('Parameters Error! Detail: An error occurred (AuthFailure) when calling the DescribeVpcs operation: AWS was not able to validate the provided access credentials');",
							"    });",
							"",
							"} else {",
							"    pm.test('Status is 200', () => {",
							"        pm.expect(pm.response).to.have.status(200);",
							"    });",
							"",
							"    pm.test('Has VpcId', () => {",
							"        let results_list = pm.response.json().results;",
							"        results_list.forEach(data => {",
							"            pm.expect(data).to.have.property('VpcId');",
							"        })",
							"    });",
							"",
							"    let checkDuplicatesFromList = (list, target_prop) => {",
							"        let store = new Set();",
							"        list.forEach(data => {",
							"            pm.expect(store.has(data[target_prop]),\"No \"+data[target_prop] +'existed' ).to.be.false;",
							"            store.add((data[target_prop]))",
							"        });",
							"    };",
							"",
							"    pm.test('has no duplicates', () => {",
							"        checkDuplicatesFromList(pm.response.json().results, 'VpcId');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{test_access}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host_aws}}/spotainers/get_vpcs/?caid={{reset_test_caid}}&region_code=ap-southeast-1",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"spotainers",
						"get_vpcs",
						""
					],
					"query": [
						{
							"key": "caid",
							"value": "{{reset_test_caid}}"
						},
						{
							"key": "region_code",
							"value": "ap-southeast-1"
						}
					]
				}
			},
			"response": []
		}
	]
}