{
	"info": {
		"_postman_id": "8d86b68b-20ec-4641-b363-1fa0119a1757",
		"name": "Phase1",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register",
					"item": [
						{
							"name": "Health Check Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']).equals(0);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()['msg']) == \"hello world\";",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"host\", \"http://dev.api.stompy.io/v1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{host}}"
							},
							"response": []
						},
						{
							"name": "Step1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']) == 0;",
											"});",
											"pm.test(\"Status code is -1\", function () {",
											"    pm.expect(pm.response.json()['vrf_stat']) == -1;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{host}}/register"
							},
							"response": []
						},
						{
							"name": "Step2 Send Verification Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']) == 0;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = Math.random().toString(36).substring(2, 15) +",
											"        Math.random().toString(36).substring(2, 15);",
											"const email = \"9m6u5.\" + uuid + \"@inbox.testmail.app\";",
											"pm.environment.set(\"currentEmail\", email)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"to_email\": \"{{currentEmail}}\",\n    \"src_page\": \"REG\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/send_email"
							},
							"response": []
						},
						{
							"name": "Step3 VRF_code Wrong",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.variables.replaceIn('https://api.testmail.app/api/json?apikey=2316c80e-fa32-48e9-93e0-e11e2516ce32&namespace=9m6u5'));",
											"",
											"pm.sendRequest(pm.variables.replaceIn('https://api.testmail.app/api/json?apikey=2316c80e-fa32-48e9-93e0-e11e2516ce32&namespace=9m6u5'), function (err, response) {",
											"    pm.environment.set(\"vrf_code\", response.json()['emails'][0]['text'].replace(/\\n/g, \"\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']).to.equal(0);",
											"});",
											"pm.test(\"vrf code is 2001\", function () {",
											"    pm.expect(pm.response.json()['vrf_stat']).to.equal(2001);",
											"    pm.globals.get(\"variable_key\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{currentEmail}}\",\n    \"vrf_cph\": \"{{vrf_code}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/verify_email"
							},
							"response": []
						},
						{
							"name": "Step4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']) == 0;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = Math.random().toString(36).substring(2, 15) +",
											"        Math.random().toString(36).substring(2, 15);",
											"pm.environment.set(\"currentPassword\", \"Secret123!\")",
											"pm.environment.set(\"username\", uuid)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{currentEmail}}\",\n    \"password\": \"{{currentPassword}}\",\n    \"username\": \"{{username}}\",\n    \"organization\": \"Stompy\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/register"
							},
							"response": []
						}
					]
				},
				{
					"name": "Reset Password",
					"item": [
						{
							"name": "step1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']) == 0;",
											"});",
											"pm.test(\"vrf code is -1\", function () {",
											"    pm.expect(pm.response.json()['vrf_stat']) == -1;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{host}}/register"
							},
							"response": []
						},
						{
							"name": "step2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']) == 0;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"src_page\": \"RST\", \n    \"to_email\": \"{{currentEmail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/send_email"
							},
							"response": []
						},
						{
							"name": "step3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']) == 0;",
											"});",
											"pm.test(\"vrf code is 2001\", function () {",
											"    pm.expect(pm.response.json()['vrf_stat']) == 2001;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest(pm.variables.replaceIn('https://api.testmail.app/api/json?apikey=6d62066d-8646-4cde-9888-4452879d011e&namespace=szccp'), function (err, response) {",
											"    pm.environment.set(\"vrf_code\", response.json()['emails'][0]['text'].replace(/\\n/g, \"\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{currentEmail}}\",\n    \"vrf_cph\": \"{{vrf_code}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/verify_email"
							},
							"response": []
						},
						{
							"name": "step4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"vrf code is 2001\", function () {",
											"    pm.expect(pm.response.json()['code']) .to.equal( 2001);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"currentPassword\", \"NewSecret123!\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{currentEmail}}\",\n    \"password\": \"{{currentPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/reset_password"
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']).to.equal(0);",
											"});",
											"pm.environment.set(\"org_id\", pm.response.json()['data']['org_id']);",
											"pm.environment.set(\"scc_id\", pm.response.json()['data']['scc_id']);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{currentEmail}}\", \n    \"password\": \"{{currentPassword}}\", \n    \"auto_login\": true\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/login"
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Account",
			"item": [
				{
					"name": "Create New ECS Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']) == 0;",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"ecs_id\");",
									"});",
									"pm.environment.set(\"ecs_id\", pm.response.json()['data']['ecs_id']);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}},\n    \"org_id\": \"{{org_id}}\",\n    \"bucket\": \"{{bucketName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/cloudformation-templates/iam-role"
					},
					"response": []
				},
				{
					"name": "Save New ECS Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']) == 0;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}},\n    \"org_id\": \"{{org_id}}\",\n    \"ecs_id\": \"{{ecs_id}}\",\n    \"bucket\": \"{{bucketName}}\",\n    \"arn\": \"{{testARN}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/cloud-accounts"
					},
					"response": []
				}
			]
		},
		{
			"name": "Analyze Costs",
			"item": [
				{
					"name": "Summary Line",
					"item": [
						{
							"name": "Costs Analysis",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']) == 0;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/analyze_cost"
							},
							"response": []
						},
						{
							"name": "Monthly Cost Trends",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']) == 0;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/monthly_cost_diagram"
							},
							"response": []
						},
						{
							"name": "Cost Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']) == 0;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/cost_by_categories"
							},
							"response": []
						}
					]
				},
				{
					"name": "Account Efficiency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0) ;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/efficiency_by_accounts"
					},
					"response": []
				},
				{
					"name": "Top Accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/cost_by_accounts"
					},
					"response": []
				},
				{
					"name": "Spend Analysis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']) == 0;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ecs_id\": \"{{ecs_id}}\",\n    \"org_id\": \"{{org_id}}\",\n    \"params\": {\n        \"Granularity\": \"MONTHLY\",\n        \"GroupBy\": [{\"Type\": \"DIMENSION\", \"Key\": \"LINKED_ACCOUNT\"}],\n        \"Metrics\": [\"BLENDED_COST\", \"AMORTIZED_COST\"],\n        \"TimePeriod\": {\n            \"End\": \"2021-05-01\",\n            \"Start\": \"2020-11-01\"\n        }\n        \n    },\n    \"scc_id\": {{scc_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/spend_analysis"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Trend and Notifications",
			"item": [
				{
					"name": "Trend Diagram & Event Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\",\n    \"st_dtm\": \"2021-01-01\",\n    \"nd_dtm\": \"2021-03-31\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/trend_diagram"
					},
					"response": []
				},
				{
					"name": "View Listeners",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/view_listeners"
					},
					"response": []
				},
				{
					"name": "Get Instance Tags When Listener Definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/get_instance_tags"
					},
					"response": []
				},
				{
					"name": "Define Listener",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});",
									"pm.environment.set(\"listenerId\", pm.response.json()['data']['listener_id']);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"listenerName\", \"sampleListener\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\",\n    \"listener\": {\n        \"biz\": \"AWS\",\n        \"description\": \"\",\n        \"inc_only\": true,\n        \"name\": \"{{listenerName}}\",\n        \"scope\": \"Weekly\",\n        \"tag_key\": \"Name\",\n        \"tag_val\": \"Hello\",\n        \"threshold\": \"10\",\n        \"username\": \"spt\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/define_listener"
					},
					"response": []
				},
				{
					"name": "Edit Listener",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']) == 0;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"newListenerName\", \"editedListener\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\",\n    \"listener\": {\n        \"biz\": \"AWS\",\n        \"created_utm\": 1619663407,\n        \"description\": \"\",\n        \"id\": \"{{listenerId}}\",\n        \"inc_only\": 1,\n        \"name\": \"{{newListenerName}}\",\n        \"scope\": \"Weekly\",\n        \"status\": \"ON\",\n        \"tag_key\": \"Name\",\n        \"tag_val\": \"Hello\",\n        \"threshold\": 10,\n        \"username\": \"spt\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/edit_listener"
					},
					"response": []
				},
				{
					"name": "Delete Listener",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']) == 0;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\",\n    \"listener_id\": \"aa037aba61ee2aaebb96170e4b5778ed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/delete_listener"
					},
					"response": []
				},
				{
					"name": "Spend Analysis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']) == 0;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ecs_id\": \"{{ecs_id}}\",\n    \"org_id\": \"{{org_id}}\",\n    \"params\": {\n        \"Granularity\": \"MONTHLY\",\n        \"GroupBy\": [{\"Type\": \"DIMENSION\", \"Key\": \"LINKED_ACCOUNT\"}],\n        \"Metrics\": [\"BLENDED_COST\", \"AMORTIZED_COST\"],\n        \"TimePeriod\": {\n            \"End\": \"2021-05-01\",\n            \"Start\": \"2020-11-01\"\n        }\n        \n    },\n    \"scc_id\": {{scc_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/spend_analysis"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Optimization",
			"item": [
				{
					"name": "Compute Overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0) ;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}},\n    \"org_id\": \"{{org_id}}\",\n    \"ecs_id\": \"{{ecs_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/compute_overview"
					},
					"response": []
				},
				{
					"name": "Reservations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}},\n    \"org_id\": \"{{org_id}}\",\n    \"ecs_id\": \"{{ecs_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/reservations"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}