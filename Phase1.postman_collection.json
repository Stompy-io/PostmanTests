{
	"info": {
		"_postman_id": "8de49cdc-f160-4693-8f67-31f7fb430c91",
		"name": "Phase1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register",
					"item": [
						{
							"name": "Health Check Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']).equals(0);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()['msg']).to.equal(\"hello world\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}",
									"host": [
										"{{host}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start Register /register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']).to.equal(0);",
											"});",
											"pm.test(\"Status code is -1\", function () {",
											"    pm.expect(pm.response.json()['data']['vrf_stat']).to.equal(-1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Verify Email /verifymail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const test_mail_pairs = pm.collectionVariables.get('test_mail_pairs');",
											"const index = Math.floor(Math.random()*(test_mail_pairs.length));",
											"const namespace = test_mail_pairs[index][0];",
											"pm.environment.set('test_email_namespace', namespace);",
											"pm.environment.set('test_email_api_key', test_mail_pairs[index][1]);",
											"const email = namespace+\".\" + pm.variables.replaceIn('{{$guid}}') + pm.variables.get(\"test_email_domain\");",
											"pm.environment.set(\"currentEmail\", email);",
											"pm.environment.set(\"timeStamp\", pm.variables.replaceIn('{{$timestamp}}').concat('000'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"to_email\": \"{{currentEmail}}\",\n    \"src_page\": \"REG\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/send_email",
									"host": [
										"{{host}}"
									],
									"path": [
										"send_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "VRF_code Wrong /verify_email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is not 0\", function () {",
											"    pm.expect(pm.response.json()['code']).to.not.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{currentEmail}}\",\n    \"vrf_cph\": \"bcde\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/verify_email",
									"host": [
										"{{host}}"
									],
									"path": [
										"verify_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get VRF_code From Email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//get the html part of the first email",
											"const html_str = pm.response.json()['emails'][0]['html'];",
											"const $ = cheerio.load(html_str);",
											"//query the verification code using id of the element",
											"const v_code = $('#vrf_code').text()",
											"pm.test(\"Verification Code is 4-digit\", ()=>{",
											"    pm.expect(v_code).to.match(/\\d{4}/);",
											"})",
											"pm.environment.set(\"vrf_code\", v_code)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://api.testmail.app/api/json?apikey={{test_email_api_key}}&namespace={{test_email_namespace}}&timestamp_from={{timeStamp}}&livequery=true",
									"protocol": "https",
									"host": [
										"api",
										"testmail",
										"app"
									],
									"path": [
										"api",
										"json"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{test_email_api_key}}"
										},
										{
											"key": "namespace",
											"value": "{{test_email_namespace}}"
										},
										{
											"key": "timestamp_from",
											"value": "{{timeStamp}}"
										},
										{
											"key": "livequery",
											"value": "true"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "VRF_code Correct /verify_email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']).to.equal(0);",
											"});",
											"pm.test(\"vrf stat is 2001\", function () {",
											"    pm.expect(pm.response.json()['data']['vrf_stat']).to.equal(2001);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{currentEmail}}\",\n    \"vrf_cph\": \"{{vrf_code}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/verify_email",
									"host": [
										"{{host}}"
									],
									"path": [
										"verify_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "Success Register  /register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']).to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"currentPassword\", \"Secret123!\");",
											"pm.environment.set(\"username\", pm.variables.replaceIn('{{$randomUUID}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{currentEmail}}\",\n    \"password\": \"{{currentPassword}}\",\n    \"username\": \"{{username}}\",\n    \"organization\": \"Stompy\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reset Password",
					"item": [
						{
							"name": "Start Register /register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']).to.equal(0);",
											"});",
											"pm.test(\"vrf code is -1\", function () {",
											"    pm.expect(pm.response.json()['data']['vrf_stat']).to.equal(-1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "RST Page Send Verify Email /send_email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']).to.equal(0);",
											"});",
											"",
											"pm.environment.set(\"timeStamp\", pm.variables.replaceIn('{{$timestamp}}').concat('000'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"src_page\": \"RST\", \n    \"to_email\": \"{{currentEmail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/send_email",
									"host": [
										"{{host}}"
									],
									"path": [
										"send_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get VRF_code From Email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//get the html part of the first email",
											"const html_str = pm.response.json()['emails'][0]['html'];",
											"const $ = cheerio.load(html_str);",
											"//query the verification code using id of the element",
											"const v_code = $('#vrf_code').text()",
											"pm.test(\"Verification Code is 4-digit\", ()=>{",
											"    pm.expect(v_code).to.match(/\\d{4}/);",
											"})",
											"pm.environment.set(\"vrf_code\", v_code)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://api.testmail.app/api/json?apikey={{test_email_api_key}}&namespace={{test_email_namespace}}&timestamp_from={{timeStamp}}&livequery=true",
									"protocol": "https",
									"host": [
										"api",
										"testmail",
										"app"
									],
									"path": [
										"api",
										"json"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{test_email_api_key}}"
										},
										{
											"key": "namespace",
											"value": "{{test_email_namespace}}"
										},
										{
											"key": "timestamp_from",
											"value": "{{timeStamp}}"
										},
										{
											"key": "livequery",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Correct VRFCode for Reset POST /verify_email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']).to.equal(0);",
											"});",
											"pm.test(\"vrf code is 2001\", function () {",
											"    pm.expect(pm.response.json()['data']['vrf_stat']).to.equal(2001);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{currentEmail}}\",\n    \"vrf_cph\": \"{{vrf_code}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/verify_email",
									"host": [
										"{{host}}"
									],
									"path": [
										"verify_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Password  /reset_password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"currentPassword\", \"NewSecret123!\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"vrf code is 2001\", function () {",
											"    pm.expect(pm.response.json()['code']).to.equal(2001);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{currentEmail}}\",\n    \"password\": \"{{currentPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/reset_password",
									"host": [
										"{{host}}"
									],
									"path": [
										"reset_password"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Login New Password /login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']).to.equal(0);",
											"});",
											"pm.test(\"Response has data\", ()=>{",
											"    pm.expect(pm.response.json()['data']);",
											"})",
											"pm.environment.set(\"org_id\", pm.response.json()['data']['org_id']);",
											"pm.environment.set(\"scc_id\", pm.response.json()['data']['scc_id']);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{currentEmail}}\", \n    \"password\": \"{{currentPassword}}\", \n    \"auto_login\": true\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Account",
			"item": [
				{
					"name": "Create New ECS Account From Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']) .to.equal(0);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"ecs_id\");",
									"});",
									"pm.environment.set(\"ecs_id\", pm.response.json()['data']['ecs_id']);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('bucketName', 'stompy-dev1-bucket1')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}},\n    \"org_id\": \"{{org_id}}\",\n    \"bucket\": \"{{bucketName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cloudformation-templates/iam-role",
							"host": [
								"{{host}}"
							],
							"path": [
								"cloudformation-templates",
								"iam-role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save New ECS Account POST /cloud-accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']) .to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}},\n    \"org_id\": \"{{org_id}}\",\n    \"ecs_id\": \"{{ecs_id}}\",\n    \"bucket\": \"{{bucketName}}\",\n    \"arn\": \"{{testARN}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cloud-accounts",
							"host": [
								"{{host}}"
							],
							"path": [
								"cloud-accounts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Analyze Costs",
			"item": [
				{
					"name": "Summary Line",
					"item": [
						{
							"name": "Costs Analysis /analyze_cost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/analyze_cost",
									"host": [
										"{{host}}"
									],
									"path": [
										"analyze_cost"
									]
								}
							},
							"response": []
						},
						{
							"name": "Monthly Cost Trends /monthly_cost_diagram",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/monthly_cost_diagram",
									"host": [
										"{{host}}"
									],
									"path": [
										"monthly_cost_diagram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cost Categories /cost_by_categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code is 0\", function () {",
											"    pm.expect(pm.response.json()['code']).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/cost_by_categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"cost_by_categories"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Account Efficiency /efficiency_by_accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0) ;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/efficiency_by_accounts",
							"host": [
								"{{host}}"
							],
							"path": [
								"efficiency_by_accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Top Accounts /cost_by_accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cost_by_accounts",
							"host": [
								"{{host}}"
							],
							"path": [
								"cost_by_accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Spend Analysis /spend_analysis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ecs_id\": \"{{ecs_id}}\",\n    \"org_id\": \"{{org_id}}\",\n    \"params\": {\n        \"Granularity\": \"MONTHLY\",\n        \"GroupBy\": [{\"Type\": \"DIMENSION\", \"Key\": \"LINKED_ACCOUNT\"}],\n        \"Metrics\": [\"BLENDED_COST\", \"AMORTIZED_COST\"],\n        \"TimePeriod\": {\n            \"End\": \"2021-05-01\",\n            \"Start\": \"2020-11-01\"\n        }\n        \n    },\n    \"scc_id\": {{scc_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/spend_analysis",
							"host": [
								"{{host}}"
							],
							"path": [
								"spend_analysis"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Trend and Notifications",
			"item": [
				{
					"name": "Trend Diagram & Event Table /trend_diagram",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\",\n    \"st_dtm\": \"2021-01-01\",\n    \"nd_dtm\": \"2021-03-31\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/trend_diagram",
							"host": [
								"{{host}}"
							],
							"path": [
								"trend_diagram"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Listeners /view_listeners",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/view_listeners",
							"host": [
								"{{host}}"
							],
							"path": [
								"view_listeners"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Instance Tags When Listener Definition /get_instance_tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/get_instance_tags",
							"host": [
								"{{host}}"
							],
							"path": [
								"get_instance_tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Define Listener /define_listener",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});",
									"pm.environment.set(\"listenerId\", pm.response.json()['data']['listener_id']);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"listenerName\", \"sampleListener\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\",\n    \"listener\": {\n        \"biz\": \"AWS\",\n        \"description\": \"\",\n        \"inc_only\": true,\n        \"name\": \"{{listenerName}}\",\n        \"scope\": \"Weekly\",\n        \"tag_key\": \"Name\",\n        \"tag_val\": \"Hello\",\n        \"threshold\": \"10\",\n        \"username\": \"spt\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/define_listener",
							"host": [
								"{{host}}"
							],
							"path": [
								"define_listener"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Listener /edit_listener",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"newListenerName\", \"editedListener\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\",\n    \"listener\": {\n        \"biz\": \"AWS\",\n        \"created_utm\": 1619663407,\n        \"description\": \"\",\n        \"id\": \"{{listenerId}}\",\n        \"inc_only\": 1,\n        \"name\": \"{{newListenerName}}\",\n        \"scope\": \"Weekly\",\n        \"status\": \"ON\",\n        \"tag_key\": \"Name\",\n        \"tag_val\": \"Hello\",\n        \"threshold\": 10,\n        \"username\": \"spt\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/edit_listener",
							"host": [
								"{{host}}"
							],
							"path": [
								"edit_listener"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Listener delete_listener",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}}, \n    \"org_id\": \"{{org_id}}\", \n    \"ecs_id\": \"{{ecs_id}}\",\n    \"listener_id\": \"aa037aba61ee2aaebb96170e4b5778ed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/delete_listener",
							"host": [
								"{{host}}"
							],
							"path": [
								"delete_listener"
							]
						}
					},
					"response": []
				},
				{
					"name": "Spend Analysis /spend_analysis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ecs_id\": \"{{ecs_id}}\",\n    \"org_id\": \"{{org_id}}\",\n    \"params\": {\n        \"Granularity\": \"MONTHLY\",\n        \"GroupBy\": [{\"Type\": \"DIMENSION\", \"Key\": \"LINKED_ACCOUNT\"}],\n        \"Metrics\": [\"BLENDED_COST\", \"AMORTIZED_COST\"],\n        \"TimePeriod\": {\n            \"End\": \"2021-05-01\",\n            \"Start\": \"2020-11-01\"\n        }\n        \n    },\n    \"scc_id\": {{scc_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/spend_analysis",
							"host": [
								"{{host}}"
							],
							"path": [
								"spend_analysis"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Optimization",
			"item": [
				{
					"name": "Compute Overview /compute_overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}},\n    \"org_id\": \"{{org_id}}\",\n    \"ecs_id\": \"{{ecs_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/compute_overview",
							"host": [
								"{{host}}"
							],
							"path": [
								"compute_overview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservations /reservations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}},\n    \"org_id\": \"{{org_id}}\",\n    \"ecs_id\": \"{{ecs_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/reservations",
							"host": [
								"{{host}}"
							],
							"path": [
								"reservations"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const api_dict = [['ftm8x','be915d57-78e8-42ef-905a-d56e84a94bdf'],",
					"                    ['rw1ta', '00e9dd78-915d-49c7-a86b-7a01bc7e7aa4'],",
					"                    ['eguzv', '853bbc59-1190-4c3d-b19b-fd9b42ec6099'],",
					"                    ['7b984', '5e234310-2865-473f-b270-8900052450c8'],",
					"                    ['p7r7y', '65ec4353-0149-4308-ab5d-ef20facafa5d']]",
					"pm.collectionVariables.set(\"test_mail_pairs\",api_dict);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://v1.flask.api.stompy.io"
		},
		{
			"key": "test_email_api_key",
			"value": "2316c80e-fa32-48e9-93e0-e11e2516ce32"
		},
		{
			"key": "test_email_namespace",
			"value": "9m6u5"
		},
		{
			"key": "test_email_domain",
			"value": "@inbox.testmail.app"
		},
		{
			"key": "testARN",
			"value": "arn:aws:iam::385105545457:role/stompy-iam-role-stack-42080286085-StompyFinOpsRole-1M2MP3SMF6ZQ8"
		},
		{
			"key": "test_mail_pairs",
			"value": ""
		}
	]
}