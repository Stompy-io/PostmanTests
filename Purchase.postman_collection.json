{
	"info": {
		"_postman_id": "a9d56fde-2552-46bb-b481-1d5800a3df9b",
		"name": "Purchase",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Services",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_aws}}/services",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services"
					]
				}
			},
			"response": []
		},
		{
			"name": "Purchase EC2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"purchase_service\",\"EC2\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"});",
							"",
							"let results = pm.response.json().results;",
							"",
							"pm.test(\"Has reservedInstanceID\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"ReservedInstancesId\");",
							"});",
							"",
							"pm.test(\"Has info\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"info\");",
							"});",
							"",
							"",
							"pm.test(\"Has Service\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Service\");",
							"});",
							"",
							"pm.test(\"Service match request\", ()=>{",
							"    pm.expect(results[0].Service).to.equal(pm.environment.get(\"purchase_service\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": false,\n  \"Instances\":\n  [\n    {\n      \"Service\": \"{{purchase_service}}\",\n      \"Count\": \"5\",\n      \"Duration\": \"3\",\n      \"InstanceType\": \"m1.small\",\n      \"OfferingClass\": \"standard\",\n      \"OfferingType\": \"All Upfront\",\n      \"ProductDescription\": \"Linux/UNIX\",\n      \"Region\": \"Asia Pacific (Singapore)\",\n      \"RecommendationId\": \"6f44bdd8-6cf8-4777-a82c-e4f222582a90\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_aws}}/services/ri-offerings/purchase/",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"ri-offerings",
						"purchase",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Purchase RDS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"purchase_service\",\"RDS\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"});",
							"",
							"let results = pm.response.json().results;",
							"",
							"pm.test(\"Has reservedInstanceID\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"ReservedInstancesId\");",
							"});",
							"",
							"pm.test(\"Has info\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"info\");",
							"});",
							"",
							"",
							"pm.test(\"Has Service\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Service\");",
							"});",
							"",
							"pm.test(\"Service match request\", ()=>{",
							"    pm.expect(results[0].Service).to.equal(pm.environment.get(\"purchase_service\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": false,\n  \"Instances\":\n  [\n    {\n      \"Service\": \"{{purchase_service}}\",\n      \"Count\": \"1\",\n      \"DBInstanceClass\": \"db.t3.small\",\n      \"Duration\": \"3\",\n      \"ProductDescription\": \"Aurora MySQL\",\n      \"OfferingType\": \"All Upfront\",\n      \"MultiAZ\": false,\n      \"Region\": \"Asia Pacific (Singapore)\",\n      \"RecommendationId\": \"6f44bdd8-6cf8-4777-a82c-e4f222582a90\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_aws}}/services/ri-offerings/purchase/",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"ri-offerings",
						"purchase",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Purchase Redshift",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"purchase_service\",\"Redshift\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"});",
							"",
							"let results = pm.response.json().results;",
							"",
							"pm.test(\"Has reservedInstanceID\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"ReservedInstancesId\");",
							"});",
							"",
							"pm.test(\"Has info\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"info\");",
							"});",
							"",
							"",
							"pm.test(\"Has Service\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Service\");",
							"});",
							"",
							"pm.test(\"Service match request\", ()=>{",
							"    pm.expect(results[0].Service).to.equal(pm.environment.get(\"purchase_service\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": false,\n  \"Instances\":\n  [\n    {\n      \"Service\": \"{{purchase_service}}\",\n      \"Count\": \"2\",\n      \"Duration\": \"3\",\n      \"NodeType\": \"dc2.large\",\n      \"OfferingType\": \"All Upfront\",\n      \"Region\": \"Asia Pacific (Singapore)\",\n      \"RecommendationId\": \"6f44bdd8-6cf8-4777-a82c-e4f222582a90\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_aws}}/services/ri-offerings/purchase/",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"ri-offerings",
						"purchase",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Purchase ElastiCache",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"purchase_service\",\"ElastiCache\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"});",
							"",
							"let results = pm.response.json().results;",
							"",
							"pm.test(\"Has reservedInstanceID\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"ReservedInstancesId\");",
							"});",
							"",
							"pm.test(\"Has info\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"info\");",
							"});",
							"",
							"",
							"pm.test(\"Has Service\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Service\");",
							"});",
							"",
							"pm.test(\"Service match request\", ()=>{",
							"    pm.expect(results[0].Service).to.equal(pm.environment.get(\"purchase_service\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": false,\n  \"Instances\":\n  [\n    {\n      \"Service\": \"{{purchase_service}}\",\n       \"Count\": \"2\",\n      \"Duration\": \"3\",\n      \"ProductDescription\": \"memcached\",\n      \"CacheNodeType\": \"cache.m6g.4xlarge\",\n      \"OfferingType\": \"No Upfront\",\n      \"Region\": \"Asia Pacific (Singapore)\",\n      \"RecommendationId\": \"6f44bdd8-6cf8-4777-a82c-e4f222582a90\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_aws}}/services/ri-offerings/purchase/",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"ri-offerings",
						"purchase",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Purchase ES",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"purchase_service\",\"ES\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"});",
							"",
							"let results = pm.response.json().results;",
							"",
							"pm.test(\"Has ReservedElasticsearchInstanceId\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"ReservedElasticsearchInstanceId\");",
							"});",
							"",
							"pm.test(\"Has info\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"info\");",
							"});",
							"",
							"",
							"pm.test(\"Has Service\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Service\");",
							"});",
							"",
							"pm.test(\"Service match request\", ()=>{",
							"    pm.expect(results[0].Service).to.equal(pm.environment.get(\"purchase_service\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": false,\n  \"Instances\":\n  [\n    {\n      \"Service\": \"{{purchase_service}}\",\n      \"Count\": \"2\",\n      \"Duration\": \"3\",\n      \"RecommendedInstanceType\": \"c5.xlarge.elasticsearch\",\n      \"OfferingType\": \"No Upfront\",\n      \"Region\": \"Asia Pacific (Singapore)\",\n      \"RecommendationId\": \"6f44bdd8-6cf8-4777-a82c-e4f222582a90\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_aws}}/services/ri-offerings/purchase/",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"ri-offerings",
						"purchase",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Purchase Preview EC2 Count 5",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"purchaseService\",\"EC2\");",
							"pm.environment.set(\"count_1\",5);",
							"pm.environment.set('duration', 3);",
							"pm.environment.set('instanceType', \"m1.small\");",
							"pm.environment.set('offeringClass', 'standard');",
							"pm.environment.set('offeringType', 'All Upfront');",
							"pm.environment.set('productDescription', \"Linux/UNIX\");",
							"pm.environment.set(\"region\",'Asia Pacific (Singapore)');",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"});",
							"",
							"let results = pm.response.json().results;",
							"",
							"pm.test(\"Has Service\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Service\");",
							"});",
							"",
							"pm.test(\"Service match request\", ()=>{",
							"    pm.expect(results[0].Service).to.equal(pm.environment.get(\"purchaseService\"));",
							"});",
							"",
							"pm.test(\"Has Region\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Region\");",
							"});",
							"",
							"pm.test(\"Region match request\", ()=>{",
							"    pm.expect(results[0].Region).to.equal(pm.environment.get(\"region\"));",
							"});",
							"",
							"pm.test(\"Has Count\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Count\");",
							"});",
							"",
							"pm.test(\"Count match request\", ()=>{",
							"    pm.expect(results[0].Count).to.equal(pm.environment.get(\"count_1\"));",
							"});",
							"",
							"pm.test(\"Has Duration\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Duration\");",
							"});",
							"",
							"pm.test(\"Duration match request\", ()=>{",
							"    //60s * 60 min * 24 hr * 365 days",
							"    let request_duration_in_seconds = pm.environment.get(\"duration\") *60 *60 *24 *365;",
							"    pm.expect(results[0].Duration).to.equal(request_duration_in_seconds);",
							"});",
							"",
							"pm.test(\"Has InstanceType\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"InstanceType\");",
							"});",
							"",
							"pm.test(\"InstanceType match request\", ()=>{",
							"    pm.expect(results[0].InstanceType).to.equal(pm.environment.get(\"instanceType\"));",
							"});",
							"",
							"pm.test(\"Has OfferingClass\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"OfferingClass\");",
							"});",
							"",
							"pm.test(\"OfferingClass match request\", ()=>{",
							"    pm.expect(results[0].OfferingClass).to.equal(pm.environment.get(\"offeringClass\"));",
							"});",
							"",
							"pm.test(\"Has OfferingType\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"OfferingType\");",
							"});",
							"",
							"pm.test(\"OfferingType match request\", ()=>{",
							"    pm.expect(results[0].OfferingType).to.equal(pm.environment.get(\"offeringType\"));",
							"});",
							"",
							"pm.test(\"Has ProductDescription\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"ProductDescription\");",
							"});",
							"",
							"pm.test(\"ProductDescription match request\", ()=>{",
							"    pm.expect(results[0].ProductDescription).to.equal(pm.environment.get(\"productDescription\"));",
							"});",
							"",
							"pm.test(\"Has Region\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Region\");",
							"});",
							"",
							"pm.test(\"Region match request\", ()=>{",
							"    pm.expect(results[0].Region).to.equal(pm.environment.get(\"region\"));",
							"});",
							"",
							"pm.test(\"Price check\",()=>{",
							"    let upfront_option = pm.environment.get(\"offeringType\");",
							"    let fixed_price = parseFloat(results.FixedPrice);",
							"    let hourly_price = parseFloat(results.RecurringCharges[0].Hourly);",
							"    if(upfront_option == 'All Upfront'){",
							"        pm.expect(fixed_price).to.be.above(0);",
							"        pm.expect(hourly_price).to.equal(0);",
							"    }else if(upfront_option =='Partial Upfront'){",
							"        pm.expect(fixed_price).to.be.above(0);",
							"        pm.expect(hourly_price).to.be.above(0);",
							"",
							"    }else{",
							"        pm.expect(upfront_option).to.equal(\"No Upfront\");",
							"         pm.expect(fixed_price).to.equal(0);",
							"        pm.expect(hourly_price).to.be.above(0);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\":\n  [\n    {\n      \"Service\": \"{{purchaseService}}\",\n      \"Count\": \"{{count_1}}\",\n      \"Duration\": \"{{duration}}\",\n      \"InstanceType\": \"{{instanceType}}\",\n      \"OfferingClass\": \"{{offeringClass}}\",\n      \"OfferingType\": \"{{offeringType}}\",\n      \"ProductDescription\": \"{{productDescription}}\",\n      \"Region\": \"{{region}}\",\n      \"RecommendationId\": \"6f44bdd8-6cf8-4777-a82c-e4f222582a90\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_aws}}/services/ri-offerings/purchase/",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"ri-offerings",
						"purchase",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Purchase Preview EC2 Count 3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"purchaseService\",\"EC2\");",
							"pm.environment.set(\"count_2\",5);",
							"pm.environment.set('duration', 3);",
							"pm.environment.set('instanceType', \"m1.small\");",
							"pm.environment.set('offeringClass', 'standard');",
							"pm.environment.set('offeringType', 'All Upfront');",
							"pm.environment.set('productDescription', \"Linux/UNIX\");",
							"pm.environment.set(\"region\",'Asia Pacific (Singapore)');",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"});",
							"",
							"let results = pm.response.json().results;",
							"",
							"pm.test(\"Has Service\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Service\");",
							"});",
							"",
							"pm.test(\"Service match request\", ()=>{",
							"    pm.expect(results[0].Service).to.equal(pm.environment.get(\"purchaseService\"));",
							"});",
							"",
							"pm.test(\"Has Region\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Region\");",
							"});",
							"",
							"pm.test(\"Region match request\", ()=>{",
							"    pm.expect(results[0].Region).to.equal(pm.environment.get(\"region\"));",
							"});",
							"",
							"pm.test(\"Has Count\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Count\");",
							"});",
							"",
							"pm.test(\"Count match request\", ()=>{",
							"    pm.expect(results[0].Count).to.equal(pm.environment.get(\"count_2\"));",
							"});",
							"",
							"pm.test(\"Count2 is 3/5 of count1\", ()=>{",
							"    let unit_price2 = results[0].FixedPrice/pm.environment.get(\"count_2\");",
							"    let unit_price1 = pm.environment.get('fixed_price') / pm.environment.get(\"count_1\");",
							"    pm.expect().to.equal();",
							"});",
							"",
							"pm.test(\"Has Duration\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Duration\");",
							"});",
							"",
							"pm.test(\"Duration match request\", ()=>{",
							"    //60s * 60 min * 24 hr * 365 days",
							"    let request_duration_in_seconds = pm.environment.get(\"duration\") *60 *60 *24 *365;",
							"    pm.expect(results[0].Duration).to.equal(request_duration_in_seconds);",
							"});",
							"",
							"pm.test(\"Has InstanceType\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"InstanceType\");",
							"});",
							"",
							"pm.test(\"InstanceType match request\", ()=>{",
							"    pm.expect(results[0].InstanceType).to.equal(pm.environment.get(\"offeringClass\"));",
							"});",
							"",
							"pm.test(\"Has OfferingClass\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"OfferingClass\");",
							"});",
							"",
							"pm.test(\"OfferingClass match request\", ()=>{",
							"    pm.expect(results[0].OfferingClass).to.equal(pm.environment.get(\"instanceType\"));",
							"});",
							"",
							"pm.test(\"Has OfferingType\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"OfferingType\");",
							"});",
							"",
							"pm.test(\"OfferingType match request\", ()=>{",
							"    pm.expect(results[0].OfferingType).to.equal(pm.environment.get(\"offeringType\"));",
							"});",
							"",
							"pm.test(\"Has ProductDescription\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"ProductDescription\");",
							"});",
							"",
							"pm.test(\"ProductDescription match request\", ()=>{",
							"    pm.expect(results[0].ProductDescription).to.equal(pm.environment.get(\"productDescription\"));",
							"});",
							"",
							"pm.test(\"Has Region\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Region\");",
							"});",
							"",
							"pm.test(\"Region match request\", ()=>{",
							"    pm.expect(results[0].Region).to.equal(pm.environment.get(\"region\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\":\n  [\n    {\n      \"Service\": \"{{purchaseService}}\",\n      \"Count\": \"{{count_2}}\",\n      \"Duration\": \"{{duration}}\",\n      \"InstanceType\": \"{{instanceType}}\",\n      \"OfferingClass\": \"{{offeringClass}}\",\n      \"OfferingType\": \"{{offeringType}}\",\n      \"ProductDescription\": \"{{productDescription}}\",\n      \"Region\": \"{{region}}\",\n      \"RecommendationId\": \"6f44bdd8-6cf8-4777-a82c-e4f222582a90\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_aws}}/services/ri-offerings/purchase/",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"ri-offerings",
						"purchase",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Purchase Preview EC2 Partial Upfront",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"purchaseService\",\"EC2\");",
							"pm.environment.set(\"count\",5);",
							"pm.environment.set('duration', 3);",
							"pm.environment.set('instanceType', \"m1.small\");",
							"pm.environment.set('offeringClass', 'standard');",
							"pm.environment.set('offeringType', 'Partial Upfront');",
							"pm.environment.set('productDescription', \"Linux/UNIX\");",
							"pm.environment.set(\"region\",'Asia Pacific (Singapore)');",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"});",
							"",
							"let results = pm.response.json().results;",
							"",
							"pm.test(\"Has Service\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Service\");",
							"});",
							"",
							"pm.test(\"Service match request\", ()=>{",
							"    pm.expect(results[0].Service).to.equal(pm.environment.get(\"purchaseService\"));",
							"});",
							"",
							"pm.test(\"Has Region\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Region\");",
							"});",
							"",
							"pm.test(\"Region match request\", ()=>{",
							"    pm.expect(results[0].Region).to.equal(pm.environment.get(\"region\"));",
							"});",
							"",
							"pm.test(\"Has Count\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Count\");",
							"});",
							"",
							"pm.test(\"Count match request\", ()=>{",
							"    pm.expect(results[0].Count).to.equal(pm.environment.get(\"count\"));",
							"});",
							"",
							"pm.test(\"Has Duration\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Duration\");",
							"});",
							"",
							"pm.test(\"Duration match request\", ()=>{",
							"    //60s * 60 min * 24 hr * 365 days",
							"    let request_duration_in_seconds = pm.environment.get(\"duration\") *60 *60 *24 *365;",
							"    pm.expect(results[0].Duration).to.equal(request_duration_in_seconds);",
							"});",
							"",
							"pm.test(\"Has InstanceType\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"InstanceType\");",
							"});",
							"",
							"pm.test(\"InstanceType match request\", ()=>{",
							"    pm.expect(results[0].InstanceType).to.equal(pm.environment.get(\"offeringClass\"));",
							"});",
							"",
							"pm.test(\"Has OfferingClass\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"OfferingClass\");",
							"});",
							"",
							"pm.test(\"OfferingClass match request\", ()=>{",
							"    pm.expect(results[0].OfferingClass).to.equal(pm.environment.get(\"instanceType\"));",
							"});",
							"",
							"pm.test(\"Has OfferingType\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"OfferingType\");",
							"});",
							"",
							"pm.test(\"OfferingType match request\", ()=>{",
							"    pm.expect(results[0].OfferingType).to.equal(pm.environment.get(\"offeringType\"));",
							"});",
							"",
							"pm.test(\"Has ProductDescription\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"ProductDescription\");",
							"});",
							"",
							"pm.test(\"ProductDescription match request\", ()=>{",
							"    pm.expect(results[0].ProductDescription).to.equal(pm.environment.get(\"productDescription\"));",
							"});",
							"",
							"pm.test(\"Has Region\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Region\");",
							"});",
							"",
							"pm.test(\"Region match request\", ()=>{",
							"    pm.expect(results[0].Region).to.equal(pm.environment.get(\"region\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\":\n  [\n    {\n      \"Service\": \"{{purchaseService}}\",\n      \"Count\": \"{{count}}\",\n      \"Duration\": \"{{duration}}\",\n      \"InstanceType\": \"{{instanceType}}\",\n      \"OfferingClass\": \"{{offeringClass}}\",\n      \"OfferingType\": \"{{offeringType}}\",\n      \"ProductDescription\": \"{{productDescription}}\",\n      \"Region\": \"{{region}}\",\n      \"RecommendationId\": \"6f44bdd8-6cf8-4777-a82c-e4f222582a90\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_aws}}/services/ri-offerings/purchase/",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"ri-offerings",
						"purchase",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Purchase Preview EC2 No Upfront",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"purchaseService\",\"EC2\");",
							"pm.environment.set(\"count\",5);",
							"pm.environment.set('duration', 3);",
							"pm.environment.set('instanceType', \"m1.small\");",
							"pm.environment.set('offeringClass', 'standard');",
							"pm.environment.set('offeringType', 'No Upfront');",
							"pm.environment.set('productDescription', \"Linux/UNIX\");",
							"pm.environment.set(\"region\",'Asia Pacific (Singapore)');",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"});",
							"",
							"let results = pm.response.json().results;",
							"",
							"pm.test(\"Has Service\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Service\");",
							"});",
							"",
							"pm.test(\"Service match request\", ()=>{",
							"    pm.expect(results[0].Service).to.equal(pm.environment.get(\"purchaseService\"));",
							"});",
							"",
							"pm.test(\"Has Region\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Region\");",
							"});",
							"",
							"pm.test(\"Region match request\", ()=>{",
							"    pm.expect(results[0].Region).to.equal(pm.environment.get(\"region\"));",
							"});",
							"",
							"pm.test(\"Has Count\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Count\");",
							"});",
							"",
							"pm.test(\"Count match request\", ()=>{",
							"    pm.expect(results[0].Count).to.equal(pm.environment.get(\"count\"));",
							"});",
							"",
							"pm.test(\"Has Duration\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Duration\");",
							"});",
							"",
							"pm.test(\"Duration match request\", ()=>{",
							"    //60s * 60 min * 24 hr * 365 days",
							"    let request_duration_in_seconds = pm.environment.get(\"duration\") *60 *60 *24 *365;",
							"    pm.expect(results[0].Duration).to.equal(request_duration_in_seconds);",
							"});",
							"",
							"pm.test(\"Has InstanceType\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"InstanceType\");",
							"});",
							"",
							"pm.test(\"InstanceType match request\", ()=>{",
							"    pm.expect(results[0].InstanceType).to.equal(pm.environment.get(\"offeringClass\"));",
							"});",
							"",
							"pm.test(\"Has OfferingClass\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"OfferingClass\");",
							"});",
							"",
							"pm.test(\"OfferingClass match request\", ()=>{",
							"    pm.expect(results[0].OfferingClass).to.equal(pm.environment.get(\"instanceType\"));",
							"});",
							"",
							"pm.test(\"Has OfferingType\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"OfferingType\");",
							"});",
							"",
							"pm.test(\"OfferingType match request\", ()=>{",
							"    pm.expect(results[0].OfferingType).to.equal(pm.environment.get(\"offeringType\"));",
							"});",
							"",
							"pm.test(\"Has ProductDescription\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"ProductDescription\");",
							"});",
							"",
							"pm.test(\"ProductDescription match request\", ()=>{",
							"    pm.expect(results[0].ProductDescription).to.equal(pm.environment.get(\"productDescription\"));",
							"});",
							"",
							"pm.test(\"Has Region\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Region\");",
							"});",
							"",
							"pm.test(\"Region match request\", ()=>{",
							"    pm.expect(results[0].Region).to.equal(pm.environment.get(\"region\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\":\n  [\n    {\n      \"Service\": \"{{purchaseService}}\",\n      \"Count\": \"{{count}}\",\n      \"Duration\": \"{{duration}}\",\n      \"InstanceType\": \"{{instanceType}}\",\n      \"OfferingClass\": \"{{offeringClass}}\",\n      \"OfferingType\": \"{{offeringType}}\",\n      \"ProductDescription\": \"{{productDescription}}\",\n      \"Region\": \"{{region}}\",\n      \"RecommendationId\": \"6f44bdd8-6cf8-4777-a82c-e4f222582a90\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_aws}}/services/ri-offerings/purchase/",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"ri-offerings",
						"purchase",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Purchase Preview RDS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"purchase_service\",\"RDS\");",
							"pm.environment.set(\"count\",1);",
							"pm.environment.set('duration', 3);",
							"pm.environment.set('offeringType', 'All Upfront');",
							"pm.environment.set(\"region\",'Asia Pacific (Singapore)');",
							"pm.environment.set('productDescription', \"Aurora MySQL\");",
							"pm.environment.set('DBInstanceClass', \"db.t3.small\");",
							"pm.environment.set('multiAZ', false);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"});",
							"",
							"let results = pm.response.json().results;",
							"",
							"pm.test(\"Has Service\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Service\");",
							"});",
							"",
							"pm.test(\"Service match request\", ()=>{",
							"    pm.expect(results[0].Service).to.equal(pm.environment.get(\"purchase_service\"));",
							"});",
							"",
							"pm.test(\"Has Count\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Count\");",
							"});",
							"",
							"pm.test(\"Count match request\", ()=>{",
							"    pm.expect(results[0].Count).to.equal(pm.environment.get(\"count\"));",
							"});",
							"",
							"pm.test(\"Has Duration\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Duration\");",
							"});",
							"",
							"pm.test(\"Duration Match\", ()=>{",
							"    //60s * 60 min * 24 hr * 365 days",
							"    let request_duration_in_seconds = pm.environment.get(\"duration\") *60 *60 *24 *365;",
							"    pm.expect(results[0].Duration).to.equal(request_duration_in_seconds);",
							"});",
							"",
							"pm.test(\"Has Region\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Region\");",
							"});",
							"",
							"pm.test(\"Region match request\", ()=>{",
							"    pm.expect(results[0].Region).to.equal(pm.environment.get(\"region\"));",
							"});",
							"",
							"pm.test(\"Has ProductDescription\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"ProductDescription\");",
							"});",
							"",
							"pm.test(\"ProductDescription match request\", ()=>{",
							"    //replace all space with -, and all lower cased",
							"    let myProductDescriptionReformatted = pm.environment.get(\"productDescription\").replace(/\\s+/g, '-').toLowerCase();",
							"    pm.expect(results[0].ProductDescription).to.equal(myProductDescriptionReformatted);",
							"});",
							"",
							"pm.test(\"Has DBInstanceClass\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"DBInstanceClass\");",
							"});",
							"",
							"pm.test(\"DBInstanceClass match request\", ()=>{",
							"    pm.expect(results[0].DBInstanceClass).to.equal(pm.environment.get(\"DBInstanceClass\"));",
							"});",
							"",
							"pm.test(\"Has MultiAZ\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"MultiAZ\");",
							"});",
							"",
							"pm.test(\"MultiAZ match request\", ()=>{",
							"    pm.expect(results[0].MultiAZ).to.equal(pm.environment.get(\"multiAZ\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\":\n  [\n    {\n      \"Service\": \"{{purchase_service}}\",\n      \"Count\": \"{{count}}\",\n      \"DBInstanceClass\": \"{{DBInstanceClass}}\",\n      \"Duration\": \"{{duration}}\",\n      \"ProductDescription\": \"{{productDescription}}\",\n      \"OfferingType\": \"{{offeringType}}\",\n      \"MultiAZ\": {{multiAZ}},\n      \"Region\": \"{{region}}\",\n      \"RecommendationId\": \"6f44bdd8-6cf8-4777-a82c-e4f222582a90\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_aws}}/services/ri-offerings/purchase/",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"ri-offerings",
						"purchase",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Purchase Preview Redshift",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"_Service\",\"Redshift\");",
							"pm.environment.set(\"_Count\", 2);",
							"pm.environment.set(\"_Duration\", 3);",
							"pm.environment.set(\"_NodeType\", 'dc2.large');",
							"pm.environment.set('_OfferingType', 'All Upfront');",
							"pm.environment.set(\"_Region\",'Asia Pacific (Singapore)');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"});",
							"",
							"pm.test(\"Has Service\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property(\"Service\");",
							"});",
							"",
							"pm.test(\"Service match request\", ()=>{",
							"    pm.expect(pm.response.json().Service).to.equal(pm.environment.get(\"_Service\"));",
							"});",
							"",
							"pm.test(\"Has Count\", ()=>{",
							"    pm.expect(repm.response.json()).to.have.property(\"Count\");",
							"});",
							"",
							"pm.test(\"Count match request\", ()=>{",
							"    pm.expect(pm.response.json().Count).to.equal(pm.environment.get(\"_Count\"));",
							"});",
							"",
							"",
							"pm.test(\"Has Region\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property(\"Region\");",
							"});",
							"",
							"pm.test(\"Region match request\", ()=>{",
							"    pm.expect(pm.response.json().Region).to.equal(pm.environment.get(\"_Region\"));",
							"});",
							"",
							"let results = pm.response.json().results;",
							"",
							"",
							"",
							"pm.test(\"Has Duration\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Duration\");",
							"});",
							"",
							"pm.test(\"Duration Match\", ()=>{",
							"    //60s * 60 min * 24 hr * 365 days",
							"    let request_duration_in_seconds = pm.environment.get(\"_Duration\") *60 *60 *24 *365;",
							"    pm.expect(results[0].Duration).to.equal(request_duration_in_seconds);",
							"});",
							"",
							"pm.test(\"Has NodeType\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"NodeType\");",
							"});",
							"",
							"pm.test(\"NodeType match request\", ()=>{",
							"    pm.expect(results[0].NodeType).to.equal(pm.environment.get(\"_NodeType\"));",
							"});",
							"",
							"pm.test(\"Has OfferingType\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"OfferingType\");",
							"});",
							"",
							"pm.test(\"OfferingType match request\", ()=>{",
							"    pm.expect(results[0].OfferingType).to.equal(pm.environment.get(\"offeringType\"));",
							"});",
							"",
							"",
							"pm.test(\"Has ReservedNodeOfferingType\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"DBInstanceReservedNodeOfferingTypeClass\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\":\n  [\n    {\n      \"Service\": \"{{_Service}}\",\n      \"Count\": \"{{_Count}}\",\n      \"Duration\": \"{{_Duration}}\",\n      \"NodeType\": \"{{_NodeType}}\",\n      \"OfferingType\": \"{{_OfferingType}}\",\n      \"Region\": \"{{_Region}}\",\n      \"RecommendationId\": \"6f44bdd8-6cf8-4777-a82c-e4f222582a90\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_aws}}/services/ri-offerings/purchase/",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"ri-offerings",
						"purchase",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Purchase Preview ElastiCache",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"_Service\",\"ElastiCache\");",
							"pm.environment.set(\"_Count\", 2);",
							"pm.environment.set(\"_Duration\", 3);",
							"pm.environment.set('_ProductDescription', \"memcached\");",
							"pm.environment.set('_CacheNodeType', \"cache.m6g.4xlarge\");",
							"pm.environment.set('_OfferingType', \"No Upfront\");",
							"pm.environment.set(\"_Region\",'Asia Pacific (Singapore)');",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"});",
							"",
							"let results = pm.response.json().results;",
							"",
							"pm.test(\"Has Service\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Service\");",
							"});",
							"",
							"pm.test(\"Service match request\", ()=>{",
							"    pm.expect(results[0].Service).to.equal(pm.environment.get(\"_Service\"));",
							"});",
							"",
							"pm.test(\"Has Region\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Region\");",
							"});",
							"",
							"pm.test(\"Region match request\", ()=>{",
							"    pm.expect(results[0].Region).to.equal(pm.environment.get(\"_Region\"));",
							"});",
							"",
							"pm.test(\"Has Count\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Count\");",
							"});",
							"",
							"pm.test(\"Count match request\", ()=>{",
							"    pm.expect(results[0].Count).to.equal(pm.environment.get(\"_Count\"));",
							"});",
							"",
							"pm.test(\"Has Region\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Region\");",
							"});",
							"",
							"pm.test(\"Region match request\", ()=>{",
							"    pm.expect(results[0].Region).to.equal(pm.environment.get(\"_Region\"));",
							"});",
							"",
							"pm.test(\"Has ProductDescription\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"ProductDescription\");",
							"});",
							"",
							"pm.test(\"ProductDescription match request\", ()=>{",
							"    pm.expect(results[0].ProductDescription).to.equal(pm.environment.get(\"_ProductDescription\"));",
							"});",
							"",
							"pm.test(\"Has CacheNodeType\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"CacheNodeType\");",
							"});",
							"",
							"pm.test(\"CacheNodeType match request\", ()=>{",
							"    pm.expect(results[0].CacheNodeType).to.equal(pm.environment.get(\"_CacheNodeType\"));",
							"});",
							"",
							"pm.test(\"Has OfferingType\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"OfferingType\");",
							"});",
							"",
							"pm.test(\"OfferingType match request\", ()=>{",
							"    pm.expect(results[0].OfferingType).to.equal(pm.environment.get(\"_OfferingType\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\":\n  [\n    {\n      \"Service\": \"{{_Service}}\",\n      \"Count\": \"{{_Count}}\",\n      \"Duration\": \"{{_Duration}}\",\n      \"ProductDescription\": \"{{_ProductDescription}}\",\n      \"CacheNodeType\": \"{{_CacheNodeType}}\",\n      \"OfferingType\": \"{{_OfferingType}}\",\n      \"Region\": \"{{_Region}}\",\n      \"RecommendationId\": \"6f44bdd8-6cf8-4777-a82c-e4f222582a90\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_aws}}/services/ri-offerings/purchase/",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"ri-offerings",
						"purchase",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Purchase Preview ES",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"_Service\",\"ES\");",
							"pm.environment.set(\"_Count\", 2);",
							"pm.environment.set(\"_Duration\", 3);",
							"pm.environment.set(\"_RecommendedInstanceType\", \"c5.xlarge.elasticsearch\");",
							"pm.environment.set('_OfferingType', \"No Upfront\");",
							"pm.environment.set(\"_Region\",'Asia Pacific (Singapore)');",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"});",
							"",
							"let results = pm.response.json().results;",
							"",
							"pm.test(\"Has Service\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Service\");",
							"});",
							"",
							"pm.test(\"Service match request\", ()=>{",
							"    pm.expect(results[0].Service).to.equal(pm.environment.get(\"_Service\"));",
							"});",
							"",
							"pm.test(\"Has Count\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Count\");",
							"});",
							"",
							"pm.test(\"Count match request\", ()=>{",
							"    pm.expect(results[0].Count).to.equal(pm.environment.get(\"_Count\"));",
							"});",
							"",
							"pm.test(\"Has Region\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Region\");",
							"});",
							"",
							"pm.test(\"Region match request\", ()=>{",
							"    let response_region = pm.collectionVariables.get('region_dict')[results[0].Region];",
							"    pm.expect(response_region).to.equal(pm.environment.get(\"_Region\"));",
							"});",
							"",
							"pm.test(\"Has RecommendedInstanceType\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"ElasticsearchInstanceType\");",
							"});",
							"",
							"pm.test(\"RecommendedInstanceType match request\", ()=>{",
							"    pm.expect(results[0].ElasticsearchInstanceType).to.equal(pm.environment.get(\"_RecommendedInstanceType\"));",
							"});",
							"",
							"pm.test(\"Has OfferingType\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"OfferingType\");",
							"});",
							"",
							"pm.test(\"OfferingType match request\", ()=>{",
							"    pm.expect(results[0].OfferingType).to.equal(pm.environment.get(\"_OfferingType\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\":\n  [\n    {\n      \"Service\": \"{{_Service}}\",\n      \"Count\": \"{{_Count}}\",\n      \"Duration\": \"{{_Duration}}\",\n      \"RecommendedInstanceType\": \"{{_RecommendedInstanceType}}\",\n      \"OfferingType\": \"{{_OfferingType}}\",\n      \"Region\": \"{{_Region}}\",\n      \"RecommendationId\": \"6f44bdd8-6cf8-4777-a82c-e4f222582a90\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_aws}}/services/ri-offerings/purchase/",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"ri-offerings",
						"purchase",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let region_dict ={ // This is a quick fix solution. A smarter solution is needed in the future.",
					"    'us-east-1': 'US East (N. Virginia)',",
					"    'us-east-2': 'US East (Ohio)',",
					"    'us-west-1': 'US West (N. California)',",
					"    'us-west-2': 'US West (Oregon)',",
					"    'af-south-1': 'Africa (Cape Town)',",
					"    'ap-east-1': 'Asia Pacific (Hong Kong)',",
					"    'ap-south-1': 'Asia Pacific (Mumbai)',",
					"    'ap-northeast-3': 'Asia Pacific (Osaka)',",
					"    'ap-northeast-2': 'Asia Pacific (Seoul)',",
					"    'ap-southeast-1': 'Asia Pacific (Singapore)',",
					"    'ap-southeast-2': 'Asia Pacific (Sydney)',",
					"    'ap-northeast-1': 'Asia Pacific (Tokyo)',",
					"    'ca-central-1': 'Canada (Central)',",
					"    'eu-central-1': 'Europe (Frankfurt)',",
					"    'eu-west-1': 'Europe (Ireland)',",
					"    'eu-west-2': 'Europe (London)',",
					"    'eu-south-1': 'Europe (Milan)',",
					"    'eu-west-3': 'Europe (Paris)',",
					"    'eu-north-1': 'Europe (Stockholm)',",
					"    'me-south-1': 'Middle East (Bahrain)',",
					"    'sa-east-1': 'South America (São Paulo)'",
					"}",
					"pm.collectionVariables.set(\"region_dict\", region_dict);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "region_dict",
			"value": ""
		}
	]
}