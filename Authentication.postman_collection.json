{
	"info": {
		"_postman_id": "8ccf71b0-0889-44df-87fc-8438d93969fa",
		"name": "Authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register",
			"item": [
				{
					"name": "Auth Health Check Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).equals(0);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json()['msg']).to.equal( \"hello world\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}",
							"host": [
								"{{host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start Register /register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});",
									"pm.test(\"Status code is -1\", function () {",
									"    pm.expect(pm.response.json()['data']['vrf_stat']).to.equal(-1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Verify Email /verifymail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const test_mail_pairs = pm.collectionVariables.get('test_mail_pairs');",
									"const index = Math.floor(Math.random()*(test_mail_pairs.length));",
									"const namespace = test_mail_pairs[index][0];",
									"pm.environment.set('test_email_namespace', namespace);",
									"pm.environment.set('test_email_api_key', test_mail_pairs[index][1]);",
									"const email = namespace+\".\" + pm.variables.replaceIn('{{$guid}}') + pm.variables.get(\"test_email_domain\");",
									"pm.environment.set(\"currentEmail\", email);",
									"pm.environment.set(\"timeStamp\", pm.variables.replaceIn('{{$timestamp}}').concat('000'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to_email\": \"{{currentEmail}}\",\n    \"src_page\": \"REG\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/send_email",
							"host": [
								"{{host}}"
							],
							"path": [
								"send_email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get VRFCode From Email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const html_str = pm.response.json()['emails'][0]['html'];",
									"html_str.replace(/\\/n/, '');",
									"const $ = cheerio.load(html_str);",
									"const v_code = $('#vrf_code').text()",
									"pm.test(\"Verification Code is 4-digit\", ()=>{",
									"    pm.expect(v_code).to.match(/\\d{4}/);",
									"})",
									"pm.environment.set(\"vrf_code\", v_code)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{test_email_api}}?apikey={{test_email_api_key}}&namespace={{test_email_namespace}}&timestamp_from={{timeStamp}}&livequery=true",
							"protocol": "https",
							"host": [
								"{{test_email_api}}"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{test_email_api_key}}"
								},
								{
									"key": "namespace",
									"value": "{{test_email_namespace}}"
								},
								{
									"key": "timestamp_from",
									"value": "{{timeStamp}}"
								},
								{
									"key": "livequery",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Wrong VRF_code /verify_email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is not 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(2002);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{currentEmail}}\",\n    \"vrf_cph\": \"bcdefg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/verify_email",
							"host": [
								"{{host}}"
							],
							"path": [
								"verify_email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Correct VRF_code /verify_email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});",
									"pm.test(\"vrf code is 2001\", function () {",
									"    pm.expect(pm.response.json()['data']['vrf_stat']).to.equal(2001);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{currentEmail}}\",\n    \"vrf_cph\": \"{{vrf_code}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/verify_email",
							"host": [
								"{{host}}"
							],
							"path": [
								"verify_email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Success New User /register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"currentPassword\", \"Secret123!\")",
									"const username = pm.variables.replaceIn('{{$randomUUID}}');",
									"pm.environment.set(\"username\", username);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{currentEmail}}\",\n    \"password\": \"{{currentPassword}}\",\n    \"username\": \"{{username}}\",\n    \"organization\": \"Stompy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "First Time Login /login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});",
									"pm.environment.set(\"org_id\", pm.response.json()['data']['org_id']);",
									"pm.environment.set(\"scc_id\", pm.response.json()['data']['scc_id']);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{currentEmail}}\", \n    \"password\": \"{{currentPassword}}\", \n    \"auto_login\": true\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account",
			"item": [
				{
					"name": "Create New ECS Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']) .to.equal(0);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"ecs_id\");",
									"});",
									"pm.environment.set(\"ecs_id\", pm.response.json()['data']['ecs_id']);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('bucketName', 'stompy-dev1-bucket1')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}},\n    \"org_id\": \"{{org_id}}\",\n    \"bucket\": \"{{bucketName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cloudformation-templates/iam-role",
							"host": [
								"{{host}}"
							],
							"path": [
								"cloudformation-templates",
								"iam-role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save New ECS Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']) .to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scc_id\": {{scc_id}},\n    \"org_id\": \"{{org_id}}\",\n    \"ecs_id\": \"{{ecs_id}}\",\n    \"bucket\": \"{{bucketName}}\",\n    \"arn\": \"{{testARN}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cloud-accounts",
							"host": [
								"{{host}}"
							],
							"path": [
								"cloud-accounts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reset Password",
			"item": [
				{
					"name": "RST Page Send Verify Email /send_email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});",
									"pm.test(\"vrf code is -1\", function () {",
									"    pm.expect(pm.response.json()['data']['vrf_stat']).to.equal(-1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "RST Page Send Verify Email /send_email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});",
									"pm.environment.set(\"timeStamp\", pm.variables.replaceIn('{{$timestamp}}').concat('000'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"src_page\": \"RST\", \n    \"to_email\": \"{{currentEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/send_email",
							"host": [
								"{{host}}"
							],
							"path": [
								"send_email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get VRFCode From Email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const html_str = pm.response.json()['emails'][0]['html'];",
									"html_str.replace(/\\/n/, '');",
									"const $ = cheerio.load(html_str);",
									"const v_code = $('#vrf_code').text()",
									"pm.test(\"Verification Code is 4-digit\", ()=>{",
									"    pm.expect(v_code).to.match(/\\d{4}/);",
									"})",
									"pm.environment.set(\"vrf_code\", v_code)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://api.testmail.app/api/json?apikey={{test_email_api_key}}&namespace={{test_email_namespace}}&timestamp_from={{timeStamp}}&livequery=true",
							"protocol": "https",
							"host": [
								"api",
								"testmail",
								"app"
							],
							"path": [
								"api",
								"json"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{test_email_api_key}}"
								},
								{
									"key": "namespace",
									"value": "{{test_email_namespace}}"
								},
								{
									"key": "timestamp_from",
									"value": "{{timeStamp}}"
								},
								{
									"key": "livequery",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Wrong VRF_code for reset /verify_email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is not 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(2002);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{currentEmail}}\",\n    \"vrf_cph\": \"bcdefg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/verify_email",
							"host": [
								"{{host}}"
							],
							"path": [
								"verify_email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Correct VRFCode for Reset /verify_email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});",
									"pm.test(\"vrf stat is 2001\", function () {",
									"    pm.expect(pm.response.json()['data']['vrf_stat']).to.equal(2001);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{currentEmail}}\",\n    \"vrf_cph\": \"{{vrf_code}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/verify_email",
							"host": [
								"{{host}}"
							],
							"path": [
								"verify_email"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Password /reset_password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"vrf code is 2001\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(2001);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"currentPassword\", \"NewSecret123!\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{currentEmail}}\",\n    \"password\": \"{{currentPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/reset_password",
							"host": [
								"{{host}}"
							],
							"path": [
								"reset_password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Again /login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is 0\", function () {",
									"    pm.expect(pm.response.json()['code']).to.equal(0);",
									"});",
									"pm.environment.set(\"org_id\", pm.response.json()['data']['org_id']);",
									"pm.environment.set(\"scc_id\", pm.response.json()['data']['scc_id']);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{currentEmail}}\", \n    \"password\": \"{{currentPassword}}\", \n    \"auto_login\": true\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const api_dict = [['grhng','b3973677-a2e5-4afd-95e5-2c56fbffe501'],",
					"                    ['z4hqx', 'd757bd5c-ec29-43ba-9a71-e489f3ebd41b'],",
					"                    ['29z7n', 'cb5e5893-8022-4101-b082-f9e4d210e1a8'],",
					"                    ['jzpwr', 'efde665c-1ccd-4531-8113-dfaacd2d7dc5'],",
					"                    ['klild', 'e751c3aa-4d29-4178-b2d8-057cb0c23a67']]",
					"pm.collectionVariables.set(\"test_mail_pairs\",api_dict);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "test_email_api",
			"value": "api.testmail.app/api/json"
		},
		{
			"key": "host",
			"value": "http://v1.flask.api.stompy.io"
		},
		{
			"key": "test_email_domain",
			"value": "@inbox.testmail.app"
		},
		{
			"key": "testARN",
			"value": "arn:aws:iam::385105545457:role/stompy-iam-role-stack-42080286085-StompyFinOpsRole-1M2MP3SMF6ZQ8"
		},
		{
			"key": "test_mail_pairs",
			"value": ""
		}
	]
}