{
	"info": {
		"_postman_id": "30d341f2-4117-4b3e-924e-08c6b7415a0e",
		"name": "Purchase Random",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Recommendation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const EC2_ORDER = 0;",
							"const RDS_ORDER = 1;",
							"//ELASTICACHE",
							"const EC_ORDER = 2;",
							"//REDSHIFT ",
							"const RSH_ORDER = 3;",
							"//ELASTISEARCH",
							"const ES_ORDER = 4;",
							"",
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"",
							"pm.test(\"In Order\",()=>{",
							"    let results = pm.response.json().results.grand_result;",
							"    //no d",
							"   for(let i = 0; i<results.length-1;i++){",
							"        switch(i){",
							"            case EC2_ORDER:",
							"                pm.expect(results[i].Service).to.equal(\"Amazon Elastic Compute Cloud - Compute\");",
							"                break;",
							"",
							"            case RDS_ORDER:",
							"              pm.expect(results[i].Service).to.equal(\"Amazon Relational Database Service\");",
							"                break;",
							"            case EC_ORDER:",
							"                pm.expect(results[i].Service).to.equal(\"Amazon ElastiCache\");",
							"                break;",
							"            case RSH_ORDER:",
							"               pm.expect(results[i].Service).to.equal(\"Amazon Redshift\");",
							"                break;",
							"                //when the mismatch is fixed, currently no Service key",
							"            // case ES_ORDER:",
							"            //   pm.expect(results[i].Service).to.equal(\"Amazon Elasticsearch Service\");",
							"            //     break;",
							"        }",
							"    }",
							"",
							"});",
							"",
							"let result_list = pm.response.json().results.grand_result;",
							"//EstimatedAnnualSavings = TotalEstimatedMonthlySavingsAmount*12",
							"pm.test(\"Annual Savings = monthly*12\",()=>{",
							"    let monthly, annual;",
							"    for (let i = 0; i<result_list.length; i++){",
							"        if( result_list[i].Summary == undefined){",
							"        continue;",
							"    }",
							"        monthly = parseFloat(result_list[i].Summary.TotalEstimatedMonthlySavingsAmount);",
							"        annual = parseFloat(result_list[i].Summary.EstimatedAnnualSavings);",
							"        pm.expect(monthly*12).to.be.closeTo(annual, 0.5);",
							"    }",
							"});",
							"",
							"",
							"//record savings",
							"let savings_per_instance = [];",
							"//Set up input for preview",
							"let instance_list = [];",
							"",
							"let r_id, raw_service, service, instances;",
							"for (let i = 0; i<result_list.length; i++){",
							"    //RecommendationId",
							"    r_id = result_list[i].RecommendationId;",
							"    raw_service = result_list[i].Service;",
							"    service = pm.environment.get(\"service_dict\")[raw_service];",
							"    if( r_id == undefined){",
							"        continue;",
							"    }",
							"    instances = result_list[i].RecommendationDetails;",
							"    let curr_instance, region, instance_type, count;",
							"    for(let j = 0; j<instances.length; j++){",
							"        curr_instance = instances[j];",
							"        //record each monthly savings",
							"        savings_per_instance.push(curr_instance.EstimatedMonthlySavings);",
							"        region = curr_instance.Region;",
							"        instance_type = curr_instance.RecommendedInstanceType;",
							"        count = curr_instance.RecommendedNumberOfInstances;",
							"        let info, dict;",
							"       ",
							"        switch(i){",
							"            case EC2_ORDER:",
							"                info = curr_instance.Platform;",
							"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3, \"InstanceType\":instance_type, ",
							"                \"OfferingClass\": \"standard\", \"OfferingType\": \"All Upfront\",\"ProductDescription\":info , ",
							"                \"Region\":region,\"RecommendationId\":r_id};",
							"                instance_list.push(dict);",
							"                break;",
							"            case RDS_ORDER:",
							"                info = curr_instance.ProductDescription;",
							"                multiAZ = curr_instance.MultiAZ;",
							"                dict = {\"Service\": service, \"Count\": count , \"Duration\": 3,\"DBInstanceClass\": instance_type,",
							"                \"OfferingType\": \"All Upfront\",\"ProductDescription\":info,",
							"                 \"MultiAZ\": multiAZ, \"Region\": region,\"RecommendationId\": r_id};",
							"                instance_list.push(dict);",
							"                break;",
							"            case EC_ORDER:",
							"                info = curr_instance.ProductDescription;",
							"                dict = {\"Service\":service, \"Count\": count,\"CacheNodeType\": instance_type, \"Duration\": \"1\", \"ProductDescription\":info.toLowerCase(),",
							"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
							"                instance_list.push(dict);",
							"                break;",
							"            case RSH_ORDER:",
							"                dict = {\"Service\":service, \"Count\": count,\"NodeType\": instance_type, \"Duration\": 3, ",
							"                \"OfferingType\": \"Partial Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
							"                instance_list.push(dict);",
							"                break;",
							"            case ES_ORDER:",
							"                dict = {\"Service\":service, \"Count\": count,\"RecommendedInstanceType\": instance_type, \"Duration\": 2, ",
							"                \"OfferingType\": \"No Upfront\", \"Region\": region, \"RecommendationId\":r_id};",
							"                instance_list.push(dict);",
							"                break;",
							"        }",
							"    }  ",
							"}",
							"let instance_i = Math.floor(Math.random(instance_list)*instance_list.length);",
							"pm.environment.set(\"bought_index\",instance_i);",
							"let one_instance = instance_list[instance_i];",
							"pm.environment.set(\"one_instance\", JSON.stringify(one_instance));",
							"console.log(pm.environment.get(\"one_instance\"));",
							"let est_monthly_saving = savings_per_instance[instance_i];",
							"pm.environment.set(\"est_monthly_saving\", parseFloat(est_monthly_saving));",
							"console.log(pm.environment.get(\"est_monthly_saving\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host_aws}}/ce/get-reservation-recommendation/?cloud_account_id={{cloud_account_id}}",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"ce",
						"get-reservation-recommendation",
						""
					],
					"query": [
						{
							"key": "cloud_account_id",
							"value": "{{cloud_account_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Purchase Preview One of Instance",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
							"});",
							"pm.test(\"Has results\", () => {",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"});",
							"",
							"let pre_instance = JSON.parse(pm.environment.get(\"one_instance\"));",
							"",
							"let results = pm.response.json().results;",
							"",
							"pm.test(\"Has Service\", () => {",
							"    pm.expect(results[0]).to.have.property(\"Service\");",
							"});",
							"",
							"let service = results[0].Service;",
							"pm.test(\"Service match request\", () => {",
							"    pm.expect(results[0].Service).to.equal(pre_instance.Service);",
							"});",
							"",
							"pm.test(\"Has Region\", () => {",
							"    pm.expect(results[0]).to.have.property(\"Region\");",
							"});",
							"",
							"pm.test(\"Region match request\", () => {",
							"    if(service == \"ES\"){",
							"        let response_region = pm.collectionVariables.get('region_dict')[results[0].Region];",
							"        pm.expect(response_region).to.equal(pm.environment.get(\"_Region\"));",
							"    }else{",
							"        pm.expect(results[0].Region).to.equal(pre_instance.Region);",
							"    }",
							"});",
							"",
							"pm.test(\"Has Count\", () => {",
							"    pm.expect(results[0]).to.have.property(\"Count\");",
							"});",
							"",
							"pm.test(\"Count match request\", () => {",
							"    pm.expect(results[0].Count).to.equal(parseInt(pre_instance.Count));",
							"});",
							"",
							"pm.test(\"Has Duration\", () => {",
							"    pm.expect(results[0]).to.have.property(\"Duration\");",
							"});",
							"",
							"pm.test(\"Duration match request\", () => {",
							"    //60s * 60 min * 24 hr * 365 days",
							"    let request_duration_in_seconds = pre_instance.Duration * 60 * 60 * 24 * 365;",
							"    pm.expect(results[0].Duration).to.equal(request_duration_in_seconds);",
							"});",
							"",
							"pm.test(\"Check InstanceType\", () => {",
							"    pm.expect(results[0]).to.satisfy((instance) => {",
							"        if (service == \"EC2\") {",
							"            if (instance.InstanceType == undefined) {",
							"                console.log(\"InstanceType undefined\");",
							"                return false;",
							"            }",
							"            if (instance.OfferingClass != pre_instance.OfferingClass) {",
							"                console.log(\"Offering Class Mismatch\");",
							"                return false;",
							"            }",
							"            return (instance.InstanceType == pre_instance.InstanceType);",
							"        } else if (service == \"RDS\") {",
							"            if (instance.DBInstanceClass == undefined || instance.MultiAZ == undefined) {",
							"                console.log(\"DBInstanceClass or MultiAZ undefined\");",
							"                return false;",
							"            }",
							"            if (instance.DBInstanceClass != pre_instance.DBInstanceClass) {",
							"                console.log(\"InstanceType Mismatch\");",
							"                return false;",
							"            }",
							"            return true; ",
							"        } else if (service == \"ElastiCache\") {",
							"            if (instance.CacheNodeType != pre_instance.CacheNodeType) {",
							"                console.log(\"CacheNodeType Mismatch\");",
							"                return false;",
							"            }",
							"            return true; ",
							"        }else if( service == \"Redshift\"){",
							"            if (instance.NodeType != pre_instance.NodeType) {",
							"                console.log(\"NodeType Mismatch\");",
							"                return false;",
							"            }",
							"            return true; ",
							"        }else {",
							"            if(service != \"ES\"){",
							"                console.log(\"Wrong Service Name\");",
							"                return false;",
							"            }",
							"            if (instance.ElasticsearchInstanceType != pre_instance.RecommendedInstanceType) {",
							"                console.log(\"ElasticsearchInstanceType Mismatch\");",
							"                return false;",
							"            }",
							"            return true; ",
							"        }",
							"    });",
							"});",
							"",
							"pm.test(\"InstanceType match request\", () => {",
							"    pm.expect(results[0].InstanceType).to.equal(pre_instance.InstanceType);",
							"});",
							"",
							"pm.test(\"Has OfferingType\", () => {",
							"    pm.expect(results[0]).to.have.property(\"OfferingType\");",
							"});",
							"",
							"pm.test(\"OfferingType match request\", () => {",
							"    pm.expect(results[0].OfferingType).to.equal(pre_instance.OfferingType);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": true,\n  \"Instances\": \n   [\n    {{one_instance}}\n   ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_aws}}/services/ri-offerings/purchase/",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"ri-offerings",
						"purchase",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "!! Purchase One Instance As Recommended",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"purchase_service\",\"EC2\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"pm.test(\"Has results\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property('results');",
							"});",
							"",
							"let results = pm.response.json().results;",
							"",
							"pm.test(\"Has info\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"info\");",
							"});",
							"",
							"",
							"pm.test(\"Has Service\", ()=>{",
							"    pm.expect(results[0]).to.have.property(\"Service\");",
							"});",
							"",
							"let pre_instance = JSON.parse(pm.environment.get(\"one_instance\"));",
							"pm.test(\"Service match request\", ()=>{",
							"    pm.expect(results[0].Service).to.equal(pre_instance.Service);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"cloud_account_id\": {{cloud_account_id}},\n  \"Preview\": false,\n  \"Instances\":\n  [\n    {{one_instance}}\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_aws}}/services/ri-offerings/purchase/",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"ri-offerings",
						"purchase",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Recommendation Cleared",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"",
							"// pm.test(\"Bought service goes away\",()=>{",
							"//     let result = pm.response.json().results.grand_result;",
							"//     let bought_index = pm.environment.get(\"bought_index\");",
							"//     pm.expect(result[bought_index].RecommendationDetails.length).to.equal(0);",
							"    ",
							"// });",
							"pm.test(\"Bought service goes away\",()=>{",
							"    pm.expect( pm.response.json().results.grand_result).to.satisfy((result)=>{",
							"        for(let i =0; i< result.length;i++){",
							"            if(result[i].RecommendationDetails === undefined){",
							"                continue;",
							"            }",
							"            let total = parseInt(result[i].Summary.TotalRecommendations);",
							"            if (result[i].RecommendationDetails.length == total-1){",
							"                return true;",
							"            }",
							"        }",
							"        return false;",
							"    })",
							"});",
							"//     let result = pm.response.json().results.grand_result;",
							"//     let bought_index = pm.environment.get(\"bought_index\");",
							"//     pm.expect(result[bought_index].RecommendationDetails.length).to.equal(0);",
							"    ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_aws}}/ce/get-reservation-purchase-recommendation/?cloud_account_id={{cloud_account_id}}&period=SEVEN_DAYS",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"ce",
						"get-reservation-purchase-recommendation",
						""
					],
					"query": [
						{
							"key": "cloud_account_id",
							"value": "{{cloud_account_id}}"
						},
						{
							"key": "period",
							"value": "SEVEN_DAYS"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "View Purchases Made",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"",
							"pm.environment.set(\"purchase_id\", pm.response.json()[0].id) ;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_aws}}/services/purchases/?caid={{cloud_account_id}}",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"purchases",
						""
					],
					"query": [
						{
							"key": "caid",
							"value": "{{cloud_account_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Clear Purchase",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host_aws}}/services/purchases/{{purchase_id}}/",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"purchases",
						"{{purchase_id}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "All Purchases Cleared",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"pm.test(\"Response is an empty list\", ()=>{",
							"    pm.expect(pm.response.json().length).to.equal(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_aws}}/services/purchases/?caid={{cloud_account_id}}",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"services",
						"purchases",
						""
					],
					"query": [
						{
							"key": "caid",
							"value": "{{cloud_account_id}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const serviceDict = {",
					"    \"Amazon Elastic Compute Cloud - Compute\":\"EC2\",",
					"    \"Amazon Relational Database Service\":\"RDS\",",
					"    \"Amazon ElastiCache\": \"ElastiCache\" ,",
					"    \"Amazon Redshift\": \"Redshift\" ,",
					"    \"Amazon ElastiSearch\": \"ES\"",
					"};",
					"",
					"pm.environment.set(\"service_dict\", serviceDict);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}