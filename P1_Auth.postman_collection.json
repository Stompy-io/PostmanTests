{
	"info": {
		"_postman_id": "6f58ffcd-078d-414d-ba4b-7642dffd1919",
		"name": "P1_Auth",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Normal Register",
			"item": [
				{
					"name": "Fields Check Email Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const test_mail_pairs = [['ftm8x','be915d57-78e8-42ef-905a-d56e84a94bdf'],",
									"                    ['rw1ta', '00e9dd78-915d-49c7-a86b-7a01bc7e7aa4'],",
									"                    ['eguzv', '853bbc59-1190-4c3d-b19b-fd9b42ec6099'],",
									"                    ['7b984', '5e234310-2865-473f-b270-8900052450c8']]",
									"const index = Math.floor(Math.random()*(test_mail_pairs.length));",
									"const namespace = test_mail_pairs[index][0];",
									"pm.environment.set('test_email_namespace', namespace);",
									"pm.environment.set('test_email_api_key', test_mail_pairs[index][1]);",
									"const email = namespace+\".\" + pm.variables.replaceIn('{{$guid}}') +'.temp'+ pm.variables.get(\"test_email_domain\");",
									"pm.environment.set(\"currentEmail\", email);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test('result is valid data', ()=>{",
									"    pm.expect(pm.response.json().results).to.eql('Valid Data.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_user}}/auth/users/fields_check/?field_value={{currentEmail}}",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"auth",
								"users",
								"fields_check",
								""
							],
							"query": [
								{
									"key": "operation",
									"value": "resetPwd",
									"disabled": true
								},
								{
									"key": "field_value",
									"value": "{{currentEmail}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sent Code Register Normal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// const test_mail_pairs = pm.collectionVariables.get('test_mail_pairs');",
									"// const index = Math.floor(Math.random()*(test_mail_pairs.length));",
									"// const namespace = test_mail_pairs[index][0];",
									"// pm.environment.set('test_email_namespace', namespace);",
									"// pm.environment.set('test_email_api_key', test_mail_pairs[index][1]);",
									"// const email = namespace+\".\" + pm.variables.replaceIn('{{$guid}}') +'.temp'+ pm.variables.get(\"test_email_domain\");",
									"// pm.environment.set(\"currentEmail\", email);",
									"pm.environment.set(\"timeStamp\", pm.variables.replaceIn('{{$timestamp}}').concat('000'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"result is email sent success\", ()=>{",
									"    pm.expect(pm.response.json().results).to.equal('The Email has been sent successfully！');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_user}}/auth/users/send_code/?email_to={{currentEmail}}&operation=register",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"auth",
								"users",
								"send_code",
								""
							],
							"query": [
								{
									"key": "email_to",
									"value": "{{currentEmail}}"
								},
								{
									"key": "operation",
									"value": "register"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get VRFCode From Email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const html_str = pm.response.json()['emails'][0]['html'];",
									"html_str.replace(/\\/n/, '');",
									"const $ = cheerio.load(html_str);",
									"const v_code = $('#vrf_code').text()",
									"pm.test(\"Verification Code is 6-digit\", ()=>{",
									"    pm.expect(v_code).to.match(/^\\d{6}$/);",
									"})",
									"pm.environment.set(\"vrf_code\", v_code)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{test_email_api}}?apikey={{test_email_api_key}}&namespace={{test_email_namespace}}&timestamp_from={{timeStamp}}&livequery=true",
							"protocol": "https",
							"host": [
								"{{test_email_api}}"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{test_email_api_key}}"
								},
								{
									"key": "namespace",
									"value": "{{test_email_namespace}}"
								},
								{
									"key": "timestamp_from",
									"value": "{{timeStamp}}"
								},
								{
									"key": "livequery",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Wrong Vrf Vode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"non_field_errors is Verify Code Does Not Match!\", () => {",
									"    pm.expect(pm.response.json().non_field_errors[0]).to.eql('Verify Code Does Not Match!');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));",
									"pm.environment.set('randomPassword', pm.variables.replaceIn('{{$randomPassword}}'))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "first_name",
									"value": "{{first_name}}",
									"type": "text"
								},
								{
									"key": "organization",
									"value": "Stompy",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{currentEmail}}",
									"type": "text"
								},
								{
									"key": "vrf_code",
									"value": "{{vrf_code}}+1",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{randomPassword}}",
									"type": "text"
								},
								{
									"key": "re_password",
									"value": "{{randomPassword}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host_user}}/auth/users/register/",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"auth",
								"users",
								"register",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"email is invalid\", () => {",
									"    pm.expect(pm.response.json().email[0]).to.eql(\"Enter a valid email address.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));",
									"pm.environment.set('randomPassword', pm.variables.replaceIn('{{$randomPassword}}'))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "first_name",
									"value": "{{first_name}}",
									"type": "text"
								},
								{
									"key": "organization",
									"value": "Stompy",
									"type": "text"
								},
								{
									"key": "email",
									"value": "not_an_email",
									"type": "text"
								},
								{
									"key": "vrf_code",
									"value": "{{vrf_code}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{randomPassword}}",
									"type": "text"
								},
								{
									"key": "re_password",
									"value": "{{randomPassword}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host_user}}/auth/users/register/",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"auth",
								"users",
								"register",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Normal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"pm.test(\"result is Successful Create User\", () => {",
									"    pm.expect(pm.response.json().results).to.equal('Successful Create User.');",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));",
									"pm.environment.set('currentPassword', pm.variables.replaceIn('{{$randomPassword}}'))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "first_name",
									"value": "{{first_name}}",
									"type": "text"
								},
								{
									"key": "organization",
									"value": "Stompy",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{currentEmail}}",
									"type": "text"
								},
								{
									"key": "vrf_code",
									"value": "{{vrf_code}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{currentPassword}}",
									"type": "text"
								},
								{
									"key": "re_password",
									"value": "{{currentPassword}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host_user}}/auth/users/register/",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"auth",
								"users",
								"register",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"pm.test(\"Has Access\", () => {",
									"    pm.expect(pm.response.json()).to.have.property(\"access\");",
									"});",
									"pm.test(\"Has Refresh\", () => {",
									"    pm.expect(pm.response.json()).to.have.property(\"refresh\");",
									"});",
									"",
									"",
									"function parseJwt(token) {",
									"    var base64Payload = token.split('.')[1];",
									"    var payload = Buffer.from(base64Payload, 'base64');",
									"    return JSON.parse(payload.toString());",
									"}",
									"let payload = parseJwt(pm.response.json().access);",
									"pm.environment.set('test_user_id', payload.user_id);",
									"pm.environment.set('test_access', 'JWT ' + pm.response.json().access);",
									"pm.environment.set('test_refresh', pm.response.json().refresh);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{currentEmail}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{currentPassword}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host_user}}/auth/jwt/create/",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"auth",
								"jwt",
								"create",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Stranger things have happened when login",
			"item": [
				{
					"name": "Login Failure Nonexist User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.expect(pm.response.code).eqls(401);",
									"});",
									"",
									"pm.test(\"Detail is no actice account\", function () {",
									"    pm.expect(pm.response.json().detail).to.eql('No active account found with the given credentials');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalid_email\", pm.variables.replaceIn('{{$randomEmail}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{invalid_email}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test1111",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host_user}}/auth/jwt/create/",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"auth",
								"jwt",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Failure Wrong Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.expect(pm.response.code).eqls(401);",
									"});",
									"",
									"pm.test(\"Detail is no actice account\", function () {",
									"    pm.expect(pm.response.json().detail).to.eql('No active account found with the given credentials');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{currentEmail}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test1111",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host_user}}/auth/jwt/create/",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"auth",
								"jwt",
								"create",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Templates",
			"item": [
				{
					"name": "Create Analy Cloud Formation Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"has template_name, template_url\", function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys('template_name','template_url');",
									"});",
									"",
									"pm.test(\"name is correct\", function () {",
									"    pm.expect(pm.response.json().template_name).to.eql('analyzer-role');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('bucketName', 'stompycursingapore')"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{test_access}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_user}}/cloudformation-templates/analyzer-role?s3_bucket={{bucketName}}&account_id={{test_user_id}}",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"cloudformation-templates",
								"analyzer-role"
							],
							"query": [
								{
									"key": "s3_bucket",
									"value": "{{bucketName}}"
								},
								{
									"key": "account_id",
									"value": "{{test_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Spotainer Cloud Formation Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"has template_name, template_url\", function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys('template_name','template_url');",
									"});",
									"",
									"pm.test(\"name is correct\", function () {",
									"    pm.expect(pm.response.json().template_name).to.eql('spotainer-role');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('bucketName', 'stompycursingapore')"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{test_access}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_user}}/cloudformation-templates/spotainer-role?account_id={{test_user_id}}",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"cloudformation-templates",
								"spotainer-role"
							],
							"query": [
								{
									"key": "s3_bucket",
									"value": "{{bucketName}}",
									"disabled": true
								},
								{
									"key": "account_id",
									"value": "{{test_user_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Connect but oh fail",
			"item": [
				{
					"name": "Users Get Organization id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"response has same id as request\", function () {",
									"   pm.expect(pm.response.json().id).to.equal(pm.environment.get('test_user_id'))",
									"});",
									"",
									"pm.test(\"response has email, role\", function () {",
									"   pm.expect(pm.response.json()).to.have.all.keys([\"email\", 'username','id', 'role', 'organization']);",
									"  ",
									"});",
									"pm.environment.set('test_org_id', pm.response.json().organization);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{test_access}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_user}}/users/{{test_user_id}}/",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"users",
								"{{test_user_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Analy Cloud Formation Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"has template_name, template_url\", function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys('template_name','template_url');",
									"});",
									"",
									"pm.test(\"name is correct\", function () {",
									"    pm.expect(pm.response.json().template_name).to.eql('analyzer-role');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('bucketName', 'stompycursingapore')"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{test_access}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_user}}/cloudformation-templates/analyzer-role?s3_bucket={{bucketName}}&account_id={{test_user_id}}",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"cloudformation-templates",
								"analyzer-role"
							],
							"query": [
								{
									"key": "s3_bucket",
									"value": "{{bucketName}}"
								},
								{
									"key": "account_id",
									"value": "{{test_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Spotainer Cloud Formation Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"has template_name, template_url\", function () {",
									"    pm.expect(pm.response.json()).to.have.all.keys('template_name','template_url');",
									"});",
									"",
									"pm.test(\"name is correct\", function () {",
									"    pm.expect(pm.response.json().template_name).to.eql('spotainer-role');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{test_access}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_user}}/cloudformation-templates/spotainer-role?account_id={{test_user_id}}",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"cloudformation-templates",
								"spotainer-role"
							],
							"query": [
								{
									"key": "account_id",
									"value": "{{test_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save New ECS Account both Incorrect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 4xx\", function () {",
									"    pm.expect(pm.response).to.be.clientError;",
									"});",
									"",
									"// pm.test(\"Arn are place holders is False\", function () {",
									"//     pm.expect(pm.response.json().analyzer_arn).to.eql(['Invalid ARN']);",
									"//     pm.expect(pm.response.json().spotainer_arn).to.eql(['Invalid ARN']);",
									"// });",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{test_access}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organization\": \"{{test_org_id}}\",\n    \"bucket\": \"{{bucketName}}\",\n    \"analyzer_arn\": \"blah\",\n    \"spotainer_arn\": \"spot\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_user}}/cloud-accounts/",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"cloud-accounts",
								""
							]
						}
					},
					"response": [
						{
							"name": "Save New ECS Account",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"1564894\",\n    \"organization\": \"152\",\n    \"bucket\": \"{{bucketName}}\",\n    \"arn\": \"{{testARN}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host_user}}/cloud-accounts/",
									"host": [
										"{{host_user}}"
									],
									"path": [
										"cloud-accounts",
										""
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "173"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Thu, 01 Jul 2021 07:54:01 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "81fa75fc-b7b4-43a1-a13b-9ce528d4ba5b"
								},
								{
									"key": "Referrer-Policy",
									"value": "same-origin"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Allow",
									"value": "GET, POST, HEAD, OPTIONS"
								},
								{
									"key": "x-amzn-Remapped-Content-Length",
									"value": "186"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "Bx8nlHJ1SQ0FfCg="
								},
								{
									"key": "Vary",
									"value": "Accept, Origin"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-60dd7496-1a9d36181e8dd63378e023f7;Sampled=1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "Via",
									"value": "1.1 6ff363ba56d3f8161f6692bcccc7a36d.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "LAX50-C3"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "6bdYkBKaCRvPem0kYLfR4IDQp-hTrz7GDxPa7poxEKxWYWbxuV3wSA=="
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1564894,\n    \"bucket\": \"stompy-dev1-bucket1\",\n    \"arn\": \"arn:aws:iam::385105545457:role/stompy-iam-role-stack-22315084633-StompyFinOpsRole-D7IZKZZ41JO5\",\n    \"aws_status\": false,\n    \"organization\": 152\n}"
						},
						{
							"name": "Save New ECS Account Incorrect",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{test_access}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"organization\": \"{{test_org_id}}\",\n    \"bucket\": \"{{bucketName}}\",\n    \"arn\": \"invalid_arn\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host_user}}/cloud-accounts/",
									"host": [
										"{{host_user}}"
									],
									"path": [
										"cloud-accounts",
										""
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Server",
									"value": "CloudFront"
								},
								{
									"key": "Date",
									"value": "Fri, 09 Jul 2021 03:41:05 GMT"
								},
								{
									"key": "Content-Type",
									"value": "text/html"
								},
								{
									"key": "Content-Length",
									"value": "915"
								},
								{
									"key": "Connection",
									"value": "close"
								},
								{
									"key": "X-Cache",
									"value": "Error from cloudfront"
								},
								{
									"key": "Via",
									"value": "1.1 e11ee4e3208082d534c251b36bbee268.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "SEA19-C3"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "-Y9LPZp4AmQ3bYya0C9_CllUcwR4y4pw0dLf0SnahLHgdP8j_ZVFgw=="
								}
							],
							"cookie": [],
							"body": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<HTML>\n    <HEAD>\n        <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n        <TITLE>ERROR: The request could not be satisfied</TITLE>\n    </HEAD>\n    <BODY>\n        <H1>403 ERROR</H1>\n        <H2>The request could not be satisfied.</H2>\n        <HR noshade size=\"1px\">\nBad request.\nWe can't connect to the server for this app or website at this time. There might be too much traffic or a configuration error. Try again later, or contact the app or website owner.\n\n        <BR clear=\"all\">\nIf you provide content to customers through CloudFront, you can find steps to troubleshoot and help prevent this error by reviewing the CloudFront documentation.\n\n        <BR clear=\"all\">\n        <HR noshade size=\"1px\">\n        <PRE>\nGenerated by cloudfront (CloudFront)\nRequest ID: -Y9LPZp4AmQ3bYya0C9_CllUcwR4y4pw0dLf0SnahLHgdP8j_ZVFgw==\n</PRE>\n        <ADDRESS></ADDRESS>\n    </BODY>\n</HTML>"
						}
					]
				},
				{
					"name": "Save New ECS Account Correct Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"AWS Status is True\", function () {",
									"    pm.expect(pm.response.json()['arn_status']['analyzer']) .to.be.true;",
									"     pm.expect(pm.response.json()['arn_status']['spotainer']) .to.be.true;",
									"});",
									"pm.test(\"Has keys id, old_id, bucket, analyzer_arn, spotainer_arn, aws_status, organization\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.all.keys('id', 'old_id', 'bucket', 'analyzer_arn', 'spotainer_arn','arn_status', 'organization');",
									"    pm.expect(pm.response.json().bucket).to.eql( pm.environment.get('bucketName'));",
									"    pm.expect(pm.response.json().analyzer_arn).to.eql(pm.environment.get('testARN'));",
									"    pm.expect(pm.response.json().spotainer_arn).to.eql(pm.environment.get('spotARN'));",
									"    pm.expect(isNaN(pm.response.json().id)) .to.be.false;",
									"});",
									"",
									"pm.environment.set('test_caid', pm.response.json().id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{test_access}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organization\": \"{{test_org_id}}\",\n    \"bucket\": \"{{bucketName}}\",\n    \"analyzer_arn\": \"{{testARN}}\",\n    \"spotainer_arn\": \"{{spotARN}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_user}}/cloud-accounts/",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"cloud-accounts",
								""
							]
						}
					},
					"response": [
						{
							"name": "Save New ECS Account",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"1564894\",\n    \"organization\": \"152\",\n    \"bucket\": \"{{bucketName}}\",\n    \"arn\": \"{{testARN}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host_user}}/cloud-accounts/",
									"host": [
										"{{host_user}}"
									],
									"path": [
										"cloud-accounts",
										""
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "173"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Thu, 01 Jul 2021 07:54:01 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "81fa75fc-b7b4-43a1-a13b-9ce528d4ba5b"
								},
								{
									"key": "Referrer-Policy",
									"value": "same-origin"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Allow",
									"value": "GET, POST, HEAD, OPTIONS"
								},
								{
									"key": "x-amzn-Remapped-Content-Length",
									"value": "186"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "Bx8nlHJ1SQ0FfCg="
								},
								{
									"key": "Vary",
									"value": "Accept, Origin"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-60dd7496-1a9d36181e8dd63378e023f7;Sampled=1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "Via",
									"value": "1.1 6ff363ba56d3f8161f6692bcccc7a36d.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "LAX50-C3"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "6bdYkBKaCRvPem0kYLfR4IDQp-hTrz7GDxPa7poxEKxWYWbxuV3wSA=="
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1564894,\n    \"bucket\": \"stompy-dev1-bucket1\",\n    \"arn\": \"arn:aws:iam::385105545457:role/stompy-iam-role-stack-22315084633-StompyFinOpsRole-D7IZKZZ41JO5\",\n    \"aws_status\": false,\n    \"organization\": 152\n}"
						}
					]
				},
				{
					"name": "Check Success AWS Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"AWS Status is True\", function () {",
									"    pm.expect(pm.response.json()['arn_status']['analyzer']) .to.be.true;",
									"     pm.expect(pm.response.json()['arn_status']['spotainer']) .to.be.true;",
									"});",
									"pm.test(\"Has keys id, old_id, bucket, analyzer_arn, spotainer_arn, aws_status, organization\", ()=>{",
									"    pm.expect(pm.response.json()).to.have.all.keys('id', 'old_id', 'bucket', 'analyzer_arn', 'spotainer_arn','arn_status', 'organization');",
									"    pm.expect(pm.response.json().bucket).to.eql( pm.environment.get('bucketName'));",
									"    pm.expect(pm.response.json().analyzer_arn).to.eql(pm.environment.get('testARN'));",
									"    pm.expect(pm.response.json().spotainer_arn).to.eql(pm.environment.get('spotARN'));",
									"});",
									"",
									"pm.expect('caid remains the same',()=>{",
									"    pm.expect(pm.response.json().id.toString()) .to.eql(pm.environment.get('test_caid').toString());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{test_access}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_user}}/cloud-accounts/{{test_caid}}/",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"cloud-accounts",
								"{{test_caid}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New User Access Check - AWS Accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									"",
									"pm.test(\"results has Id, name, isRoot\",()=>{",
									"    let results = pm.response.json().results;",
									"    if (results != undefined && results.length){",
									"        //check the last element in the array so that we don't only check first element",
									"        pm.expect(results[results.length-1]).to.have.property('Id');",
									"        pm.expect(results[0]).to.have.property('Name');",
									"        pm.expect(results[results.length-1]).to.have.property('isRoot');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{test_access}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host_aws}}/organizations/list-accounts/?caid={{test_caid}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"organizations",
								"list-accounts",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{test_caid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Access Check Get VPCs Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status is 200', () => {",
									"    pm.expect(pm.response).to.have.status(200);",
									"});",
									"",
									"pm.test('Has VpcId', () => {",
									"    let results_list = pm.response.json().results;",
									"    results_list.forEach(data => {",
									"        pm.expect(data).to.have.property('VpcId');",
									"    })",
									"});",
									"",
									"let checkDuplicatesFromList = (list, target_prop) => {",
									"    let store = new Set();",
									"    list.forEach(data => {",
									"        pm.expect(store.has(data[target_prop]), \"No \" + data[target_prop] + 'existed').to.be.false;",
									"        store.add((data[target_prop]))",
									"    });",
									"};",
									"",
									"pm.test('has no duplicates', () => {",
									"    checkDuplicatesFromList(pm.response.json().results, 'VpcId');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{test_access}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host_aws}}/spotainers/get_vpcs/?caid={{test_caid}}&region_code=ap-southeast-1",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"spotainers",
								"get_vpcs",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{test_caid}}"
								},
								{
									"key": "region_code",
									"value": "ap-southeast-1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get VPCs",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host_aws}}/spotainers/get_vpcs/?caid={{cloud_account_id}}&region_code={{region_code}}",
									"host": [
										"{{host_aws}}"
									],
									"path": [
										"spotainers",
										"get_vpcs",
										""
									],
									"query": [
										{
											"key": "caid",
											"value": "{{cloud_account_id}}"
										},
										{
											"key": "region_code",
											"value": "{{region_code}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 05 Jul 2021 09:36:18 GMT"
								},
								{
									"key": "Server",
									"value": "WSGIServer/0.2 CPython/3.6.5"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Vary",
									"value": "Accept, Origin"
								},
								{
									"key": "Allow",
									"value": "GET, HEAD, OPTIONS"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Length",
									"value": "374"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Referrer-Policy",
									"value": "same-origin"
								}
							],
							"cookie": [],
							"body": "{\n    \"results\": [\n        {\n            \"CidrBlock\": \"172.31.0.0/16\",\n            \"DhcpOptionsId\": \"dopt-0c6b846a\",\n            \"State\": \"available\",\n            \"VpcId\": \"vpc-3023d756\",\n            \"OwnerId\": \"385105545457\",\n            \"InstanceTenancy\": \"default\",\n            \"IsDefault\": true\n        },\n        {\n            \"CidrBlock\": \"192.168.0.0/16\",\n            \"DhcpOptionsId\": \"dopt-0c6b846a\",\n            \"State\": \"available\",\n            \"VpcId\": \"vpc-0b3265044afb57fce\",\n            \"OwnerId\": \"385105545457\",\n            \"InstanceTenancy\": \"default\",\n            \"IsDefault\": false\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Login Again After Success Connect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"pm.test(\"Has Access\", () => {",
									"    pm.expect(pm.response.json()).to.have.property(\"access\");",
									"});",
									"pm.test(\"Has Refresh\", () => {",
									"    pm.expect(pm.response.json()).to.have.property(\"refresh\");",
									"});",
									"",
									"function parseJwt(token) {",
									"    var base64Payload = token.split('.')[1];",
									"    var payload = Buffer.from(base64Payload, 'base64');",
									"    return JSON.parse(payload.toString());",
									"}",
									"let payload = parseJwt(pm.response.json().access);",
									"",
									"pm.test('user_id, org_ig, caid match previous', ()=>{",
									"    pm.expect(payload.user_id.toString(), \"why user id changed??\").to.eql(pm.environment.get('test_user_id').toString());",
									"    pm.expect(payload.caid.toString(), \"why ca id changed??\").to.eql(pm.environment.get('test_caid').toString());",
									"});",
									"",
									"pm.environment.set('test_access', 'JWT ' + pm.response.json().access);",
									"pm.environment.set('test_refresh', pm.response.json().refresh);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{currentEmail}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{currentPassword}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host_user}}/auth/jwt/create/",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"auth",
								"jwt",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Access Check Account cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has results\",()=>{",
									"    pm.expect(pm.response.json()).to.have.property('results');",
									"});",
									"",
									"pm.test(\"Each result has accountid, amount, account name\", ()=>{",
									"    pm.expect(pm.response.json().results).to.satisfy((results)=>{",
									"        for(let i =0; i<results.length; i++){",
									"            let result = results[i];",
									"            if(isNaN( parseInt(result.AccountID)) || isNaN(parseFloat(result.AccountID)) || typeof(result.AccountName) != 'string'){",
									"                return false;",
									"            }",
									"        }",
									"        return true;",
									"    });",
									"});",
									"",
									"pm.environment.set('query_accounts', JSON.stringify(pm.response.json().results));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{test_access}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host_aws}}/ce/cost_usage/account_cost/?caid={{test_caid}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"ce",
								"cost_usage",
								"account_cost",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{test_caid}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Account cost",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "JWT eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjI1MDQzMzUyLCJqdGkiOiJhZWY3ZDI2Y2Q2MTc0ZmZkYWUyYWQyZGNkNWI4NTAwZSIsInVzZXJfaWQiOjIsImNhaWQiOjF9.RODNBg9YDOIzmiGqD92dD605Q00i55P6v-f18XqYMGc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host_aws}}/ce/cost_usage/account_cost/?caid={{cloud_account_id}}",
									"host": [
										"{{host_aws}}"
									],
									"path": [
										"ce",
										"cost_usage",
										"account_cost",
										""
									],
									"query": [
										{
											"key": "caid",
											"value": "{{cloud_account_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 08:17:22 GMT"
								},
								{
									"key": "Server",
									"value": "WSGIServer/0.2 CPython/3.6.5"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Vary",
									"value": "Accept, Origin"
								},
								{
									"key": "Allow",
									"value": "GET, HEAD, OPTIONS"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Length",
									"value": "229"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Referrer-Policy",
									"value": "same-origin"
								}
							],
							"cookie": [],
							"body": "{\n    \"results\": [\n        {\n            \"AccountID\": \"263078123597\",\n            \"Amount\": \"1158.02\",\n            \"AccountName\": \"MR332\"\n        },\n        {\n            \"AccountID\": \"385105545457\",\n            \"Amount\": \"882.14\",\n            \"AccountName\": \"Stompy.io\"\n        },\n        {\n            \"AccountID\": \"254378262586\",\n            \"Amount\": \"4.62\",\n            \"AccountName\": \"Stompy_test\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Access Check Get VPCs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status is 200', () => {",
									"    pm.expect(pm.response).to.have.status(200);",
									"});",
									"",
									"pm.test('Has VpcId', () => {",
									"    let results_list = pm.response.json().results;",
									"    results_list.forEach(data => {",
									"        pm.expect(data).to.have.property('VpcId');",
									"    })",
									"});",
									"",
									"let checkDuplicatesFromList = (list, target_prop) => {",
									"    let store = new Set();",
									"    list.forEach(data => {",
									"        pm.expect(store.has(data[target_prop]), \"No \" + data[target_prop] + 'existed').to.be.false;",
									"        store.add((data[target_prop]))",
									"    });",
									"};",
									"",
									"pm.test('has no duplicates', () => {",
									"    checkDuplicatesFromList(pm.response.json().results, 'VpcId');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{test_access}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host_aws}}/spotainers/get_vpcs/?caid={{test_caid}}&region_code=ap-southeast-1",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"spotainers",
								"get_vpcs",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{test_caid}}"
								},
								{
									"key": "region_code",
									"value": "ap-southeast-1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get VPCs",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host_aws}}/spotainers/get_vpcs/?caid={{cloud_account_id}}&region_code={{region_code}}",
									"host": [
										"{{host_aws}}"
									],
									"path": [
										"spotainers",
										"get_vpcs",
										""
									],
									"query": [
										{
											"key": "caid",
											"value": "{{cloud_account_id}}"
										},
										{
											"key": "region_code",
											"value": "{{region_code}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 05 Jul 2021 09:36:18 GMT"
								},
								{
									"key": "Server",
									"value": "WSGIServer/0.2 CPython/3.6.5"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Vary",
									"value": "Accept, Origin"
								},
								{
									"key": "Allow",
									"value": "GET, HEAD, OPTIONS"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Length",
									"value": "374"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Referrer-Policy",
									"value": "same-origin"
								}
							],
							"cookie": [],
							"body": "{\n    \"results\": [\n        {\n            \"CidrBlock\": \"172.31.0.0/16\",\n            \"DhcpOptionsId\": \"dopt-0c6b846a\",\n            \"State\": \"available\",\n            \"VpcId\": \"vpc-3023d756\",\n            \"OwnerId\": \"385105545457\",\n            \"InstanceTenancy\": \"default\",\n            \"IsDefault\": true\n        },\n        {\n            \"CidrBlock\": \"192.168.0.0/16\",\n            \"DhcpOptionsId\": \"dopt-0c6b846a\",\n            \"State\": \"available\",\n            \"VpcId\": \"vpc-0b3265044afb57fce\",\n            \"OwnerId\": \"385105545457\",\n            \"InstanceTenancy\": \"default\",\n            \"IsDefault\": false\n        }\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Refresh",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"pm.test(\"Has Access\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property(\"access\");",
							"});",
							"pm.test(\"Has Refresh\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.property(\"refresh\");",
							"});",
							"pm.environment.set('test_access', 'JWT ' + pm.response.json().access);",
							"pm.environment.set('test_refresh', pm.response.json().refresh);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "refresh",
							"value": "{{test_refresh}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host_user}}/auth/jwt/refresh/",
					"host": [
						"{{host_user}}"
					],
					"path": [
						"auth",
						"jwt",
						"refresh",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "test_mail_pairs",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		}
	]
}