{
	"info": {
		"_postman_id": "b9fb6da1-efc2-4d74-bb7a-ac7f822066b3",
		"name": "Auth Never Fail",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Fields Check Email Is New",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const test_mail_pairs =  [['grhng','b3973677-a2e5-4afd-95e5-2c56fbffe501'],",
							"                    ['z4hqx', 'd757bd5c-ec29-43ba-9a71-e489f3ebd41b'],",
							"                    ['29z7n', 'cb5e5893-8022-4101-b082-f9e4d210e1a8'],",
							"                    ['jzpwr', 'efde665c-1ccd-4531-8113-dfaacd2d7dc5']]",
							"                    ",
							"const index = Math.floor(Math.random()*(test_mail_pairs.length));",
							"const namespace = test_mail_pairs[index][0];",
							"pm.environment.set('test_email_namespace', namespace);",
							"pm.environment.set('test_email_api_key', test_mail_pairs[index][1]);",
							"const email = namespace+\".\" + pm.variables.replaceIn('{{$guid}}') +'.temp'+ pm.variables.get(\"test_email_domain\");",
							"pm.environment.set(\"currentEmail\", email);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test('result is valid data', ()=>{",
							"    pm.expect(pm.response.json().results).to.eql('Valid Data.');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_user}}/auth/users/fields_check/?field_value={{currentEmail}}",
					"host": [
						"{{host_user}}"
					],
					"path": [
						"auth",
						"users",
						"fields_check",
						""
					],
					"query": [
						{
							"key": "operation",
							"value": "resetPwd",
							"disabled": true
						},
						{
							"key": "field_value",
							"value": "{{currentEmail}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sent Code Register",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// const test_mail_pairs = pm.collectionVariables.get('test_mail_pairs');",
							"// const index = Math.floor(Math.random()*(test_mail_pairs.length));",
							"// const namespace = test_mail_pairs[index][0];",
							"// pm.environment.set('test_email_namespace', namespace);",
							"// pm.environment.set('test_email_api_key', test_mail_pairs[index][1]);",
							"// const email = namespace+\".\" + pm.variables.replaceIn('{{$guid}}') +'.temp'+ pm.variables.get(\"test_email_domain\");",
							"// pm.environment.set(\"currentEmail\", email);",
							"pm.environment.set(\"timeStamp\", pm.variables.replaceIn('{{$timestamp}}').concat('000'));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"result is email sent success\", ()=>{",
							"    pm.expect(pm.response.json().results).to.equal('The Email has been sent successfully！');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host_user}}/auth/users/send_code/?email_to={{currentEmail}}&operation=register",
					"host": [
						"{{host_user}}"
					],
					"path": [
						"auth",
						"users",
						"send_code",
						""
					],
					"query": [
						{
							"key": "email_to",
							"value": "{{currentEmail}}"
						},
						{
							"key": "operation",
							"value": "register"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get VRFCode From Email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const html_str = pm.response.json()['emails'][0]['html'];",
							"html_str.replace(/\\/n/, '');",
							"const $ = cheerio.load(html_str);",
							"const v_code = $('#vrf_code').text()",
							"pm.test(\"Verification Code is 6-digit\", ()=>{",
							"    pm.expect(v_code).to.match(/^\\d{6}$/);",
							"})",
							"pm.environment.set(\"vrf_code\", v_code)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{test_email_api}}?apikey={{test_email_api_key}}&namespace={{test_email_namespace}}&timestamp_from={{timeStamp}}&livequery=true",
					"protocol": "https",
					"host": [
						"{{test_email_api}}"
					],
					"query": [
						{
							"key": "apikey",
							"value": "{{test_email_api_key}}"
						},
						{
							"key": "namespace",
							"value": "{{test_email_namespace}}"
						},
						{
							"key": "timestamp_from",
							"value": "{{timeStamp}}"
						},
						{
							"key": "livequery",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));",
							"pm.environment.set('currentPassword', pm.variables.replaceIn('{{$randomPassword}}'))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"pm.test(\"result is email sent success\", () => {",
							"    pm.expect(pm.response.json().results).to.equal('Successful Create User.');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "first_name",
							"value": "{{first_name}}",
							"type": "text"
						},
						{
							"key": "organization",
							"value": "Stompy",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{currentEmail}}",
							"type": "text"
						},
						{
							"key": "vrf_code",
							"value": "{{vrf_code}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{currentPassword}}",
							"type": "text"
						},
						{
							"key": "re_password",
							"value": "{{currentPassword}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host_user}}/auth/users/register/",
					"host": [
						"{{host_user}}"
					],
					"path": [
						"auth",
						"users",
						"register",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Has Access\", () => {",
							"    pm.expect(pm.response.json()).to.have.property(\"access\");",
							"});",
							"pm.test(\"Has Refresh\", () => {",
							"    pm.expect(pm.response.json()).to.have.property(\"refresh\");",
							"});",
							"",
							"",
							"function parseJwt(token) {",
							"    var base64Payload = token.split('.')[1];",
							"    var payload = Buffer.from(base64Payload, 'base64');",
							"    return JSON.parse(payload.toString());",
							"}",
							"let payload = parseJwt(pm.response.json().access);",
							"pm.environment.set('test_user_id', payload.user_id);",
							"pm.environment.set('test_access', 'JWT ' + pm.response.json().access);",
							"pm.environment.set('test_refresh', pm.response.json().refresh);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "{{currentEmail}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{currentPassword}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host_user}}/auth/jwt/create/",
					"host": [
						"{{host_user}}"
					],
					"path": [
						"auth",
						"jwt",
						"create",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "users get org id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"response has same id as request\", function () {",
							"   pm.expect(pm.response.json().id).to.equal(pm.environment.get('test_user_id'))",
							"});",
							"",
							"pm.test(\"response has email, role\", function () {",
							"   pm.expect(pm.response.json()).to.have.all.keys([\"email\", 'username','id', 'role', 'organization']);",
							"  ",
							"});",
							"pm.environment.set('test_org_id', pm.response.json().organization);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{test_access}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_user}}/users/{{test_user_id}}/",
					"host": [
						"{{host_user}}"
					],
					"path": [
						"users",
						"{{test_user_id}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Analy Cloud Formation Template",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"has template_name, template_url\", function () {",
							"    pm.expect(pm.response.json()).to.have.all.keys('template_name','template_url');",
							"});",
							"",
							"pm.test(\"name is correct\", function () {",
							"    pm.expect(pm.response.json().template_name).to.eql('analyzer-role');",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set('bucketName', 'stompycursingapore')"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{test_access}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_user}}/cloudformation-templates/analyzer-role?s3_bucket={{bucketName}}&account_id={{test_user_id}}",
					"host": [
						"{{host_user}}"
					],
					"path": [
						"cloudformation-templates",
						"analyzer-role"
					],
					"query": [
						{
							"key": "s3_bucket",
							"value": "{{bucketName}}"
						},
						{
							"key": "account_id",
							"value": "{{test_user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Spotainer Cloud Formation Template Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"has template_name, template_url\", function () {",
							"    pm.expect(pm.response.json()).to.have.all.keys('template_name','template_url');",
							"});",
							"",
							"pm.test(\"name is correct\", function () {",
							"    pm.expect(pm.response.json().template_name).to.eql('spotainer-role');",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set('bucketName', 'stompycursingapore')"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{test_access}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_user}}/cloudformation-templates/spotainer-role?s3_bucket={{bucketName}}&account_id={{test_user_id}}",
					"host": [
						"{{host_user}}"
					],
					"path": [
						"cloudformation-templates",
						"spotainer-role"
					],
					"query": [
						{
							"key": "s3_bucket",
							"value": "{{bucketName}}"
						},
						{
							"key": "account_id",
							"value": "{{test_user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Save New ECS Account Correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"AWS Status is True\", function () {",
							"    pm.expect(pm.response.json()['arn_status']['analyzer']) .to.be.true;",
							"     pm.expect(pm.response.json()['arn_status']['spotainer']) .to.be.true;",
							"});",
							"pm.test(\"Has keys id, old_id, bucket, analyzer_arn, spotainer_arn, aws_status, organization\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.all.keys('id', 'old_id', 'bucket', 'analyzer_arn', 'spotainer_arn','arn_status', 'organization');",
							"    pm.expect(pm.response.json().bucket).to.eql( pm.environment.get('bucketName'));",
							"    pm.expect(pm.response.json().analyzer_arn).to.eql(pm.environment.get('testARN'));",
							"    pm.expect(pm.response.json().spotainer_arn).to.eql(pm.environment.get('spotARN'));",
							"    pm.expect(isNaN(pm.response.json().id)) .to.be.false;",
							"});",
							"",
							"pm.environment.set('test_caid', pm.response.json().id)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{test_access}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"organization\": \"{{test_org_id}}\",\n    \"bucket\": \"{{bucketName}}\",\n    \"analyzer_arn\": \"{{testARN}}\",\n    \"spotainer_arn\": \"{{spotARN}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_user}}/cloud-accounts/",
					"host": [
						"{{host_user}}"
					],
					"path": [
						"cloud-accounts",
						""
					]
				}
			},
			"response": [
				{
					"name": "Save New ECS Account",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"1564894\",\n    \"organization\": \"152\",\n    \"bucket\": \"{{bucketName}}\",\n    \"arn\": \"{{testARN}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_user}}/cloud-accounts/",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"cloud-accounts",
								""
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "173"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Thu, 01 Jul 2021 07:54:01 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "81fa75fc-b7b4-43a1-a13b-9ce528d4ba5b"
						},
						{
							"key": "Referrer-Policy",
							"value": "same-origin"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Allow",
							"value": "GET, POST, HEAD, OPTIONS"
						},
						{
							"key": "x-amzn-Remapped-Content-Length",
							"value": "186"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "Bx8nlHJ1SQ0FfCg="
						},
						{
							"key": "Vary",
							"value": "Accept, Origin"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-60dd7496-1a9d36181e8dd63378e023f7;Sampled=1"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 6ff363ba56d3f8161f6692bcccc7a36d.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "LAX50-C3"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "6bdYkBKaCRvPem0kYLfR4IDQp-hTrz7GDxPa7poxEKxWYWbxuV3wSA=="
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 1564894,\n    \"bucket\": \"stompy-dev1-bucket1\",\n    \"arn\": \"arn:aws:iam::385105545457:role/stompy-iam-role-stack-22315084633-StompyFinOpsRole-D7IZKZZ41JO5\",\n    \"aws_status\": false,\n    \"organization\": 152\n}"
				}
			]
		},
		{
			"name": "Check Success AWS Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"AWS Status is True\", function () {",
							"    pm.expect(pm.response.json()['arn_status']['analyzer']) .to.be.true;",
							"     pm.expect(pm.response.json()['arn_status']['spotainer']) .to.be.true;",
							"});",
							"pm.test(\"Has keys id, old_id, bucket, analyzer_arn, spotainer_arn, aws_status, organization\", ()=>{",
							"    pm.expect(pm.response.json()).to.have.all.keys('id', 'old_id', 'bucket', 'analyzer_arn', 'spotainer_arn','arn_status', 'organization');",
							"    pm.expect(pm.response.json().bucket).to.eql( pm.environment.get('bucketName'));",
							"    pm.expect(pm.response.json().analyzer_arn).to.eql(pm.environment.get('testARN'));",
							"    pm.expect(pm.response.json().spotainer_arn).to.eql(pm.environment.get('spotARN'));",
							"    pm.expect(pm.response.json().id) .to.eql(pm.environment.get('test_caid'));",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{test_access}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host_user}}/cloud-accounts/{{test_caid}}/",
					"host": [
						"{{host_user}}"
					],
					"path": [
						"cloud-accounts",
						"{{test_caid}}",
						""
					]
				}
			},
			"response": [
				{
					"name": "Check Success AWS Status",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{test_access}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_user}}/cloud-accounts/{{test_caid}}/",
							"host": [
								"{{host_user}}"
							],
							"path": [
								"cloud-accounts",
								"{{test_caid}}",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "174"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Wed, 07 Jul 2021 05:06:31 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "65b26d2e-ecd8-4b9a-bb7c-13dc1dea1e6f"
						},
						{
							"key": "Referrer-Policy",
							"value": "same-origin"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Allow",
							"value": "GET, PUT, PATCH, DELETE, HEAD, OPTIONS"
						},
						{
							"key": "x-amzn-Remapped-Content-Length",
							"value": "187"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "CFVtYHSDSQ0FpOg="
						},
						{
							"key": "Vary",
							"value": "Accept, Origin"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-60e53655-52090be114d1e1fa696fbe6b;Sampled=1"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 ba055a10d278614dad75399031edff3c.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "MRS52-C2"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "593UX8u24QnxQIKSBbu4m5GZNrYswhyFm2QT3zmN98GLskDA61Db5w=="
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 17,\n    \"old_id\": null,\n    \"bucket\": \"stompycursingapore\",\n    \"arn\": \"arn:aws:iam::385105545457:role/stompy-iam-role-stack-noelDev-StompyFinOpsRole-BECYKKB5NVPO\",\n    \"aws_status\": true,\n    \"organization\": 6\n}"
				}
			]
		},
		{
			"name": "AWS Accounts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
							"});",
							"",
							"pm.test(\"results has Id, name, isRoot\",()=>{",
							"    let results = pm.response.json().results;",
							"    if (results != undefined && results.length){",
							"        //check the last element in the array so that we don't only check first element",
							"        pm.expect(results[results.length-1]).to.have.property('Id');",
							"        pm.expect(results[0]).to.have.property('Name');",
							"        pm.expect(results[results.length-1]).to.have.property('isRoot');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{test_access}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host_aws}}/organizations/list-accounts/?caid={{test_caid}}",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"organizations",
						"list-accounts",
						""
					],
					"query": [
						{
							"key": "caid",
							"value": "{{test_caid}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "AWS Accounts",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjI1MDQzMzUyLCJqdGkiOiJhZWY3ZDI2Y2Q2MTc0ZmZkYWUyYWQyZGNkNWI4NTAwZSIsInVzZXJfaWQiOjIsImNhaWQiOjF9.RODNBg9YDOIzmiGqD92dD605Q00i55P6v-f18XqYMGc",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host_aws}}/organizations/list-accounts/?caid={{cloud_account_id}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"organizations",
								"list-accounts",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{cloud_account_id}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 30 Jun 2021 08:06:43 GMT"
						},
						{
							"key": "Server",
							"value": "WSGIServer/0.2 CPython/3.6.5"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Vary",
							"value": "Accept, Origin"
						},
						{
							"key": "Allow",
							"value": "GET, HEAD, OPTIONS"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Length",
							"value": "178"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Referrer-Policy",
							"value": "same-origin"
						}
					],
					"cookie": [],
					"body": "{\n    \"results\": [\n        {\n            \"Id\": \"263078123597\",\n            \"Name\": \"MR332\",\n            \"isRoot\": false\n        },\n        {\n            \"Id\": \"254378262586\",\n            \"Name\": \"Stompy_test\",\n            \"isRoot\": false\n        },\n        {\n            \"Id\": \"385105545457\",\n            \"Name\": \"Stompy.io\",\n            \"isRoot\": true\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Get VPCs",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// const REGION_MAP = {",
							"//     'US East (N. Virginia)': 'us-east-1',",
							"//     'Canada (Central)': 'ca-central-1',",
							"//     'Asia Pacific (Mumbai)': 'ap-south-1',",
							"//     'US West (Oregon)': 'us-west-2',",
							"//     'Asia Pacific (Seoul)': 'ap-northeast-2',",
							"//     'US West (N. California)': 'us-west-1',",
							"//     'US East (Ohio)': 'us-east-2',",
							"//     'EU (Ireland)': 'eu-west-1',",
							"//     'South America (Sao Paulo)': 'sa-east-1',",
							"//     'Asia Pacific (Tokyo)': 'ap-northeast-1',",
							"//     'EU (London)': 'eu-west-2',",
							"//     'Asia Pacific (Sydney)': 'ap-southeast-2',",
							"//     'EU (Milan)': 'eu-south-1',",
							"//     'EU (Paris)': 'eu-west-3',",
							"//     'EU (Stockholm)': 'eu-north-1',",
							"//     'Middle East (Bahrain)': 'me-south-1',",
							"//     'EU (Frankfurt)': 'eu-central-1',",
							"//     'Asia Pacific (Singapore)': 'ap-southeast-1',",
							"//     'Africa (Cape Town)': 'af-south-1',",
							"//     'Asia Pacific (Hong Kong)': 'ap-east-1',",
							"//     'Asia Pacific (Osaka)': 'ap-northeast-3',",
							"//     // 'AWS GovCloud (US)': None",
							"// }",
							"",
							"// function randomValue(obj) {",
							"//     let keys = Object.keys(obj);",
							"//     return obj[keys[ Math.floor( keys.length * Math.random())]];",
							"// };",
							"",
							"// let region_code = randomValue(REGION_MAP);",
							"// console.log(region_code);",
							"// pm.environment.set('region_code',region_code);",
							"pm.environment.set('region_code','ap-southeast-1');",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const default_no_access = ['me-south-1', 'af-south-1', 'ap-east-1', ' eu-south-1']",
							"if (default_no_access.includes(pm.request.url.query.toObject().region_code)) {",
							"    pm.test('Status is 400', () => {",
							"        pm.expect(pm.response).to.have.status(400);",
							"    });",
							"    pm.test('results is parameter error', () => {",
							"        pm.expect(pm.response.json().error).to.eql('Parameters Error! Detail: An error occurred (AuthFailure) when calling the DescribeVpcs operation: AWS was not able to validate the provided access credentials');",
							"    });",
							"",
							"} else {",
							"    pm.test('Status is 200', () => {",
							"        pm.expect(pm.response).to.have.status(200);",
							"    });",
							"",
							"    pm.test('Has VpcId', () => {",
							"        let results_list = pm.response.json().results;",
							"        results_list.forEach(data => {",
							"            pm.expect(data).to.have.property('VpcId');",
							"        })",
							"    });",
							"",
							"    let checkDuplicatesFromList = (list, target_prop) => {",
							"        let store = new Set();",
							"        list.forEach(data => {",
							"            pm.expect(store.has(data[target_prop]),\"No \"+data[target_prop] +'existed' ).to.be.false;",
							"            store.add((data[target_prop]))",
							"        });",
							"    };",
							"",
							"    pm.test('has no duplicates', () => {",
							"        checkDuplicatesFromList(pm.response.json().results, 'VpcId');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{test_access}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host_aws}}/spotainers/get_vpcs/?caid={{test_caid}}&region_code=ap-southeast-1",
					"host": [
						"{{host_aws}}"
					],
					"path": [
						"spotainers",
						"get_vpcs",
						""
					],
					"query": [
						{
							"key": "caid",
							"value": "{{test_caid}}"
						},
						{
							"key": "region_code",
							"value": "ap-southeast-1"
						}
					]
				}
			},
			"response": [
				{
					"name": "Get VPCs",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host_aws}}/spotainer/get_vpcs/?caid={{cloud_account_id}}&region_code={{region_code}}",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"spotainer",
								"get_vpcs",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{cloud_account_id}}"
								},
								{
									"key": "region_code",
									"value": "{{region_code}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 05 Jul 2021 09:36:18 GMT"
						},
						{
							"key": "Server",
							"value": "WSGIServer/0.2 CPython/3.6.5"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Vary",
							"value": "Accept, Origin"
						},
						{
							"key": "Allow",
							"value": "GET, HEAD, OPTIONS"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Length",
							"value": "374"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Referrer-Policy",
							"value": "same-origin"
						}
					],
					"cookie": [],
					"body": "{\n    \"results\": [\n        {\n            \"CidrBlock\": \"172.31.0.0/16\",\n            \"DhcpOptionsId\": \"dopt-0c6b846a\",\n            \"State\": \"available\",\n            \"VpcId\": \"vpc-3023d756\",\n            \"OwnerId\": \"385105545457\",\n            \"InstanceTenancy\": \"default\",\n            \"IsDefault\": true\n        },\n        {\n            \"CidrBlock\": \"192.168.0.0/16\",\n            \"DhcpOptionsId\": \"dopt-0c6b846a\",\n            \"State\": \"available\",\n            \"VpcId\": \"vpc-0b3265044afb57fce\",\n            \"OwnerId\": \"385105545457\",\n            \"InstanceTenancy\": \"default\",\n            \"IsDefault\": false\n        }\n    ]\n}"
				},
				{
					"name": "Get VPCs",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host_aws}}/spotainer/get_vpcs/?caid={{cloud_account_id}}&region_code=ap-east-1",
							"host": [
								"{{host_aws}}"
							],
							"path": [
								"spotainer",
								"get_vpcs",
								""
							],
							"query": [
								{
									"key": "caid",
									"value": "{{cloud_account_id}}"
								},
								{
									"key": "region_code",
									"value": "ap-east-1"
								},
								{
									"key": "region_code",
									"value": "me-south-1",
									"disabled": true
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "153"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Tue, 06 Jul 2021 08:30:06 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "aaf77474-e0a5-4c8c-9707-22b17dadbb36"
						},
						{
							"key": "Referrer-Policy",
							"value": "same-origin"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Allow",
							"value": "GET, HEAD, OPTIONS"
						},
						{
							"key": "x-amzn-Remapped-Content-Length",
							"value": "173"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "CCgl6Fn3SQ0FSlQ="
						},
						{
							"key": "Vary",
							"value": "Accept, Origin"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-60e4148c-5223826f3b3723d630fab37b;Sampled=1"
						},
						{
							"key": "X-Cache",
							"value": "Error from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 ef6538ee7be7b17c84d06edb0f4c0a1a.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "SEA19-C1"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "Sm1ambOeosjNRPBiFHO90GaoF-K5hWYaap88TrgS7c1h1EhWWPA8bg=="
						}
					],
					"cookie": [],
					"body": "{\n    \"results\": \"Parameters Error! Detail: An error occurred (AuthFailure) when calling the DescribeVpcs operation: AWS was not able to validate the provided access credentials\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "test_mail_pairs",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		}
	]
}